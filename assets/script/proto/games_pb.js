/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspbcomp = require('google-protobuf');
var COMPILED = jspbcomp.COMPILED;
var jspb = jspbcomp.jspb;
var goog = jspbcomp.goog;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.Army', null, global);
goog.exportSymbol('proto.BATTLEGROUNDS_GOODS_TYPE', null, global);
goog.exportSymbol('proto.BallInfoBean', null, global);
goog.exportSymbol('proto.DescInfo', null, global);
goog.exportSymbol('proto.FlyChickenProp', null, global);
goog.exportSymbol('proto.GuessDrawPath', null, global);
goog.exportSymbol('proto.GuessDrawPen', null, global);
goog.exportSymbol('proto.GuessDrawResult', null, global);
goog.exportSymbol('proto.MsgAnimalGridInfo', null, global);
goog.exportSymbol('proto.MsgAnimalMoveNtf', null, global);
goog.exportSymbol('proto.MsgAnimalMoveRep', null, global);
goog.exportSymbol('proto.MsgAnimalMoveReq', null, global);
goog.exportSymbol('proto.MsgAnimalOpenNtf', null, global);
goog.exportSymbol('proto.MsgAnimalOpenRep', null, global);
goog.exportSymbol('proto.MsgAnimalOpenReq', null, global);
goog.exportSymbol('proto.MsgAnimalRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgAnimalResultNtf', null, global);
goog.exportSymbol('proto.MsgAnimalStartNtf', null, global);
goog.exportSymbol('proto.MsgArcheryPlayEndNtf', null, global);
goog.exportSymbol('proto.MsgArcheryPlayEndReq', null, global);
goog.exportSymbol('proto.MsgArcheryPlayNtf', null, global);
goog.exportSymbol('proto.MsgArcheryPlayRep', null, global);
goog.exportSymbol('proto.MsgArcheryPlayReq', null, global);
goog.exportSymbol('proto.MsgArcheryPlayStateNtf', null, global);
goog.exportSymbol('proto.MsgArcheryPlayStateReq', null, global);
goog.exportSymbol('proto.MsgArcheryRaceInfo', null, global);
goog.exportSymbol('proto.MsgArcheryRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgArcheryResultNtf', null, global);
goog.exportSymbol('proto.MsgArcheryStartNtf', null, global);
goog.exportSymbol('proto.MsgArmyChessInfo', null, global);
goog.exportSymbol('proto.MsgArmychessMoveNtf', null, global);
goog.exportSymbol('proto.MsgArmychessMoveRep', null, global);
goog.exportSymbol('proto.MsgArmychessMoveReq', null, global);
goog.exportSymbol('proto.MsgArmychessOpenNtf', null, global);
goog.exportSymbol('proto.MsgArmychessOpenRep', null, global);
goog.exportSymbol('proto.MsgArmychessOpenReq', null, global);
goog.exportSymbol('proto.MsgArmychessOperateNtf', null, global);
goog.exportSymbol('proto.MsgArmychessOverNtf', null, global);
goog.exportSymbol('proto.MsgArmychessRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgArmychessStartNtf', null, global);
goog.exportSymbol('proto.MsgBalltowerInfoNtf', null, global);
goog.exportSymbol('proto.MsgBalltowerInfoReq', null, global);
goog.exportSymbol('proto.MsgBalltowerOverNtf', null, global);
goog.exportSymbol('proto.MsgBalltowerRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgBalltowerScoreSyncNtf', null, global);
goog.exportSymbol('proto.MsgBalltowerScoreSyncReq', null, global);
goog.exportSymbol('proto.MsgBalltowerStartNtf', null, global);
goog.exportSymbol('proto.MsgBasketballRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgBasketballResultNtf', null, global);
goog.exportSymbol('proto.MsgBasketballStartNtf', null, global);
goog.exportSymbol('proto.MsgBasketballSyncNtf', null, global);
goog.exportSymbol('proto.MsgBasketballSyncReq', null, global);
goog.exportSymbol('proto.MsgBattleInfoBean', null, global);
goog.exportSymbol('proto.MsgBattleInfoNtf', null, global);
goog.exportSymbol('proto.MsgBattleInfoReq', null, global);
goog.exportSymbol('proto.MsgBattlegroundsAi', null, global);
goog.exportSymbol('proto.MsgBattlegroundsAiNtf', null, global);
goog.exportSymbol('proto.MsgBattlegroundsAttackReq', null, global);
goog.exportSymbol('proto.MsgBattlegroundsDiedInfoBean', null, global);
goog.exportSymbol('proto.MsgBattlegroundsDiedNtf', null, global);
goog.exportSymbol('proto.MsgBattlegroundsPlayerInfoBean', null, global);
goog.exportSymbol('proto.MsgBattlegroundsPlayerInfoNtf', null, global);
goog.exportSymbol('proto.MsgBattlegroundsPosBean', null, global);
goog.exportSymbol('proto.MsgBattlegroundsPosCorrectionNtf', null, global);
goog.exportSymbol('proto.MsgBattlegroundsPosNtf', null, global);
goog.exportSymbol('proto.MsgBattlegroundsPosReq', null, global);
goog.exportSymbol('proto.MsgBattlegroundsResultNtf', null, global);
goog.exportSymbol('proto.MsgBattlegroundsSafetyZoneNtf', null, global);
goog.exportSymbol('proto.MsgBattlegroundsStartNtf', null, global);
goog.exportSymbol('proto.MsgBattlegroundsStartPosReq', null, global);
goog.exportSymbol('proto.MsgBattlegroundsStatusInfoBean', null, global);
goog.exportSymbol('proto.MsgBilliardsBallSyncNtf', null, global);
goog.exportSymbol('proto.MsgBilliardsBallSyncReq', null, global);
goog.exportSymbol('proto.MsgBilliardsCueInfoSyncNtf', null, global);
goog.exportSymbol('proto.MsgBilliardsCueInfoSyncReq', null, global);
goog.exportSymbol('proto.MsgBilliardsHitNtf', null, global);
goog.exportSymbol('proto.MsgBilliardsHitReq', null, global);
goog.exportSymbol('proto.MsgBilliardsOverNtf', null, global);
goog.exportSymbol('proto.MsgBilliardsOverReq', null, global);
goog.exportSymbol('proto.MsgBilliardsPlayerTurnNtf', null, global);
goog.exportSymbol('proto.MsgBilliardsPlayerTurnReq', null, global);
goog.exportSymbol('proto.MsgBilliardsRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgBilliardsSolidNtf', null, global);
goog.exportSymbol('proto.MsgBilliardsSolidReq', null, global);
goog.exportSymbol('proto.MsgBilliardsStartNtf', null, global);
goog.exportSymbol('proto.MsgBilliardsWhiteBallActionNtf', null, global);
goog.exportSymbol('proto.MsgBilliardsWhiteBallActionReq', null, global);
goog.exportSymbol('proto.MsgBlackHoleResultNtf', null, global);
goog.exportSymbol('proto.MsgBlackHoleStartNtf', null, global);
goog.exportSymbol('proto.MsgCatchFishFlingNtf', null, global);
goog.exportSymbol('proto.MsgCatchFishFlingReq', null, global);
goog.exportSymbol('proto.MsgCatchFishHitNtf', null, global);
goog.exportSymbol('proto.MsgCatchFishHitReq', null, global);
goog.exportSymbol('proto.MsgCatchFishOverNtf', null, global);
goog.exportSymbol('proto.MsgCatchFishPosFrameData', null, global);
goog.exportSymbol('proto.MsgCatchFishPosNtf', null, global);
goog.exportSymbol('proto.MsgCatchFishPropData', null, global);
goog.exportSymbol('proto.MsgCatchFishPropNtf', null, global);
goog.exportSymbol('proto.MsgCatchFishRotateNtf', null, global);
goog.exportSymbol('proto.MsgCatchFishRotateReq', null, global);
goog.exportSymbol('proto.MsgCatchFishStartNtf', null, global);
goog.exportSymbol('proto.MsgCatchFishUsePropNtf', null, global);
goog.exportSymbol('proto.MsgCatchFishUsePropReq', null, global);
goog.exportSymbol('proto.MsgCellIndexUpdateNtf', null, global);
goog.exportSymbol('proto.MsgCellIndexUpdateReq', null, global);
goog.exportSymbol('proto.MsgChessBackNtf', null, global);
goog.exportSymbol('proto.MsgChessMoveNtf', null, global);
goog.exportSymbol('proto.MsgChessMoveRep', null, global);
goog.exportSymbol('proto.MsgChessMoveReq', null, global);
goog.exportSymbol('proto.MsgChessRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgChessResultNtf', null, global);
goog.exportSymbol('proto.MsgChessStartNtf', null, global);
goog.exportSymbol('proto.MsgClearPointRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgClearPointResultNtf', null, global);
goog.exportSymbol('proto.MsgClearPointStartNtf', null, global);
goog.exportSymbol('proto.MsgClearPointSyncNtf', null, global);
goog.exportSymbol('proto.MsgClearPointSyncReq', null, global);
goog.exportSymbol('proto.MsgClearbrickAddRowNtf', null, global);
goog.exportSymbol('proto.MsgClearbrickAddRowReq', null, global);
goog.exportSymbol('proto.MsgClearbrickBottomReq', null, global);
goog.exportSymbol('proto.MsgClearbrickOverNtf', null, global);
goog.exportSymbol('proto.MsgClearbrickRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgClearbrickStartNtf', null, global);
goog.exportSymbol('proto.MsgClearbrickSyncPosNtf', null, global);
goog.exportSymbol('proto.MsgClearbrickSyncPosReq', null, global);
goog.exportSymbol('proto.MsgFlashBackNtf', null, global);
goog.exportSymbol('proto.MsgFlashBackReq', null, global);
goog.exportSymbol('proto.MsgFlyChickenHitNtf', null, global);
goog.exportSymbol('proto.MsgFlyChickenHitReq', null, global);
goog.exportSymbol('proto.MsgFlyChickenOverNtf', null, global);
goog.exportSymbol('proto.MsgFlyChickenPropsNtf', null, global);
goog.exportSymbol('proto.MsgFlyChickenRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgFlyChickenRounStartNtf', null, global);
goog.exportSymbol('proto.MsgFlyChickenRoundOverNtf', null, global);
goog.exportSymbol('proto.MsgFlyChickenShootNtf', null, global);
goog.exportSymbol('proto.MsgFlyChickenShootReq', null, global);
goog.exportSymbol('proto.MsgFlyChickenStartNtf', null, global);
goog.exportSymbol('proto.MsgGameStartDataBean', null, global);
goog.exportSymbol('proto.MsgGameUserlistNtf', null, global);
goog.exportSymbol('proto.MsgGamesAgreeNtf', null, global);
goog.exportSymbol('proto.MsgGamesAgreeReq', null, global);
goog.exportSymbol('proto.MsgGamesDisconnectNtf', null, global);
goog.exportSymbol('proto.MsgGamesEndRep', null, global);
goog.exportSymbol('proto.MsgGamesEndReq', null, global);
goog.exportSymbol('proto.MsgGamesExceptionNtf', null, global);
goog.exportSymbol('proto.MsgGamesGiveupNtf', null, global);
goog.exportSymbol('proto.MsgGamesGiveupReq', null, global);
goog.exportSymbol('proto.MsgGamesOptionsNtf', null, global);
goog.exportSymbol('proto.MsgGamesOptionsReq', null, global);
goog.exportSymbol('proto.MsgGamesReadyNtf', null, global);
goog.exportSymbol('proto.MsgGamesReadyReq', null, global);
goog.exportSymbol('proto.MsgGamesRecoveryRep', null, global);
goog.exportSymbol('proto.MsgGamesRecoveryReq', null, global);
goog.exportSymbol('proto.MsgGamesStartRep', null, global);
goog.exportSymbol('proto.MsgGamesStartReq', null, global);
goog.exportSymbol('proto.MsgGobangBackNtf', null, global);
goog.exportSymbol('proto.MsgGobangInfo', null, global);
goog.exportSymbol('proto.MsgGobangPlayNtf', null, global);
goog.exportSymbol('proto.MsgGobangPlayRep', null, global);
goog.exportSymbol('proto.MsgGobangPlayReq', null, global);
goog.exportSymbol('proto.MsgGobangRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgGobangResultNtf', null, global);
goog.exportSymbol('proto.MsgGobangStartNtf', null, global);
goog.exportSymbol('proto.MsgGoldMinerBackNtf', null, global);
goog.exportSymbol('proto.MsgGoldMinerBackReq', null, global);
goog.exportSymbol('proto.MsgGoldMinerGainNtf', null, global);
goog.exportSymbol('proto.MsgGoldMinerGainReq', null, global);
goog.exportSymbol('proto.MsgGoldMinerObject', null, global);
goog.exportSymbol('proto.MsgGoldMinerOverNtf', null, global);
goog.exportSymbol('proto.MsgGoldMinerPropNtf', null, global);
goog.exportSymbol('proto.MsgGoldMinerPropUseNtf', null, global);
goog.exportSymbol('proto.MsgGoldMinerPropUseReq', null, global);
goog.exportSymbol('proto.MsgGoldMinerRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgGoldMinerSniperNtf', null, global);
goog.exportSymbol('proto.MsgGoldMinerSniperReq', null, global);
goog.exportSymbol('proto.MsgGoldMinerStartNtf', null, global);
goog.exportSymbol('proto.MsgGoldMinerSuperPropNtf', null, global);
goog.exportSymbol('proto.MsgGoldMinerSwing', null, global);
goog.exportSymbol('proto.MsgGuessDrawChoiceKeyNtf', null, global);
goog.exportSymbol('proto.MsgGuessDrawChoiceKeyReq', null, global);
goog.exportSymbol('proto.MsgGuessDrawDisplayNtf', null, global);
goog.exportSymbol('proto.MsgGuessDrawEvaluateNtf', null, global);
goog.exportSymbol('proto.MsgGuessDrawEvaluateReq', null, global);
goog.exportSymbol('proto.MsgGuessDrawGuessNtf', null, global);
goog.exportSymbol('proto.MsgGuessDrawGuessReq', null, global);
goog.exportSymbol('proto.MsgGuessDrawKeysNtf', null, global);
goog.exportSymbol('proto.MsgGuessDrawKeysReq', null, global);
goog.exportSymbol('proto.MsgGuessDrawLine', null, global);
goog.exportSymbol('proto.MsgGuessDrawOverNtf', null, global);
goog.exportSymbol('proto.MsgGuessDrawRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgGuessDrawStartNtf', null, global);
goog.exportSymbol('proto.MsgGuessDrawSyncLineNtf', null, global);
goog.exportSymbol('proto.MsgGuessDrawSyncLineReq', null, global);
goog.exportSymbol('proto.MsgHoleAttackPlayerNtf', null, global);
goog.exportSymbol('proto.MsgHoleAttackPlayerReq', null, global);
goog.exportSymbol('proto.MsgHoleGetInfoRep', null, global);
goog.exportSymbol('proto.MsgJoyClearOverNtf', null, global);
goog.exportSymbol('proto.MsgJoyClearRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgJoyClearStartNtf', null, global);
goog.exportSymbol('proto.MsgJoyClearSyncHpNtf', null, global);
goog.exportSymbol('proto.MsgJoyClearSyncHpReq', null, global);
goog.exportSymbol('proto.MsgJoyClearSyncMpNtf', null, global);
goog.exportSymbol('proto.MsgJoyClearSyncMpReq', null, global);
goog.exportSymbol('proto.MsgJumpInfoNtf', null, global);
goog.exportSymbol('proto.MsgJumpInfoReq', null, global);
goog.exportSymbol('proto.MsgJumpRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgJumpResultNtf', null, global);
goog.exportSymbol('proto.MsgJumpStartNtf', null, global);
goog.exportSymbol('proto.MsgJumpSyncNtf', null, global);
goog.exportSymbol('proto.MsgJumpSyncReq', null, global);
goog.exportSymbol('proto.MsgLinkLineNtf', null, global);
goog.exportSymbol('proto.MsgLinkLineRep', null, global);
goog.exportSymbol('proto.MsgLinkLineReq', null, global);
goog.exportSymbol('proto.MsgLinkRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgLinkResultNtf', null, global);
goog.exportSymbol('proto.MsgLinkStartNtf', null, global);
goog.exportSymbol('proto.MsgLinkSyncNtf', null, global);
goog.exportSymbol('proto.MsgLinkSyncReq', null, global);
goog.exportSymbol('proto.MsgLudoAttackInfo', null, global);
goog.exportSymbol('proto.MsgLudoFlyNtf', null, global);
goog.exportSymbol('proto.MsgLudoFlyRep', null, global);
goog.exportSymbol('proto.MsgLudoFlyReq', null, global);
goog.exportSymbol('proto.MsgLudoPkInfo', null, global);
goog.exportSymbol('proto.MsgLudoPlaneInfo', null, global);
goog.exportSymbol('proto.MsgLudoRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgLudoResultNtf', null, global);
goog.exportSymbol('proto.MsgLudoRollDiceNtf', null, global);
goog.exportSymbol('proto.MsgLudoRollDiceRep', null, global);
goog.exportSymbol('proto.MsgLudoStartNtf', null, global);
goog.exportSymbol('proto.MsgMapItemAddNtf', null, global);
goog.exportSymbol('proto.MsgMapItemAddRep', null, global);
goog.exportSymbol('proto.MsgMapItemAddReq', null, global);
goog.exportSymbol('proto.MsgMapItemInfoBean', null, global);
goog.exportSymbol('proto.MsgMapItemInitNtf', null, global);
goog.exportSymbol('proto.MsgMapItemRemoveNtf', null, global);
goog.exportSymbol('proto.MsgMapItemRemoveRep', null, global);
goog.exportSymbol('proto.MsgMapItemRemoveReq', null, global);
goog.exportSymbol('proto.MsgNitpickOverNtf', null, global);
goog.exportSymbol('proto.MsgNitpickRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgNitpickRoundOverNtf', null, global);
goog.exportSymbol('proto.MsgNitpickRoundStartNtf', null, global);
goog.exportSymbol('proto.MsgNitpickStartNtf', null, global);
goog.exportSymbol('proto.MsgNitpickSyncScoreNtf', null, global);
goog.exportSymbol('proto.MsgNitpickSyncScoreReq', null, global);
goog.exportSymbol('proto.MsgObjectInfoBean', null, global);
goog.exportSymbol('proto.MsgObjectInfoNtf', null, global);
goog.exportSymbol('proto.MsgObjectInfoReq', null, global);
goog.exportSymbol('proto.MsgPileHeroOverNtf', null, global);
goog.exportSymbol('proto.MsgPileHeroPlayNtf', null, global);
goog.exportSymbol('proto.MsgPileHeroPlayReq', null, global);
goog.exportSymbol('proto.MsgPileHeroPropsNtf', null, global);
goog.exportSymbol('proto.MsgPileHeroRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgPileHeroShootNtf', null, global);
goog.exportSymbol('proto.MsgPileHeroShootRep', null, global);
goog.exportSymbol('proto.MsgPileHeroShootReq', null, global);
goog.exportSymbol('proto.MsgPileHeroStartNtf', null, global);
goog.exportSymbol('proto.MsgPositionDataBean', null, global);
goog.exportSymbol('proto.MsgPositionDataNtf', null, global);
goog.exportSymbol('proto.MsgPositionDataReq', null, global);
goog.exportSymbol('proto.MsgSoccerAimNtf', null, global);
goog.exportSymbol('proto.MsgSoccerAimReq', null, global);
goog.exportSymbol('proto.MsgSoccerHitNtf', null, global);
goog.exportSymbol('proto.MsgSoccerHitReq', null, global);
goog.exportSymbol('proto.MsgSoccerOverNtf', null, global);
goog.exportSymbol('proto.MsgSoccerPosSyncNtf', null, global);
goog.exportSymbol('proto.MsgSoccerPosSyncReq', null, global);
goog.exportSymbol('proto.MsgSoccerRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgSoccerResultNtf', null, global);
goog.exportSymbol('proto.MsgSoccerResultReq', null, global);
goog.exportSymbol('proto.MsgSoccerRoundNtf', null, global);
goog.exportSymbol('proto.MsgSoccerStartNtf', null, global);
goog.exportSymbol('proto.MsgSolitaireRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgSolitaireResultNtf', null, global);
goog.exportSymbol('proto.MsgSolitaireStartNtf', null, global);
goog.exportSymbol('proto.MsgSolitaireSyncNtf', null, global);
goog.exportSymbol('proto.MsgSolitaireSyncReq', null, global);
goog.exportSymbol('proto.MsgTapBlackOverNtf', null, global);
goog.exportSymbol('proto.MsgTapBlackRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgTapBlackScoreSyncNtf', null, global);
goog.exportSymbol('proto.MsgTapBlackScoreSyncReq', null, global);
goog.exportSymbol('proto.MsgTapBlackStartNtf', null, global);
goog.exportSymbol('proto.MsgTetrisChangeRep', null, global);
goog.exportSymbol('proto.MsgTetrisChangeReq', null, global);
goog.exportSymbol('proto.MsgTetrisClearNtf', null, global);
goog.exportSymbol('proto.MsgTetrisMoveNtf', null, global);
goog.exportSymbol('proto.MsgTetrisMoveRep', null, global);
goog.exportSymbol('proto.MsgTetrisMoveReq', null, global);
goog.exportSymbol('proto.MsgTetrisRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgTetrisResultNtf', null, global);
goog.exportSymbol('proto.MsgTetrisSpeedRep', null, global);
goog.exportSymbol('proto.MsgTetrisSpeedReq', null, global);
goog.exportSymbol('proto.MsgTetrisStartNtf', null, global);
goog.exportSymbol('proto.MsgTetrisSyncNtf', null, global);
goog.exportSymbol('proto.MsgTetrisSyncReq', null, global);
goog.exportSymbol('proto.MsgWhospyChatNtf', null, global);
goog.exportSymbol('proto.MsgWhospyChatReq', null, global);
goog.exportSymbol('proto.MsgWhospyDescNtf', null, global);
goog.exportSymbol('proto.MsgWhospyDescReq', null, global);
goog.exportSymbol('proto.MsgWhospyGuessNtf', null, global);
goog.exportSymbol('proto.MsgWhospyGuessReq', null, global);
goog.exportSymbol('proto.MsgWhospyOverNtf', null, global);
goog.exportSymbol('proto.MsgWhospyRecoveryNtf', null, global);
goog.exportSymbol('proto.MsgWhospyStartDescNtf', null, global);
goog.exportSymbol('proto.MsgWhospyStartGuessNtf', null, global);
goog.exportSymbol('proto.MsgWhospyStartNtf', null, global);
goog.exportSymbol('proto.MsgWhospyStartVoteNtf', null, global);
goog.exportSymbol('proto.MsgWhospyVoteNtf', null, global);
goog.exportSymbol('proto.MsgWhospyVoteReq', null, global);
goog.exportSymbol('proto.MsgWhospyVoteResultNtf', null, global);
goog.exportSymbol('proto.NitpickImageData', null, global);
goog.exportSymbol('proto.NitpickKeys', null, global);
goog.exportSymbol('proto.PileHeroPos', null, global);
goog.exportSymbol('proto.PileHeroProp', null, global);
goog.exportSymbol('proto.RecoveryBallInfoBean', null, global);
goog.exportSymbol('proto.SoccersInfoBean', null, global);
goog.exportSymbol('proto.VoteInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesGiveupReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesGiveupReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesGiveupReq.displayName = 'proto.MsgGamesGiveupReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesGiveupReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesGiveupReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesGiveupReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesGiveupReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesGiveupReq}
 */
proto.MsgGamesGiveupReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesGiveupReq;
  return proto.MsgGamesGiveupReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesGiveupReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesGiveupReq}
 */
proto.MsgGamesGiveupReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesGiveupReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesGiveupReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesGiveupReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesGiveupReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 type = 1;
 * @return {number}
 */
proto.MsgGamesGiveupReq.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesGiveupReq.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesGiveupReq.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesGiveupReq.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesGiveupNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesGiveupNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesGiveupNtf.displayName = 'proto.MsgGamesGiveupNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesGiveupNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesGiveupNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesGiveupNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesGiveupNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesGiveupNtf}
 */
proto.MsgGamesGiveupNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesGiveupNtf;
  return proto.MsgGamesGiveupNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesGiveupNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesGiveupNtf}
 */
proto.MsgGamesGiveupNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesGiveupNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesGiveupNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesGiveupNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesGiveupNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGamesGiveupNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesGiveupNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesGiveupNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesGiveupNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 type = 2;
 * @return {number}
 */
proto.MsgGamesGiveupNtf.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGamesGiveupNtf.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGamesGiveupNtf.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesGiveupNtf.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesAgreeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesAgreeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesAgreeReq.displayName = 'proto.MsgGamesAgreeReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesAgreeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesAgreeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesAgreeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesAgreeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    result: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesAgreeReq}
 */
proto.MsgGamesAgreeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesAgreeReq;
  return proto.MsgGamesAgreeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesAgreeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesAgreeReq}
 */
proto.MsgGamesAgreeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesAgreeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesAgreeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesAgreeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesAgreeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 type = 1;
 * @return {number}
 */
proto.MsgGamesAgreeReq.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesAgreeReq.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesAgreeReq.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesAgreeReq.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 result = 2;
 * @return {number}
 */
proto.MsgGamesAgreeReq.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGamesAgreeReq.prototype.setResult = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGamesAgreeReq.prototype.clearResult = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesAgreeReq.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesAgreeNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesAgreeNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesAgreeNtf.displayName = 'proto.MsgGamesAgreeNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesAgreeNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesAgreeNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesAgreeNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesAgreeNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    result: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesAgreeNtf}
 */
proto.MsgGamesAgreeNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesAgreeNtf;
  return proto.MsgGamesAgreeNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesAgreeNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesAgreeNtf}
 */
proto.MsgGamesAgreeNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesAgreeNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesAgreeNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesAgreeNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesAgreeNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGamesAgreeNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesAgreeNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesAgreeNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesAgreeNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 type = 2;
 * @return {number}
 */
proto.MsgGamesAgreeNtf.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGamesAgreeNtf.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGamesAgreeNtf.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesAgreeNtf.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 result = 3;
 * @return {number}
 */
proto.MsgGamesAgreeNtf.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGamesAgreeNtf.prototype.setResult = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGamesAgreeNtf.prototype.clearResult = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesAgreeNtf.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesStartReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesStartReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesStartReq.displayName = 'proto.MsgGamesStartReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesStartReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesStartReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesStartReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesStartReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesStartReq}
 */
proto.MsgGamesStartReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesStartReq;
  return proto.MsgGamesStartReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesStartReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesStartReq}
 */
proto.MsgGamesStartReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesStartReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesStartReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesStartReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesStartReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGamesStartReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesStartReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesStartReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesStartReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesStartRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesStartRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesStartRep.displayName = 'proto.MsgGamesStartRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesStartRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesStartRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesStartRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesStartRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesStartRep}
 */
proto.MsgGamesStartRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesStartRep;
  return proto.MsgGamesStartRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesStartRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesStartRep}
 */
proto.MsgGamesStartRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesStartRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesStartRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesStartRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesStartRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgGamesStartRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesStartRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesStartRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesStartRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesEndReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesEndReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesEndReq.displayName = 'proto.MsgGamesEndReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesEndReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesEndReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesEndReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesEndReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesEndReq}
 */
proto.MsgGamesEndReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesEndReq;
  return proto.MsgGamesEndReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesEndReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesEndReq}
 */
proto.MsgGamesEndReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesEndReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesEndReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesEndReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesEndReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGamesEndReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesEndReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesEndReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesEndReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesEndRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesEndRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesEndRep.displayName = 'proto.MsgGamesEndRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesEndRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesEndRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesEndRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesEndRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesEndRep}
 */
proto.MsgGamesEndRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesEndRep;
  return proto.MsgGamesEndRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesEndRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesEndRep}
 */
proto.MsgGamesEndRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesEndRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesEndRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesEndRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesEndRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgGamesEndRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesEndRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesEndRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesEndRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesReadyReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesReadyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesReadyReq.displayName = 'proto.MsgGamesReadyReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesReadyReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesReadyReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesReadyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesReadyReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesReadyReq}
 */
proto.MsgGamesReadyReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesReadyReq;
  return proto.MsgGamesReadyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesReadyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesReadyReq}
 */
proto.MsgGamesReadyReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesReadyReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesReadyReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesReadyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesReadyReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGamesReadyReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesReadyReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesReadyReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesReadyReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesReadyNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesReadyNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesReadyNtf.displayName = 'proto.MsgGamesReadyNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesReadyNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesReadyNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesReadyNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesReadyNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    all: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesReadyNtf}
 */
proto.MsgGamesReadyNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesReadyNtf;
  return proto.MsgGamesReadyNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesReadyNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesReadyNtf}
 */
proto.MsgGamesReadyNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesReadyNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesReadyNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesReadyNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesReadyNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGamesReadyNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesReadyNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesReadyNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesReadyNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 all = 2;
 * @return {number}
 */
proto.MsgGamesReadyNtf.prototype.getAll = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGamesReadyNtf.prototype.setAll = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGamesReadyNtf.prototype.clearAll = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesReadyNtf.prototype.hasAll = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesRecoveryReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesRecoveryReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesRecoveryReq.displayName = 'proto.MsgGamesRecoveryReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesRecoveryReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesRecoveryReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesRecoveryReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesRecoveryReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesRecoveryReq}
 */
proto.MsgGamesRecoveryReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesRecoveryReq;
  return proto.MsgGamesRecoveryReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesRecoveryReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesRecoveryReq}
 */
proto.MsgGamesRecoveryReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesRecoveryReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesRecoveryReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesRecoveryReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesRecoveryReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGamesRecoveryReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesRecoveryReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesRecoveryReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesRecoveryReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesRecoveryRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesRecoveryRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesRecoveryRep.displayName = 'proto.MsgGamesRecoveryRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesRecoveryRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesRecoveryRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesRecoveryRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesRecoveryRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesRecoveryRep}
 */
proto.MsgGamesRecoveryRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesRecoveryRep;
  return proto.MsgGamesRecoveryRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesRecoveryRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesRecoveryRep}
 */
proto.MsgGamesRecoveryRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesRecoveryRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesRecoveryRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesRecoveryRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesRecoveryRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgGamesRecoveryRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesRecoveryRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesRecoveryRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesRecoveryRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesExceptionNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesExceptionNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesExceptionNtf.displayName = 'proto.MsgGamesExceptionNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesExceptionNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesExceptionNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesExceptionNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesExceptionNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesExceptionNtf}
 */
proto.MsgGamesExceptionNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesExceptionNtf;
  return proto.MsgGamesExceptionNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesExceptionNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesExceptionNtf}
 */
proto.MsgGamesExceptionNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesExceptionNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesExceptionNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesExceptionNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesExceptionNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgGamesExceptionNtf.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesExceptionNtf.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesExceptionNtf.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesExceptionNtf.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGameUserlistNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgGameUserlistNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgGameUserlistNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGameUserlistNtf.displayName = 'proto.MsgGameUserlistNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgGameUserlistNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGameUserlistNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGameUserlistNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGameUserlistNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGameUserlistNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    common_pb.PkPlayerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGameUserlistNtf}
 */
proto.MsgGameUserlistNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGameUserlistNtf;
  return proto.MsgGameUserlistNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGameUserlistNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGameUserlistNtf}
 */
proto.MsgGameUserlistNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.PkPlayerInfo;
      reader.readMessage(value,common_pb.PkPlayerInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGameUserlistNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGameUserlistNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGameUserlistNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGameUserlistNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.PkPlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PkPlayerInfo info = 1;
 * @return {!Array<!proto.PkPlayerInfo>}
 */
proto.MsgGameUserlistNtf.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.PkPlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.PkPlayerInfo, 1));
};


/** @param {!Array<!proto.PkPlayerInfo>} value */
proto.MsgGameUserlistNtf.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PkPlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PkPlayerInfo}
 */
proto.MsgGameUserlistNtf.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PkPlayerInfo, opt_index);
};


proto.MsgGameUserlistNtf.prototype.clearInfoList = function() {
  this.setInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesDisconnectNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesDisconnectNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesDisconnectNtf.displayName = 'proto.MsgGamesDisconnectNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesDisconnectNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesDisconnectNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesDisconnectNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesDisconnectNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesDisconnectNtf}
 */
proto.MsgGamesDisconnectNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesDisconnectNtf;
  return proto.MsgGamesDisconnectNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesDisconnectNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesDisconnectNtf}
 */
proto.MsgGamesDisconnectNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesDisconnectNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesDisconnectNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesDisconnectNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesDisconnectNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGamesDisconnectNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesDisconnectNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesDisconnectNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesDisconnectNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 type = 2;
 * @return {number}
 */
proto.MsgGamesDisconnectNtf.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGamesDisconnectNtf.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGamesDisconnectNtf.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesDisconnectNtf.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesOptionsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesOptionsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesOptionsReq.displayName = 'proto.MsgGamesOptionsReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesOptionsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesOptionsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesOptionsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesOptionsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    args1: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesOptionsReq}
 */
proto.MsgGamesOptionsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesOptionsReq;
  return proto.MsgGamesOptionsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesOptionsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesOptionsReq}
 */
proto.MsgGamesOptionsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArgs1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesOptionsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesOptionsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesOptionsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesOptionsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 type = 1;
 * @return {number}
 */
proto.MsgGamesOptionsReq.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesOptionsReq.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesOptionsReq.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesOptionsReq.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 args1 = 2;
 * @return {number}
 */
proto.MsgGamesOptionsReq.prototype.getArgs1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGamesOptionsReq.prototype.setArgs1 = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGamesOptionsReq.prototype.clearArgs1 = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesOptionsReq.prototype.hasArgs1 = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGamesOptionsNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGamesOptionsNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGamesOptionsNtf.displayName = 'proto.MsgGamesOptionsNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGamesOptionsNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGamesOptionsNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGamesOptionsNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesOptionsNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    args1: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGamesOptionsNtf}
 */
proto.MsgGamesOptionsNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGamesOptionsNtf;
  return proto.MsgGamesOptionsNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGamesOptionsNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGamesOptionsNtf}
 */
proto.MsgGamesOptionsNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArgs1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGamesOptionsNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGamesOptionsNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGamesOptionsNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGamesOptionsNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGamesOptionsNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGamesOptionsNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGamesOptionsNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesOptionsNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 type = 2;
 * @return {number}
 */
proto.MsgGamesOptionsNtf.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGamesOptionsNtf.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGamesOptionsNtf.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesOptionsNtf.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 args1 = 3;
 * @return {number}
 */
proto.MsgGamesOptionsNtf.prototype.getArgs1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGamesOptionsNtf.prototype.setArgs1 = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGamesOptionsNtf.prototype.clearArgs1 = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGamesOptionsNtf.prototype.hasArgs1 = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgAnimalStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgAnimalStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgAnimalStartNtf.displayName = 'proto.MsgAnimalStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgAnimalStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgAnimalStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgAnimalStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgAnimalStartNtf}
 */
proto.MsgAnimalStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgAnimalStartNtf;
  return proto.MsgAnimalStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgAnimalStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgAnimalStartNtf}
 */
proto.MsgAnimalStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgAnimalStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgAnimalStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgAnimalStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgAnimalStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgAnimalStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgAnimalStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgAnimalStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgAnimalStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgAnimalStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgAnimalStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgAnimalStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgAnimalStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgAnimalOpenReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgAnimalOpenReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgAnimalOpenReq.displayName = 'proto.MsgAnimalOpenReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgAnimalOpenReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgAnimalOpenReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgAnimalOpenReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalOpenReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgAnimalOpenReq}
 */
proto.MsgAnimalOpenReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgAnimalOpenReq;
  return proto.MsgAnimalOpenReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgAnimalOpenReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgAnimalOpenReq}
 */
proto.MsgAnimalOpenReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgAnimalOpenReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgAnimalOpenReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgAnimalOpenReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalOpenReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.MsgAnimalOpenReq.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgAnimalOpenReq.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgAnimalOpenReq.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalOpenReq.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.MsgAnimalOpenReq.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgAnimalOpenReq.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgAnimalOpenReq.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalOpenReq.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgAnimalOpenRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgAnimalOpenRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgAnimalOpenRep.displayName = 'proto.MsgAnimalOpenRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgAnimalOpenRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgAnimalOpenRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgAnimalOpenRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalOpenRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgAnimalOpenRep}
 */
proto.MsgAnimalOpenRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgAnimalOpenRep;
  return proto.MsgAnimalOpenRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgAnimalOpenRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgAnimalOpenRep}
 */
proto.MsgAnimalOpenRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgAnimalOpenRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgAnimalOpenRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgAnimalOpenRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalOpenRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgAnimalOpenRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgAnimalOpenRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgAnimalOpenRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalOpenRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgAnimalOpenNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgAnimalOpenNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgAnimalOpenNtf.displayName = 'proto.MsgAnimalOpenNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgAnimalOpenNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgAnimalOpenNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgAnimalOpenNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalOpenNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2),
    next: jspb.Message.getField(msg, 3),
    time: jspb.Message.getField(msg, 4),
    animalType: jspb.Message.getField(msg, 5),
    pkType: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgAnimalOpenNtf}
 */
proto.MsgAnimalOpenNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgAnimalOpenNtf;
  return proto.MsgAnimalOpenNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgAnimalOpenNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgAnimalOpenNtf}
 */
proto.MsgAnimalOpenNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnimalType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgAnimalOpenNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgAnimalOpenNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgAnimalOpenNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalOpenNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.MsgAnimalOpenNtf.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgAnimalOpenNtf.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgAnimalOpenNtf.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalOpenNtf.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.MsgAnimalOpenNtf.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgAnimalOpenNtf.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgAnimalOpenNtf.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalOpenNtf.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 next = 3;
 * @return {number}
 */
proto.MsgAnimalOpenNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgAnimalOpenNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgAnimalOpenNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalOpenNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 time = 4;
 * @return {number}
 */
proto.MsgAnimalOpenNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgAnimalOpenNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgAnimalOpenNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalOpenNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 animal_type = 5;
 * @return {number}
 */
proto.MsgAnimalOpenNtf.prototype.getAnimalType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgAnimalOpenNtf.prototype.setAnimalType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgAnimalOpenNtf.prototype.clearAnimalType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalOpenNtf.prototype.hasAnimalType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 pk_type = 6;
 * @return {number}
 */
proto.MsgAnimalOpenNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgAnimalOpenNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgAnimalOpenNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalOpenNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgAnimalMoveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgAnimalMoveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgAnimalMoveReq.displayName = 'proto.MsgAnimalMoveReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgAnimalMoveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgAnimalMoveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgAnimalMoveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalMoveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    startX: jspb.Message.getField(msg, 1),
    startY: jspb.Message.getField(msg, 2),
    endX: jspb.Message.getField(msg, 3),
    endY: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgAnimalMoveReq}
 */
proto.MsgAnimalMoveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgAnimalMoveReq;
  return proto.MsgAnimalMoveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgAnimalMoveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgAnimalMoveReq}
 */
proto.MsgAnimalMoveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgAnimalMoveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgAnimalMoveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgAnimalMoveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalMoveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 start_x = 1;
 * @return {number}
 */
proto.MsgAnimalMoveReq.prototype.getStartX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveReq.prototype.setStartX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgAnimalMoveReq.prototype.clearStartX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveReq.prototype.hasStartX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 start_y = 2;
 * @return {number}
 */
proto.MsgAnimalMoveReq.prototype.getStartY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveReq.prototype.setStartY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgAnimalMoveReq.prototype.clearStartY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveReq.prototype.hasStartY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 end_x = 3;
 * @return {number}
 */
proto.MsgAnimalMoveReq.prototype.getEndX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveReq.prototype.setEndX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgAnimalMoveReq.prototype.clearEndX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveReq.prototype.hasEndX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 end_y = 4;
 * @return {number}
 */
proto.MsgAnimalMoveReq.prototype.getEndY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveReq.prototype.setEndY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgAnimalMoveReq.prototype.clearEndY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveReq.prototype.hasEndY = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgAnimalMoveRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgAnimalMoveRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgAnimalMoveRep.displayName = 'proto.MsgAnimalMoveRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgAnimalMoveRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgAnimalMoveRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgAnimalMoveRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalMoveRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgAnimalMoveRep}
 */
proto.MsgAnimalMoveRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgAnimalMoveRep;
  return proto.MsgAnimalMoveRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgAnimalMoveRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgAnimalMoveRep}
 */
proto.MsgAnimalMoveRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgAnimalMoveRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgAnimalMoveRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgAnimalMoveRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalMoveRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgAnimalMoveRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgAnimalMoveRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgAnimalMoveNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgAnimalMoveNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgAnimalMoveNtf.displayName = 'proto.MsgAnimalMoveNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgAnimalMoveNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgAnimalMoveNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgAnimalMoveNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalMoveNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    startX: jspb.Message.getField(msg, 1),
    startY: jspb.Message.getField(msg, 2),
    endX: jspb.Message.getField(msg, 3),
    endY: jspb.Message.getField(msg, 4),
    next: jspb.Message.getField(msg, 5),
    time: jspb.Message.getField(msg, 6),
    moveType: jspb.Message.getField(msg, 7),
    gridType: jspb.Message.getField(msg, 8),
    animalType: jspb.Message.getField(msg, 9),
    pkType: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgAnimalMoveNtf}
 */
proto.MsgAnimalMoveNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgAnimalMoveNtf;
  return proto.MsgAnimalMoveNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgAnimalMoveNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgAnimalMoveNtf}
 */
proto.MsgAnimalMoveNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMoveType(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGridType(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnimalType(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgAnimalMoveNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgAnimalMoveNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgAnimalMoveNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalMoveNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * required uint32 start_x = 1;
 * @return {number}
 */
proto.MsgAnimalMoveNtf.prototype.getStartX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveNtf.prototype.setStartX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgAnimalMoveNtf.prototype.clearStartX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveNtf.prototype.hasStartX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 start_y = 2;
 * @return {number}
 */
proto.MsgAnimalMoveNtf.prototype.getStartY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveNtf.prototype.setStartY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgAnimalMoveNtf.prototype.clearStartY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveNtf.prototype.hasStartY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 end_x = 3;
 * @return {number}
 */
proto.MsgAnimalMoveNtf.prototype.getEndX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveNtf.prototype.setEndX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgAnimalMoveNtf.prototype.clearEndX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveNtf.prototype.hasEndX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 end_y = 4;
 * @return {number}
 */
proto.MsgAnimalMoveNtf.prototype.getEndY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveNtf.prototype.setEndY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgAnimalMoveNtf.prototype.clearEndY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveNtf.prototype.hasEndY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 next = 5;
 * @return {number}
 */
proto.MsgAnimalMoveNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgAnimalMoveNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 time = 6;
 * @return {number}
 */
proto.MsgAnimalMoveNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgAnimalMoveNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 move_type = 7;
 * @return {number}
 */
proto.MsgAnimalMoveNtf.prototype.getMoveType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveNtf.prototype.setMoveType = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgAnimalMoveNtf.prototype.clearMoveType = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveNtf.prototype.hasMoveType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 grid_type = 8;
 * @return {number}
 */
proto.MsgAnimalMoveNtf.prototype.getGridType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveNtf.prototype.setGridType = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgAnimalMoveNtf.prototype.clearGridType = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveNtf.prototype.hasGridType = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 animal_type = 9;
 * @return {number}
 */
proto.MsgAnimalMoveNtf.prototype.getAnimalType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveNtf.prototype.setAnimalType = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.MsgAnimalMoveNtf.prototype.clearAnimalType = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveNtf.prototype.hasAnimalType = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 pk_type = 10;
 * @return {number}
 */
proto.MsgAnimalMoveNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.MsgAnimalMoveNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.MsgAnimalMoveNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalMoveNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgAnimalResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgAnimalResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgAnimalResultNtf.displayName = 'proto.MsgAnimalResultNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgAnimalResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgAnimalResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgAnimalResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgAnimalResultNtf}
 */
proto.MsgAnimalResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgAnimalResultNtf;
  return proto.MsgAnimalResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgAnimalResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgAnimalResultNtf}
 */
proto.MsgAnimalResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgAnimalResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgAnimalResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgAnimalResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgAnimalResultNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgAnimalResultNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgAnimalResultNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalResultNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgAnimalResultNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgAnimalResultNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgAnimalResultNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalResultNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgAnimalGridInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgAnimalGridInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgAnimalGridInfo.displayName = 'proto.MsgAnimalGridInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgAnimalGridInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgAnimalGridInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgAnimalGridInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalGridInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2),
    gridType: jspb.Message.getField(msg, 3),
    animalType: jspb.Message.getField(msg, 4),
    pkType: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgAnimalGridInfo}
 */
proto.MsgAnimalGridInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgAnimalGridInfo;
  return proto.MsgAnimalGridInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgAnimalGridInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgAnimalGridInfo}
 */
proto.MsgAnimalGridInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGridType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnimalType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgAnimalGridInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgAnimalGridInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgAnimalGridInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalGridInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.MsgAnimalGridInfo.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgAnimalGridInfo.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgAnimalGridInfo.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalGridInfo.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.MsgAnimalGridInfo.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgAnimalGridInfo.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgAnimalGridInfo.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalGridInfo.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 grid_type = 3;
 * @return {number}
 */
proto.MsgAnimalGridInfo.prototype.getGridType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgAnimalGridInfo.prototype.setGridType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgAnimalGridInfo.prototype.clearGridType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalGridInfo.prototype.hasGridType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 animal_type = 4;
 * @return {number}
 */
proto.MsgAnimalGridInfo.prototype.getAnimalType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgAnimalGridInfo.prototype.setAnimalType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgAnimalGridInfo.prototype.clearAnimalType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalGridInfo.prototype.hasAnimalType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 pk_type = 5;
 * @return {number}
 */
proto.MsgAnimalGridInfo.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgAnimalGridInfo.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgAnimalGridInfo.prototype.clearPkType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalGridInfo.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgAnimalRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgAnimalRecoveryNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgAnimalRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgAnimalRecoveryNtf.displayName = 'proto.MsgAnimalRecoveryNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgAnimalRecoveryNtf.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgAnimalRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgAnimalRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgAnimalRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    next: jspb.Message.getField(msg, 1),
    time: jspb.Message.getField(msg, 2),
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.MsgAnimalGridInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgAnimalRecoveryNtf}
 */
proto.MsgAnimalRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgAnimalRecoveryNtf;
  return proto.MsgAnimalRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgAnimalRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgAnimalRecoveryNtf}
 */
proto.MsgAnimalRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 3:
      var value = new proto.MsgAnimalGridInfo;
      reader.readMessage(value,proto.MsgAnimalGridInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgAnimalRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgAnimalRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgAnimalRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgAnimalRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.MsgAnimalGridInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 next = 1;
 * @return {number}
 */
proto.MsgAnimalRecoveryNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgAnimalRecoveryNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgAnimalRecoveryNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalRecoveryNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 time = 2;
 * @return {number}
 */
proto.MsgAnimalRecoveryNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgAnimalRecoveryNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgAnimalRecoveryNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgAnimalRecoveryNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated MsgAnimalGridInfo info = 3;
 * @return {!Array<!proto.MsgAnimalGridInfo>}
 */
proto.MsgAnimalRecoveryNtf.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.MsgAnimalGridInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgAnimalGridInfo, 3));
};


/** @param {!Array<!proto.MsgAnimalGridInfo>} value */
proto.MsgAnimalRecoveryNtf.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.MsgAnimalGridInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgAnimalGridInfo}
 */
proto.MsgAnimalRecoveryNtf.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.MsgAnimalGridInfo, opt_index);
};


proto.MsgAnimalRecoveryNtf.prototype.clearInfoList = function() {
  this.setInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLinkStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgLinkStartNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgLinkStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLinkStartNtf.displayName = 'proto.MsgLinkStartNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgLinkStartNtf.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLinkStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLinkStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLinkStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    common_pb.LinkInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLinkStartNtf}
 */
proto.MsgLinkStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLinkStartNtf;
  return proto.MsgLinkStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLinkStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLinkStartNtf}
 */
proto.MsgLinkStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 3:
      var value = new common_pb.LinkInfo;
      reader.readMessage(value,common_pb.LinkInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLinkStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLinkStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLinkStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.LinkInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgLinkStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLinkStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLinkStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgLinkStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLinkStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLinkStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated LinkInfo info = 3;
 * @return {!Array<!proto.LinkInfo>}
 */
proto.MsgLinkStartNtf.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.LinkInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.LinkInfo, 3));
};


/** @param {!Array<!proto.LinkInfo>} value */
proto.MsgLinkStartNtf.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.LinkInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LinkInfo}
 */
proto.MsgLinkStartNtf.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.LinkInfo, opt_index);
};


proto.MsgLinkStartNtf.prototype.clearInfoList = function() {
  this.setInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLinkLineReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLinkLineReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLinkLineReq.displayName = 'proto.MsgLinkLineReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLinkLineReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLinkLineReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLinkLineReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkLineReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    x1: jspb.Message.getField(msg, 1),
    y1: jspb.Message.getField(msg, 2),
    x2: jspb.Message.getField(msg, 3),
    y2: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLinkLineReq}
 */
proto.MsgLinkLineReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLinkLineReq;
  return proto.MsgLinkLineReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLinkLineReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLinkLineReq}
 */
proto.MsgLinkLineReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY1(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX2(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLinkLineReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLinkLineReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLinkLineReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkLineReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 x1 = 1;
 * @return {number}
 */
proto.MsgLinkLineReq.prototype.getX1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLinkLineReq.prototype.setX1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLinkLineReq.prototype.clearX1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkLineReq.prototype.hasX1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y1 = 2;
 * @return {number}
 */
proto.MsgLinkLineReq.prototype.getY1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLinkLineReq.prototype.setY1 = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLinkLineReq.prototype.clearY1 = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkLineReq.prototype.hasY1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 x2 = 3;
 * @return {number}
 */
proto.MsgLinkLineReq.prototype.getX2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgLinkLineReq.prototype.setX2 = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgLinkLineReq.prototype.clearX2 = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkLineReq.prototype.hasX2 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 y2 = 4;
 * @return {number}
 */
proto.MsgLinkLineReq.prototype.getY2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgLinkLineReq.prototype.setY2 = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgLinkLineReq.prototype.clearY2 = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkLineReq.prototype.hasY2 = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLinkLineRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLinkLineRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLinkLineRep.displayName = 'proto.MsgLinkLineRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLinkLineRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLinkLineRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLinkLineRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkLineRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLinkLineRep}
 */
proto.MsgLinkLineRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLinkLineRep;
  return proto.MsgLinkLineRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLinkLineRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLinkLineRep}
 */
proto.MsgLinkLineRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLinkLineRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLinkLineRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLinkLineRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkLineRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgLinkLineRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLinkLineRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLinkLineRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkLineRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLinkLineNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLinkLineNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLinkLineNtf.displayName = 'proto.MsgLinkLineNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLinkLineNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLinkLineNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLinkLineNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkLineNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    progress: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLinkLineNtf}
 */
proto.MsgLinkLineNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLinkLineNtf;
  return proto.MsgLinkLineNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLinkLineNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLinkLineNtf}
 */
proto.MsgLinkLineNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLinkLineNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLinkLineNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLinkLineNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkLineNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgLinkLineNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLinkLineNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLinkLineNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkLineNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 progress = 2;
 * @return {number}
 */
proto.MsgLinkLineNtf.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLinkLineNtf.prototype.setProgress = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLinkLineNtf.prototype.clearProgress = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkLineNtf.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLinkResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLinkResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLinkResultNtf.displayName = 'proto.MsgLinkResultNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLinkResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLinkResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLinkResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLinkResultNtf}
 */
proto.MsgLinkResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLinkResultNtf;
  return proto.MsgLinkResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLinkResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLinkResultNtf}
 */
proto.MsgLinkResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLinkResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLinkResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLinkResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgLinkResultNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLinkResultNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLinkResultNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkResultNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgLinkResultNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLinkResultNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLinkResultNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkResultNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLinkSyncReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLinkSyncReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLinkSyncReq.displayName = 'proto.MsgLinkSyncReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLinkSyncReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLinkSyncReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLinkSyncReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkSyncReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    progress: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLinkSyncReq}
 */
proto.MsgLinkSyncReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLinkSyncReq;
  return proto.MsgLinkSyncReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLinkSyncReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLinkSyncReq}
 */
proto.MsgLinkSyncReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLinkSyncReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLinkSyncReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLinkSyncReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkSyncReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 progress = 1;
 * @return {number}
 */
proto.MsgLinkSyncReq.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLinkSyncReq.prototype.setProgress = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLinkSyncReq.prototype.clearProgress = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkSyncReq.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLinkSyncNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLinkSyncNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLinkSyncNtf.displayName = 'proto.MsgLinkSyncNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLinkSyncNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLinkSyncNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLinkSyncNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkSyncNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    progress: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLinkSyncNtf}
 */
proto.MsgLinkSyncNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLinkSyncNtf;
  return proto.MsgLinkSyncNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLinkSyncNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLinkSyncNtf}
 */
proto.MsgLinkSyncNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLinkSyncNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLinkSyncNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLinkSyncNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkSyncNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgLinkSyncNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLinkSyncNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLinkSyncNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkSyncNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 progress = 2;
 * @return {number}
 */
proto.MsgLinkSyncNtf.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLinkSyncNtf.prototype.setProgress = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLinkSyncNtf.prototype.clearProgress = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkSyncNtf.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLinkRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLinkRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLinkRecoveryNtf.displayName = 'proto.MsgLinkRecoveryNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLinkRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLinkRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLinkRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    redProgress: jspb.Message.getField(msg, 1),
    blueProgress: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLinkRecoveryNtf}
 */
proto.MsgLinkRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLinkRecoveryNtf;
  return proto.MsgLinkRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLinkRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLinkRecoveryNtf}
 */
proto.MsgLinkRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedProgress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLinkRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLinkRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLinkRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLinkRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 red_progress = 1;
 * @return {number}
 */
proto.MsgLinkRecoveryNtf.prototype.getRedProgress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLinkRecoveryNtf.prototype.setRedProgress = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLinkRecoveryNtf.prototype.clearRedProgress = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkRecoveryNtf.prototype.hasRedProgress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 blue_progress = 2;
 * @return {number}
 */
proto.MsgLinkRecoveryNtf.prototype.getBlueProgress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLinkRecoveryNtf.prototype.setBlueProgress = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLinkRecoveryNtf.prototype.clearBlueProgress = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLinkRecoveryNtf.prototype.hasBlueProgress = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTetrisStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTetrisStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTetrisStartNtf.displayName = 'proto.MsgTetrisStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTetrisStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTetrisStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTetrisStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    seed: jspb.Message.getField(msg, 3),
    time: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTetrisStartNtf}
 */
proto.MsgTetrisStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTetrisStartNtf;
  return proto.MsgTetrisStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTetrisStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTetrisStartNtf}
 */
proto.MsgTetrisStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTetrisStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTetrisStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTetrisStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgTetrisStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTetrisStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTetrisStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgTetrisStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgTetrisStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgTetrisStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 seed = 3;
 * @return {number}
 */
proto.MsgTetrisStartNtf.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgTetrisStartNtf.prototype.setSeed = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgTetrisStartNtf.prototype.clearSeed = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisStartNtf.prototype.hasSeed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 time = 4;
 * @return {number}
 */
proto.MsgTetrisStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgTetrisStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgTetrisStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTetrisMoveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTetrisMoveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTetrisMoveReq.displayName = 'proto.MsgTetrisMoveReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTetrisMoveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTetrisMoveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTetrisMoveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisMoveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    angle: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTetrisMoveReq}
 */
proto.MsgTetrisMoveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTetrisMoveReq;
  return proto.MsgTetrisMoveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTetrisMoveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTetrisMoveReq}
 */
proto.MsgTetrisMoveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTetrisMoveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTetrisMoveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTetrisMoveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisMoveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 angle = 1;
 * @return {number}
 */
proto.MsgTetrisMoveReq.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTetrisMoveReq.prototype.setAngle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTetrisMoveReq.prototype.clearAngle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisMoveReq.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTetrisMoveRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTetrisMoveRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTetrisMoveRep.displayName = 'proto.MsgTetrisMoveRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTetrisMoveRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTetrisMoveRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTetrisMoveRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisMoveRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1),
    info: (f = msg.getInfo()) && common_pb.BlockInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTetrisMoveRep}
 */
proto.MsgTetrisMoveRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTetrisMoveRep;
  return proto.MsgTetrisMoveRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTetrisMoveRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTetrisMoveRep}
 */
proto.MsgTetrisMoveRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    case 2:
      var value = new common_pb.BlockInfo;
      reader.readMessage(value,common_pb.BlockInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTetrisMoveRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTetrisMoveRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTetrisMoveRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisMoveRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.BlockInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgTetrisMoveRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTetrisMoveRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTetrisMoveRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisMoveRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BlockInfo info = 2;
 * @return {?proto.BlockInfo}
 */
proto.MsgTetrisMoveRep.prototype.getInfo = function() {
  return /** @type{?proto.BlockInfo} */ (
    jspb.Message.getWrapperField(this, common_pb.BlockInfo, 2));
};


/** @param {?proto.BlockInfo|undefined} value */
proto.MsgTetrisMoveRep.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MsgTetrisMoveRep.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisMoveRep.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTetrisMoveNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTetrisMoveNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTetrisMoveNtf.displayName = 'proto.MsgTetrisMoveNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTetrisMoveNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTetrisMoveNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTetrisMoveNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisMoveNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getField(msg, 1),
    info: (f = msg.getInfo()) && common_pb.BlockInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTetrisMoveNtf}
 */
proto.MsgTetrisMoveNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTetrisMoveNtf;
  return proto.MsgTetrisMoveNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTetrisMoveNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTetrisMoveNtf}
 */
proto.MsgTetrisMoveNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setState(value);
      break;
    case 2:
      var value = new common_pb.BlockInfo;
      reader.readMessage(value,common_pb.BlockInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTetrisMoveNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTetrisMoveNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTetrisMoveNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisMoveNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.BlockInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 state = 1;
 * @return {number}
 */
proto.MsgTetrisMoveNtf.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTetrisMoveNtf.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTetrisMoveNtf.prototype.clearState = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisMoveNtf.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required BlockInfo info = 2;
 * @return {!proto.BlockInfo}
 */
proto.MsgTetrisMoveNtf.prototype.getInfo = function() {
  return /** @type{!proto.BlockInfo} */ (
    jspb.Message.getWrapperField(this, common_pb.BlockInfo, 2, 1));
};


/** @param {!proto.BlockInfo} value */
proto.MsgTetrisMoveNtf.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MsgTetrisMoveNtf.prototype.clearInfo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisMoveNtf.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTetrisClearNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgTetrisClearNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgTetrisClearNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTetrisClearNtf.displayName = 'proto.MsgTetrisClearNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgTetrisClearNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTetrisClearNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTetrisClearNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTetrisClearNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisClearNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    common_pb.PointInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTetrisClearNtf}
 */
proto.MsgTetrisClearNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTetrisClearNtf;
  return proto.MsgTetrisClearNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTetrisClearNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTetrisClearNtf}
 */
proto.MsgTetrisClearNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.PointInfo;
      reader.readMessage(value,common_pb.PointInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTetrisClearNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTetrisClearNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTetrisClearNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisClearNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.PointInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PointInfo info = 1;
 * @return {!Array<!proto.PointInfo>}
 */
proto.MsgTetrisClearNtf.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.PointInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.PointInfo, 1));
};


/** @param {!Array<!proto.PointInfo>} value */
proto.MsgTetrisClearNtf.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PointInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PointInfo}
 */
proto.MsgTetrisClearNtf.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PointInfo, opt_index);
};


proto.MsgTetrisClearNtf.prototype.clearInfoList = function() {
  this.setInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTetrisChangeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTetrisChangeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTetrisChangeReq.displayName = 'proto.MsgTetrisChangeReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTetrisChangeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTetrisChangeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTetrisChangeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisChangeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    angle: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTetrisChangeReq}
 */
proto.MsgTetrisChangeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTetrisChangeReq;
  return proto.MsgTetrisChangeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTetrisChangeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTetrisChangeReq}
 */
proto.MsgTetrisChangeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTetrisChangeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTetrisChangeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTetrisChangeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisChangeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 angle = 1;
 * @return {number}
 */
proto.MsgTetrisChangeReq.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTetrisChangeReq.prototype.setAngle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTetrisChangeReq.prototype.clearAngle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisChangeReq.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTetrisChangeRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTetrisChangeRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTetrisChangeRep.displayName = 'proto.MsgTetrisChangeRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTetrisChangeRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTetrisChangeRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTetrisChangeRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisChangeRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1),
    info: (f = msg.getInfo()) && common_pb.BlockInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTetrisChangeRep}
 */
proto.MsgTetrisChangeRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTetrisChangeRep;
  return proto.MsgTetrisChangeRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTetrisChangeRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTetrisChangeRep}
 */
proto.MsgTetrisChangeRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    case 2:
      var value = new common_pb.BlockInfo;
      reader.readMessage(value,common_pb.BlockInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTetrisChangeRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTetrisChangeRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTetrisChangeRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisChangeRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.BlockInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgTetrisChangeRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTetrisChangeRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTetrisChangeRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisChangeRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BlockInfo info = 2;
 * @return {?proto.BlockInfo}
 */
proto.MsgTetrisChangeRep.prototype.getInfo = function() {
  return /** @type{?proto.BlockInfo} */ (
    jspb.Message.getWrapperField(this, common_pb.BlockInfo, 2));
};


/** @param {?proto.BlockInfo|undefined} value */
proto.MsgTetrisChangeRep.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MsgTetrisChangeRep.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisChangeRep.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTetrisSpeedReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTetrisSpeedReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTetrisSpeedReq.displayName = 'proto.MsgTetrisSpeedReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTetrisSpeedReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTetrisSpeedReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTetrisSpeedReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisSpeedReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    speed: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTetrisSpeedReq}
 */
proto.MsgTetrisSpeedReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTetrisSpeedReq;
  return proto.MsgTetrisSpeedReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTetrisSpeedReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTetrisSpeedReq}
 */
proto.MsgTetrisSpeedReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTetrisSpeedReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTetrisSpeedReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTetrisSpeedReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisSpeedReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 speed = 1;
 * @return {number}
 */
proto.MsgTetrisSpeedReq.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTetrisSpeedReq.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTetrisSpeedReq.prototype.clearSpeed = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisSpeedReq.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTetrisSpeedRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTetrisSpeedRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTetrisSpeedRep.displayName = 'proto.MsgTetrisSpeedRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTetrisSpeedRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTetrisSpeedRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTetrisSpeedRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisSpeedRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTetrisSpeedRep}
 */
proto.MsgTetrisSpeedRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTetrisSpeedRep;
  return proto.MsgTetrisSpeedRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTetrisSpeedRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTetrisSpeedRep}
 */
proto.MsgTetrisSpeedRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTetrisSpeedRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTetrisSpeedRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTetrisSpeedRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisSpeedRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgTetrisSpeedRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTetrisSpeedRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTetrisSpeedRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisSpeedRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTetrisResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTetrisResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTetrisResultNtf.displayName = 'proto.MsgTetrisResultNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTetrisResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTetrisResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTetrisResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTetrisResultNtf}
 */
proto.MsgTetrisResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTetrisResultNtf;
  return proto.MsgTetrisResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTetrisResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTetrisResultNtf}
 */
proto.MsgTetrisResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTetrisResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTetrisResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTetrisResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgTetrisResultNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTetrisResultNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTetrisResultNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisResultNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgTetrisResultNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgTetrisResultNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgTetrisResultNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisResultNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTetrisSyncReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTetrisSyncReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTetrisSyncReq.displayName = 'proto.MsgTetrisSyncReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTetrisSyncReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTetrisSyncReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTetrisSyncReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisSyncReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    score: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTetrisSyncReq}
 */
proto.MsgTetrisSyncReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTetrisSyncReq;
  return proto.MsgTetrisSyncReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTetrisSyncReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTetrisSyncReq}
 */
proto.MsgTetrisSyncReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTetrisSyncReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTetrisSyncReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTetrisSyncReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisSyncReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 score = 1;
 * @return {number}
 */
proto.MsgTetrisSyncReq.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTetrisSyncReq.prototype.setScore = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTetrisSyncReq.prototype.clearScore = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisSyncReq.prototype.hasScore = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTetrisSyncNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTetrisSyncNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTetrisSyncNtf.displayName = 'proto.MsgTetrisSyncNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTetrisSyncNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTetrisSyncNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTetrisSyncNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisSyncNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTetrisSyncNtf}
 */
proto.MsgTetrisSyncNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTetrisSyncNtf;
  return proto.MsgTetrisSyncNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTetrisSyncNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTetrisSyncNtf}
 */
proto.MsgTetrisSyncNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTetrisSyncNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTetrisSyncNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTetrisSyncNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisSyncNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgTetrisSyncNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTetrisSyncNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTetrisSyncNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisSyncNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 score = 2;
 * @return {number}
 */
proto.MsgTetrisSyncNtf.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgTetrisSyncNtf.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgTetrisSyncNtf.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisSyncNtf.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTetrisRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTetrisRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTetrisRecoveryNtf.displayName = 'proto.MsgTetrisRecoveryNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTetrisRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTetrisRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTetrisRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    redScore: jspb.Message.getField(msg, 1),
    blueScore: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTetrisRecoveryNtf}
 */
proto.MsgTetrisRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTetrisRecoveryNtf;
  return proto.MsgTetrisRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTetrisRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTetrisRecoveryNtf}
 */
proto.MsgTetrisRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedScore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTetrisRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTetrisRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTetrisRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTetrisRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 red_score = 1;
 * @return {number}
 */
proto.MsgTetrisRecoveryNtf.prototype.getRedScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTetrisRecoveryNtf.prototype.setRedScore = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTetrisRecoveryNtf.prototype.clearRedScore = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisRecoveryNtf.prototype.hasRedScore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 blue_score = 2;
 * @return {number}
 */
proto.MsgTetrisRecoveryNtf.prototype.getBlueScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgTetrisRecoveryNtf.prototype.setBlueScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgTetrisRecoveryNtf.prototype.clearBlueScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTetrisRecoveryNtf.prototype.hasBlueScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJumpStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJumpStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJumpStartNtf.displayName = 'proto.MsgJumpStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJumpStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJumpStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJumpStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    seed: jspb.Message.getField(msg, 3),
    time: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJumpStartNtf}
 */
proto.MsgJumpStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJumpStartNtf;
  return proto.MsgJumpStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJumpStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJumpStartNtf}
 */
proto.MsgJumpStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJumpStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJumpStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJumpStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgJumpStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJumpStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJumpStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgJumpStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgJumpStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJumpStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 seed = 3;
 * @return {number}
 */
proto.MsgJumpStartNtf.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgJumpStartNtf.prototype.setSeed = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgJumpStartNtf.prototype.clearSeed = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpStartNtf.prototype.hasSeed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 time = 4;
 * @return {number}
 */
proto.MsgJumpStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgJumpStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgJumpStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJumpResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJumpResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJumpResultNtf.displayName = 'proto.MsgJumpResultNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJumpResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJumpResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJumpResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJumpResultNtf}
 */
proto.MsgJumpResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJumpResultNtf;
  return proto.MsgJumpResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJumpResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJumpResultNtf}
 */
proto.MsgJumpResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJumpResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJumpResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJumpResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgJumpResultNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJumpResultNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJumpResultNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpResultNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgJumpResultNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgJumpResultNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJumpResultNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpResultNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJumpSyncReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJumpSyncReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJumpSyncReq.displayName = 'proto.MsgJumpSyncReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJumpSyncReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJumpSyncReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJumpSyncReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpSyncReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJumpSyncReq}
 */
proto.MsgJumpSyncReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJumpSyncReq;
  return proto.MsgJumpSyncReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJumpSyncReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJumpSyncReq}
 */
proto.MsgJumpSyncReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJumpSyncReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJumpSyncReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJumpSyncReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpSyncReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgJumpSyncReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJumpSyncReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJumpSyncReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpSyncReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 score = 2;
 * @return {number}
 */
proto.MsgJumpSyncReq.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgJumpSyncReq.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJumpSyncReq.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpSyncReq.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJumpSyncNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJumpSyncNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJumpSyncNtf.displayName = 'proto.MsgJumpSyncNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJumpSyncNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJumpSyncNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJumpSyncNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpSyncNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJumpSyncNtf}
 */
proto.MsgJumpSyncNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJumpSyncNtf;
  return proto.MsgJumpSyncNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJumpSyncNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJumpSyncNtf}
 */
proto.MsgJumpSyncNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJumpSyncNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJumpSyncNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJumpSyncNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpSyncNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgJumpSyncNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJumpSyncNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJumpSyncNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpSyncNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 score = 2;
 * @return {number}
 */
proto.MsgJumpSyncNtf.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgJumpSyncNtf.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJumpSyncNtf.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpSyncNtf.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattleInfoBean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBattleInfoBean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattleInfoBean.displayName = 'proto.MsgBattleInfoBean';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattleInfoBean.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattleInfoBean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattleInfoBean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattleInfoBean.toObject = function(includeInstance, msg) {
  var f, obj = {
    voice: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattleInfoBean}
 */
proto.MsgBattleInfoBean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattleInfoBean;
  return proto.MsgBattleInfoBean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattleInfoBean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattleInfoBean}
 */
proto.MsgBattleInfoBean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattleInfoBean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattleInfoBean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattleInfoBean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattleInfoBean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 voice = 1;
 * @return {number}
 */
proto.MsgBattleInfoBean.prototype.getVoice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattleInfoBean.prototype.setVoice = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattleInfoBean.prototype.clearVoice = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattleInfoBean.prototype.hasVoice = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgObjectInfoBean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgObjectInfoBean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgObjectInfoBean.displayName = 'proto.MsgObjectInfoBean';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgObjectInfoBean.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgObjectInfoBean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgObjectInfoBean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgObjectInfoBean.toObject = function(includeInstance, msg) {
  var f, obj = {
    localposX: +jspb.Message.getField(msg, 1),
    localposY: +jspb.Message.getField(msg, 2),
    localposZ: +jspb.Message.getField(msg, 3),
    localeulerX: +jspb.Message.getField(msg, 4),
    localeulerY: +jspb.Message.getField(msg, 5),
    localeulerZ: +jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgObjectInfoBean}
 */
proto.MsgObjectInfoBean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgObjectInfoBean;
  return proto.MsgObjectInfoBean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgObjectInfoBean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgObjectInfoBean}
 */
proto.MsgObjectInfoBean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLocalposX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLocalposY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLocalposZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLocaleulerX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLocaleulerY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLocaleulerZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgObjectInfoBean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgObjectInfoBean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgObjectInfoBean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgObjectInfoBean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * required float localPos_x = 1;
 * @return {number}
 */
proto.MsgObjectInfoBean.prototype.getLocalposX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.MsgObjectInfoBean.prototype.setLocalposX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgObjectInfoBean.prototype.clearLocalposX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgObjectInfoBean.prototype.hasLocalposX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float localPos_y = 2;
 * @return {number}
 */
proto.MsgObjectInfoBean.prototype.getLocalposY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MsgObjectInfoBean.prototype.setLocalposY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgObjectInfoBean.prototype.clearLocalposY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgObjectInfoBean.prototype.hasLocalposY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float localPos_z = 3;
 * @return {number}
 */
proto.MsgObjectInfoBean.prototype.getLocalposZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.MsgObjectInfoBean.prototype.setLocalposZ = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgObjectInfoBean.prototype.clearLocalposZ = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgObjectInfoBean.prototype.hasLocalposZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float localEuler_x = 4;
 * @return {number}
 */
proto.MsgObjectInfoBean.prototype.getLocaleulerX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.MsgObjectInfoBean.prototype.setLocaleulerX = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgObjectInfoBean.prototype.clearLocaleulerX = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgObjectInfoBean.prototype.hasLocaleulerX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required float localEuler_y = 5;
 * @return {number}
 */
proto.MsgObjectInfoBean.prototype.getLocaleulerY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.MsgObjectInfoBean.prototype.setLocaleulerY = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgObjectInfoBean.prototype.clearLocaleulerY = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgObjectInfoBean.prototype.hasLocaleulerY = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required float localEuler_z = 6;
 * @return {number}
 */
proto.MsgObjectInfoBean.prototype.getLocaleulerZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.MsgObjectInfoBean.prototype.setLocaleulerZ = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgObjectInfoBean.prototype.clearLocaleulerZ = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgObjectInfoBean.prototype.hasLocaleulerZ = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCellIndexUpdateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCellIndexUpdateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCellIndexUpdateReq.displayName = 'proto.MsgCellIndexUpdateReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCellIndexUpdateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCellIndexUpdateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCellIndexUpdateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCellIndexUpdateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    cellindex: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCellIndexUpdateReq}
 */
proto.MsgCellIndexUpdateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCellIndexUpdateReq;
  return proto.MsgCellIndexUpdateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCellIndexUpdateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCellIndexUpdateReq}
 */
proto.MsgCellIndexUpdateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCellindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCellIndexUpdateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCellIndexUpdateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCellIndexUpdateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCellIndexUpdateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgCellIndexUpdateReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgCellIndexUpdateReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCellIndexUpdateReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCellIndexUpdateReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 cellindex = 2;
 * @return {number}
 */
proto.MsgCellIndexUpdateReq.prototype.getCellindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgCellIndexUpdateReq.prototype.setCellindex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCellIndexUpdateReq.prototype.clearCellindex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCellIndexUpdateReq.prototype.hasCellindex = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCellIndexUpdateNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCellIndexUpdateNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCellIndexUpdateNtf.displayName = 'proto.MsgCellIndexUpdateNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCellIndexUpdateNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCellIndexUpdateNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCellIndexUpdateNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCellIndexUpdateNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    cellindex: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCellIndexUpdateNtf}
 */
proto.MsgCellIndexUpdateNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCellIndexUpdateNtf;
  return proto.MsgCellIndexUpdateNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCellIndexUpdateNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCellIndexUpdateNtf}
 */
proto.MsgCellIndexUpdateNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCellindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCellIndexUpdateNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCellIndexUpdateNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCellIndexUpdateNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCellIndexUpdateNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgCellIndexUpdateNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgCellIndexUpdateNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCellIndexUpdateNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCellIndexUpdateNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 cellindex = 2;
 * @return {number}
 */
proto.MsgCellIndexUpdateNtf.prototype.getCellindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgCellIndexUpdateNtf.prototype.setCellindex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCellIndexUpdateNtf.prototype.clearCellindex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCellIndexUpdateNtf.prototype.hasCellindex = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattleInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBattleInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattleInfoReq.displayName = 'proto.MsgBattleInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattleInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattleInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattleInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattleInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    battleinfobean: (f = msg.getBattleinfobean()) && proto.MsgBattleInfoBean.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattleInfoReq}
 */
proto.MsgBattleInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattleInfoReq;
  return proto.MsgBattleInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattleInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattleInfoReq}
 */
proto.MsgBattleInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.MsgBattleInfoBean;
      reader.readMessage(value,proto.MsgBattleInfoBean.deserializeBinaryFromReader);
      msg.setBattleinfobean(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattleInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattleInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattleInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattleInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBattleinfobean();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MsgBattleInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBattleInfoReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattleInfoReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattleInfoReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattleInfoReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required MsgBattleInfoBean battleInfoBean = 2;
 * @return {!proto.MsgBattleInfoBean}
 */
proto.MsgBattleInfoReq.prototype.getBattleinfobean = function() {
  return /** @type{!proto.MsgBattleInfoBean} */ (
    jspb.Message.getWrapperField(this, proto.MsgBattleInfoBean, 2, 1));
};


/** @param {!proto.MsgBattleInfoBean} value */
proto.MsgBattleInfoReq.prototype.setBattleinfobean = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MsgBattleInfoReq.prototype.clearBattleinfobean = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattleInfoReq.prototype.hasBattleinfobean = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgObjectInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgObjectInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgObjectInfoReq.displayName = 'proto.MsgObjectInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgObjectInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgObjectInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgObjectInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgObjectInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    objectinfobean: (f = msg.getObjectinfobean()) && proto.MsgObjectInfoBean.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgObjectInfoReq}
 */
proto.MsgObjectInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgObjectInfoReq;
  return proto.MsgObjectInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgObjectInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgObjectInfoReq}
 */
proto.MsgObjectInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.MsgObjectInfoBean;
      reader.readMessage(value,proto.MsgObjectInfoBean.deserializeBinaryFromReader);
      msg.setObjectinfobean(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgObjectInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgObjectInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgObjectInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgObjectInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getObjectinfobean();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MsgObjectInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgObjectInfoReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgObjectInfoReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgObjectInfoReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgObjectInfoReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required MsgObjectInfoBean objectInfoBean = 2;
 * @return {!proto.MsgObjectInfoBean}
 */
proto.MsgObjectInfoReq.prototype.getObjectinfobean = function() {
  return /** @type{!proto.MsgObjectInfoBean} */ (
    jspb.Message.getWrapperField(this, proto.MsgObjectInfoBean, 2, 1));
};


/** @param {!proto.MsgObjectInfoBean} value */
proto.MsgObjectInfoReq.prototype.setObjectinfobean = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MsgObjectInfoReq.prototype.clearObjectinfobean = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgObjectInfoReq.prototype.hasObjectinfobean = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattleInfoNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBattleInfoNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattleInfoNtf.displayName = 'proto.MsgBattleInfoNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattleInfoNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattleInfoNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattleInfoNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattleInfoNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    battleinfobean: (f = msg.getBattleinfobean()) && proto.MsgBattleInfoBean.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattleInfoNtf}
 */
proto.MsgBattleInfoNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattleInfoNtf;
  return proto.MsgBattleInfoNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattleInfoNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattleInfoNtf}
 */
proto.MsgBattleInfoNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.MsgBattleInfoBean;
      reader.readMessage(value,proto.MsgBattleInfoBean.deserializeBinaryFromReader);
      msg.setBattleinfobean(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattleInfoNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattleInfoNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattleInfoNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattleInfoNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBattleinfobean();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MsgBattleInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBattleInfoNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattleInfoNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattleInfoNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattleInfoNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required MsgBattleInfoBean battleInfoBean = 2;
 * @return {!proto.MsgBattleInfoBean}
 */
proto.MsgBattleInfoNtf.prototype.getBattleinfobean = function() {
  return /** @type{!proto.MsgBattleInfoBean} */ (
    jspb.Message.getWrapperField(this, proto.MsgBattleInfoBean, 2, 1));
};


/** @param {!proto.MsgBattleInfoBean} value */
proto.MsgBattleInfoNtf.prototype.setBattleinfobean = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MsgBattleInfoNtf.prototype.clearBattleinfobean = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattleInfoNtf.prototype.hasBattleinfobean = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgObjectInfoNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgObjectInfoNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgObjectInfoNtf.displayName = 'proto.MsgObjectInfoNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgObjectInfoNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgObjectInfoNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgObjectInfoNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgObjectInfoNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    objectinfobean: (f = msg.getObjectinfobean()) && proto.MsgObjectInfoBean.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgObjectInfoNtf}
 */
proto.MsgObjectInfoNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgObjectInfoNtf;
  return proto.MsgObjectInfoNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgObjectInfoNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgObjectInfoNtf}
 */
proto.MsgObjectInfoNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.MsgObjectInfoBean;
      reader.readMessage(value,proto.MsgObjectInfoBean.deserializeBinaryFromReader);
      msg.setObjectinfobean(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgObjectInfoNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgObjectInfoNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgObjectInfoNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgObjectInfoNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getObjectinfobean();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MsgObjectInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgObjectInfoNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgObjectInfoNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgObjectInfoNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgObjectInfoNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required MsgObjectInfoBean objectInfoBean = 2;
 * @return {!proto.MsgObjectInfoBean}
 */
proto.MsgObjectInfoNtf.prototype.getObjectinfobean = function() {
  return /** @type{!proto.MsgObjectInfoBean} */ (
    jspb.Message.getWrapperField(this, proto.MsgObjectInfoBean, 2, 1));
};


/** @param {!proto.MsgObjectInfoBean} value */
proto.MsgObjectInfoNtf.prototype.setObjectinfobean = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MsgObjectInfoNtf.prototype.clearObjectinfobean = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgObjectInfoNtf.prototype.hasObjectinfobean = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJumpInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJumpInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJumpInfoReq.displayName = 'proto.MsgJumpInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJumpInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJumpInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJumpInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    time: +jspb.Message.getField(msg, 2),
    type: jspb.Message.getField(msg, 3),
    srcx: +jspb.Message.getField(msg, 4),
    srcy: +jspb.Message.getField(msg, 5),
    srcz: +jspb.Message.getField(msg, 6),
    endx: +jspb.Message.getField(msg, 7),
    endy: +jspb.Message.getField(msg, 8),
    endz: +jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJumpInfoReq}
 */
proto.MsgJumpInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJumpInfoReq;
  return proto.MsgJumpInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJumpInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJumpInfoReq}
 */
proto.MsgJumpInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSrcx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSrcy(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSrcz(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEndx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEndy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEndz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJumpInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJumpInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJumpInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgJumpInfoReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJumpInfoReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJumpInfoReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float time = 2;
 * @return {number}
 */
proto.MsgJumpInfoReq.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoReq.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJumpInfoReq.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoReq.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 type = 3;
 * @return {number}
 */
proto.MsgJumpInfoReq.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgJumpInfoReq.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgJumpInfoReq.prototype.clearType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoReq.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float srcx = 4;
 * @return {number}
 */
proto.MsgJumpInfoReq.prototype.getSrcx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoReq.prototype.setSrcx = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgJumpInfoReq.prototype.clearSrcx = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoReq.prototype.hasSrcx = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required float srcy = 5;
 * @return {number}
 */
proto.MsgJumpInfoReq.prototype.getSrcy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoReq.prototype.setSrcy = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgJumpInfoReq.prototype.clearSrcy = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoReq.prototype.hasSrcy = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required float srcz = 6;
 * @return {number}
 */
proto.MsgJumpInfoReq.prototype.getSrcz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoReq.prototype.setSrcz = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgJumpInfoReq.prototype.clearSrcz = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoReq.prototype.hasSrcz = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required float endx = 7;
 * @return {number}
 */
proto.MsgJumpInfoReq.prototype.getEndx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoReq.prototype.setEndx = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgJumpInfoReq.prototype.clearEndx = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoReq.prototype.hasEndx = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required float endy = 8;
 * @return {number}
 */
proto.MsgJumpInfoReq.prototype.getEndy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoReq.prototype.setEndy = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgJumpInfoReq.prototype.clearEndy = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoReq.prototype.hasEndy = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required float endz = 9;
 * @return {number}
 */
proto.MsgJumpInfoReq.prototype.getEndz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoReq.prototype.setEndz = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.MsgJumpInfoReq.prototype.clearEndz = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoReq.prototype.hasEndz = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJumpInfoNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJumpInfoNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJumpInfoNtf.displayName = 'proto.MsgJumpInfoNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJumpInfoNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJumpInfoNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJumpInfoNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpInfoNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    time: +jspb.Message.getField(msg, 2),
    type: jspb.Message.getField(msg, 3),
    srcx: +jspb.Message.getField(msg, 4),
    srcy: +jspb.Message.getField(msg, 5),
    srcz: +jspb.Message.getField(msg, 6),
    endx: +jspb.Message.getField(msg, 7),
    endy: +jspb.Message.getField(msg, 8),
    endz: +jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJumpInfoNtf}
 */
proto.MsgJumpInfoNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJumpInfoNtf;
  return proto.MsgJumpInfoNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJumpInfoNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJumpInfoNtf}
 */
proto.MsgJumpInfoNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSrcx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSrcy(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSrcz(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEndx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEndy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEndz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJumpInfoNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJumpInfoNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJumpInfoNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpInfoNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgJumpInfoNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJumpInfoNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJumpInfoNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float time = 2;
 * @return {number}
 */
proto.MsgJumpInfoNtf.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJumpInfoNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 type = 3;
 * @return {number}
 */
proto.MsgJumpInfoNtf.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgJumpInfoNtf.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgJumpInfoNtf.prototype.clearType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoNtf.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float srcx = 4;
 * @return {number}
 */
proto.MsgJumpInfoNtf.prototype.getSrcx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoNtf.prototype.setSrcx = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgJumpInfoNtf.prototype.clearSrcx = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoNtf.prototype.hasSrcx = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required float srcy = 5;
 * @return {number}
 */
proto.MsgJumpInfoNtf.prototype.getSrcy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoNtf.prototype.setSrcy = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgJumpInfoNtf.prototype.clearSrcy = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoNtf.prototype.hasSrcy = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required float srcz = 6;
 * @return {number}
 */
proto.MsgJumpInfoNtf.prototype.getSrcz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoNtf.prototype.setSrcz = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgJumpInfoNtf.prototype.clearSrcz = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoNtf.prototype.hasSrcz = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required float endx = 7;
 * @return {number}
 */
proto.MsgJumpInfoNtf.prototype.getEndx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoNtf.prototype.setEndx = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgJumpInfoNtf.prototype.clearEndx = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoNtf.prototype.hasEndx = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required float endy = 8;
 * @return {number}
 */
proto.MsgJumpInfoNtf.prototype.getEndy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoNtf.prototype.setEndy = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgJumpInfoNtf.prototype.clearEndy = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoNtf.prototype.hasEndy = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required float endz = 9;
 * @return {number}
 */
proto.MsgJumpInfoNtf.prototype.getEndz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.MsgJumpInfoNtf.prototype.setEndz = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.MsgJumpInfoNtf.prototype.clearEndz = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpInfoNtf.prototype.hasEndz = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFlashBackReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgFlashBackReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFlashBackReq.displayName = 'proto.MsgFlashBackReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFlashBackReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFlashBackReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFlashBackReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlashBackReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    time: +jspb.Message.getField(msg, 2),
    x: +jspb.Message.getField(msg, 3),
    y: +jspb.Message.getField(msg, 4),
    z: +jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFlashBackReq}
 */
proto.MsgFlashBackReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFlashBackReq;
  return proto.MsgFlashBackReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFlashBackReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFlashBackReq}
 */
proto.MsgFlashBackReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFlashBackReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFlashBackReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFlashBackReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlashBackReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgFlashBackReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgFlashBackReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgFlashBackReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlashBackReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float time = 2;
 * @return {number}
 */
proto.MsgFlashBackReq.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MsgFlashBackReq.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgFlashBackReq.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlashBackReq.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float x = 3;
 * @return {number}
 */
proto.MsgFlashBackReq.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.MsgFlashBackReq.prototype.setX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgFlashBackReq.prototype.clearX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlashBackReq.prototype.hasX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float y = 4;
 * @return {number}
 */
proto.MsgFlashBackReq.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.MsgFlashBackReq.prototype.setY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgFlashBackReq.prototype.clearY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlashBackReq.prototype.hasY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required float z = 5;
 * @return {number}
 */
proto.MsgFlashBackReq.prototype.getZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.MsgFlashBackReq.prototype.setZ = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgFlashBackReq.prototype.clearZ = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlashBackReq.prototype.hasZ = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFlashBackNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgFlashBackNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFlashBackNtf.displayName = 'proto.MsgFlashBackNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFlashBackNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFlashBackNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFlashBackNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlashBackNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    time: +jspb.Message.getField(msg, 2),
    x: +jspb.Message.getField(msg, 3),
    y: +jspb.Message.getField(msg, 4),
    z: +jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFlashBackNtf}
 */
proto.MsgFlashBackNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFlashBackNtf;
  return proto.MsgFlashBackNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFlashBackNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFlashBackNtf}
 */
proto.MsgFlashBackNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFlashBackNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFlashBackNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFlashBackNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlashBackNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgFlashBackNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgFlashBackNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgFlashBackNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlashBackNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float time = 2;
 * @return {number}
 */
proto.MsgFlashBackNtf.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MsgFlashBackNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgFlashBackNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlashBackNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float x = 3;
 * @return {number}
 */
proto.MsgFlashBackNtf.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.MsgFlashBackNtf.prototype.setX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgFlashBackNtf.prototype.clearX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlashBackNtf.prototype.hasX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float y = 4;
 * @return {number}
 */
proto.MsgFlashBackNtf.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.MsgFlashBackNtf.prototype.setY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgFlashBackNtf.prototype.clearY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlashBackNtf.prototype.hasY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required float z = 5;
 * @return {number}
 */
proto.MsgFlashBackNtf.prototype.getZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.MsgFlashBackNtf.prototype.setZ = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgFlashBackNtf.prototype.clearZ = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlashBackNtf.prototype.hasZ = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJumpRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJumpRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJumpRecoveryNtf.displayName = 'proto.MsgJumpRecoveryNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJumpRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJumpRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJumpRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    redScore: jspb.Message.getField(msg, 1),
    blueScore: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJumpRecoveryNtf}
 */
proto.MsgJumpRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJumpRecoveryNtf;
  return proto.MsgJumpRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJumpRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJumpRecoveryNtf}
 */
proto.MsgJumpRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedScore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJumpRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJumpRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJumpRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJumpRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 red_score = 1;
 * @return {number}
 */
proto.MsgJumpRecoveryNtf.prototype.getRedScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJumpRecoveryNtf.prototype.setRedScore = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJumpRecoveryNtf.prototype.clearRedScore = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpRecoveryNtf.prototype.hasRedScore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 blue_score = 2;
 * @return {number}
 */
proto.MsgJumpRecoveryNtf.prototype.getBlueScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgJumpRecoveryNtf.prototype.setBlueScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJumpRecoveryNtf.prototype.clearBlueScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJumpRecoveryNtf.prototype.hasBlueScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGobangStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGobangStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGobangStartNtf.displayName = 'proto.MsgGobangStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGobangStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGobangStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGobangStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGobangStartNtf}
 */
proto.MsgGobangStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGobangStartNtf;
  return proto.MsgGobangStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGobangStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGobangStartNtf}
 */
proto.MsgGobangStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGobangStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGobangStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGobangStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGobangStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGobangStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGobangStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgGobangStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGobangStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGobangStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgGobangStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGobangStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGobangStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGobangPlayReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGobangPlayReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGobangPlayReq.displayName = 'proto.MsgGobangPlayReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGobangPlayReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGobangPlayReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGobangPlayReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangPlayReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGobangPlayReq}
 */
proto.MsgGobangPlayReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGobangPlayReq;
  return proto.MsgGobangPlayReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGobangPlayReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGobangPlayReq}
 */
proto.MsgGobangPlayReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGobangPlayReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGobangPlayReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGobangPlayReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangPlayReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.MsgGobangPlayReq.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGobangPlayReq.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGobangPlayReq.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangPlayReq.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.MsgGobangPlayReq.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGobangPlayReq.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGobangPlayReq.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangPlayReq.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGobangPlayRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGobangPlayRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGobangPlayRep.displayName = 'proto.MsgGobangPlayRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGobangPlayRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGobangPlayRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGobangPlayRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangPlayRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGobangPlayRep}
 */
proto.MsgGobangPlayRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGobangPlayRep;
  return proto.MsgGobangPlayRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGobangPlayRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGobangPlayRep}
 */
proto.MsgGobangPlayRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGobangPlayRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGobangPlayRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGobangPlayRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangPlayRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgGobangPlayRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGobangPlayRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGobangPlayRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangPlayRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGobangPlayNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGobangPlayNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGobangPlayNtf.displayName = 'proto.MsgGobangPlayNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGobangPlayNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGobangPlayNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGobangPlayNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangPlayNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2),
    next: jspb.Message.getField(msg, 3),
    time: jspb.Message.getField(msg, 4),
    gridType: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGobangPlayNtf}
 */
proto.MsgGobangPlayNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGobangPlayNtf;
  return proto.MsgGobangPlayNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGobangPlayNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGobangPlayNtf}
 */
proto.MsgGobangPlayNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGridType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGobangPlayNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGobangPlayNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGobangPlayNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangPlayNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.MsgGobangPlayNtf.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGobangPlayNtf.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGobangPlayNtf.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangPlayNtf.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.MsgGobangPlayNtf.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGobangPlayNtf.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGobangPlayNtf.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangPlayNtf.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 next = 3;
 * @return {number}
 */
proto.MsgGobangPlayNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGobangPlayNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGobangPlayNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangPlayNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 time = 4;
 * @return {number}
 */
proto.MsgGobangPlayNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgGobangPlayNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgGobangPlayNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangPlayNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 grid_type = 5;
 * @return {number}
 */
proto.MsgGobangPlayNtf.prototype.getGridType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgGobangPlayNtf.prototype.setGridType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgGobangPlayNtf.prototype.clearGridType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangPlayNtf.prototype.hasGridType = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGobangBackNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgGobangBackNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgGobangBackNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGobangBackNtf.displayName = 'proto.MsgGobangBackNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgGobangBackNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGobangBackNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGobangBackNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGobangBackNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangBackNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    backList: jspb.Message.toObjectList(msg.getBackList(),
    common_pb.PointInfo.toObject, includeInstance),
    next: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3),
    lastX: jspb.Message.getField(msg, 4),
    lastY: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGobangBackNtf}
 */
proto.MsgGobangBackNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGobangBackNtf;
  return proto.MsgGobangBackNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGobangBackNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGobangBackNtf}
 */
proto.MsgGobangBackNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.PointInfo;
      reader.readMessage(value,common_pb.PointInfo.deserializeBinaryFromReader);
      msg.addBack(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGobangBackNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGobangBackNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGobangBackNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangBackNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBackList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.PointInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * repeated PointInfo back = 1;
 * @return {!Array<!proto.PointInfo>}
 */
proto.MsgGobangBackNtf.prototype.getBackList = function() {
  return /** @type{!Array<!proto.PointInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.PointInfo, 1));
};


/** @param {!Array<!proto.PointInfo>} value */
proto.MsgGobangBackNtf.prototype.setBackList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PointInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PointInfo}
 */
proto.MsgGobangBackNtf.prototype.addBack = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PointInfo, opt_index);
};


proto.MsgGobangBackNtf.prototype.clearBackList = function() {
  this.setBackList([]);
};


/**
 * required uint32 next = 2;
 * @return {number}
 */
proto.MsgGobangBackNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGobangBackNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGobangBackNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangBackNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgGobangBackNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGobangBackNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGobangBackNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangBackNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 last_x = 4;
 * @return {number}
 */
proto.MsgGobangBackNtf.prototype.getLastX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgGobangBackNtf.prototype.setLastX = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgGobangBackNtf.prototype.clearLastX = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangBackNtf.prototype.hasLastX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 last_y = 5;
 * @return {number}
 */
proto.MsgGobangBackNtf.prototype.getLastY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgGobangBackNtf.prototype.setLastY = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgGobangBackNtf.prototype.clearLastY = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangBackNtf.prototype.hasLastY = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGobangResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGobangResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGobangResultNtf.displayName = 'proto.MsgGobangResultNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGobangResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGobangResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGobangResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGobangResultNtf}
 */
proto.MsgGobangResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGobangResultNtf;
  return proto.MsgGobangResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGobangResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGobangResultNtf}
 */
proto.MsgGobangResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGobangResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGobangResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGobangResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgGobangResultNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGobangResultNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGobangResultNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangResultNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgGobangResultNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGobangResultNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGobangResultNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangResultNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGobangInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGobangInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGobangInfo.displayName = 'proto.MsgGobangInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGobangInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGobangInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGobangInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2),
    gridType: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGobangInfo}
 */
proto.MsgGobangInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGobangInfo;
  return proto.MsgGobangInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGobangInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGobangInfo}
 */
proto.MsgGobangInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGridType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGobangInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGobangInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGobangInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.MsgGobangInfo.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGobangInfo.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGobangInfo.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangInfo.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.MsgGobangInfo.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGobangInfo.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGobangInfo.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangInfo.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 grid_type = 3;
 * @return {number}
 */
proto.MsgGobangInfo.prototype.getGridType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGobangInfo.prototype.setGridType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGobangInfo.prototype.clearGridType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangInfo.prototype.hasGridType = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGobangRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgGobangRecoveryNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgGobangRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGobangRecoveryNtf.displayName = 'proto.MsgGobangRecoveryNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgGobangRecoveryNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGobangRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGobangRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGobangRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.MsgGobangInfo.toObject, includeInstance),
    next: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3),
    lastX: jspb.Message.getField(msg, 4),
    lastY: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGobangRecoveryNtf}
 */
proto.MsgGobangRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGobangRecoveryNtf;
  return proto.MsgGobangRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGobangRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGobangRecoveryNtf}
 */
proto.MsgGobangRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgGobangInfo;
      reader.readMessage(value,proto.MsgGobangInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGobangRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGobangRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGobangRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGobangRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MsgGobangInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * repeated MsgGobangInfo info = 1;
 * @return {!Array<!proto.MsgGobangInfo>}
 */
proto.MsgGobangRecoveryNtf.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.MsgGobangInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgGobangInfo, 1));
};


/** @param {!Array<!proto.MsgGobangInfo>} value */
proto.MsgGobangRecoveryNtf.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MsgGobangInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgGobangInfo}
 */
proto.MsgGobangRecoveryNtf.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MsgGobangInfo, opt_index);
};


proto.MsgGobangRecoveryNtf.prototype.clearInfoList = function() {
  this.setInfoList([]);
};


/**
 * required uint32 next = 2;
 * @return {number}
 */
proto.MsgGobangRecoveryNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGobangRecoveryNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGobangRecoveryNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangRecoveryNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgGobangRecoveryNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGobangRecoveryNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGobangRecoveryNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangRecoveryNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 last_x = 4;
 * @return {number}
 */
proto.MsgGobangRecoveryNtf.prototype.getLastX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgGobangRecoveryNtf.prototype.setLastX = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgGobangRecoveryNtf.prototype.clearLastX = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangRecoveryNtf.prototype.hasLastX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 last_y = 5;
 * @return {number}
 */
proto.MsgGobangRecoveryNtf.prototype.getLastY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgGobangRecoveryNtf.prototype.setLastY = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgGobangRecoveryNtf.prototype.clearLastY = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGobangRecoveryNtf.prototype.hasLastY = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgPositionDataBean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgPositionDataBean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgPositionDataBean.displayName = 'proto.MsgPositionDataBean';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgPositionDataBean.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgPositionDataBean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgPositionDataBean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPositionDataBean.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2),
    angle: jspb.Message.getField(msg, 3),
    x: jspb.Message.getField(msg, 4),
    z: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgPositionDataBean}
 */
proto.MsgPositionDataBean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgPositionDataBean;
  return proto.MsgPositionDataBean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgPositionDataBean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgPositionDataBean}
 */
proto.MsgPositionDataBean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAngle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgPositionDataBean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgPositionDataBean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgPositionDataBean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPositionDataBean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required uint32 userId = 1;
 * @return {number}
 */
proto.MsgPositionDataBean.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgPositionDataBean.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgPositionDataBean.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPositionDataBean.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 score = 2;
 * @return {number}
 */
proto.MsgPositionDataBean.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgPositionDataBean.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgPositionDataBean.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPositionDataBean.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 angle = 3;
 * @return {number}
 */
proto.MsgPositionDataBean.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgPositionDataBean.prototype.setAngle = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgPositionDataBean.prototype.clearAngle = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPositionDataBean.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 x = 4;
 * @return {number}
 */
proto.MsgPositionDataBean.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgPositionDataBean.prototype.setX = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgPositionDataBean.prototype.clearX = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPositionDataBean.prototype.hasX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 z = 5;
 * @return {number}
 */
proto.MsgPositionDataBean.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgPositionDataBean.prototype.setZ = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgPositionDataBean.prototype.clearZ = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPositionDataBean.prototype.hasZ = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGameStartDataBean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGameStartDataBean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGameStartDataBean.displayName = 'proto.MsgGameStartDataBean';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGameStartDataBean.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGameStartDataBean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGameStartDataBean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGameStartDataBean.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    score: jspb.Message.getField(msg, 3),
    generatenode: jspb.Message.getField(msg, 4),
    randnode: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGameStartDataBean}
 */
proto.MsgGameStartDataBean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGameStartDataBean;
  return proto.MsgGameStartDataBean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGameStartDataBean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGameStartDataBean}
 */
proto.MsgGameStartDataBean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGeneratenode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRandnode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGameStartDataBean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGameStartDataBean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGameStartDataBean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGameStartDataBean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required uint32 userId = 1;
 * @return {number}
 */
proto.MsgGameStartDataBean.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGameStartDataBean.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGameStartDataBean.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGameStartDataBean.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.MsgGameStartDataBean.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgGameStartDataBean.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGameStartDataBean.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGameStartDataBean.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 score = 3;
 * @return {number}
 */
proto.MsgGameStartDataBean.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGameStartDataBean.prototype.setScore = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGameStartDataBean.prototype.clearScore = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGameStartDataBean.prototype.hasScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 generateNode = 4;
 * @return {number}
 */
proto.MsgGameStartDataBean.prototype.getGeneratenode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgGameStartDataBean.prototype.setGeneratenode = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgGameStartDataBean.prototype.clearGeneratenode = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGameStartDataBean.prototype.hasGeneratenode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 randNode = 5;
 * @return {number}
 */
proto.MsgGameStartDataBean.prototype.getRandnode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgGameStartDataBean.prototype.setRandnode = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgGameStartDataBean.prototype.clearRandnode = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGameStartDataBean.prototype.hasRandnode = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBlackHoleStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBlackHoleStartNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgBlackHoleStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBlackHoleStartNtf.displayName = 'proto.MsgBlackHoleStartNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBlackHoleStartNtf.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBlackHoleStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBlackHoleStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBlackHoleStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBlackHoleStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getField(msg, 1),
    port: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3),
    scene: jspb.Message.getField(msg, 4),
    session: jspb.Message.getField(msg, 5),
    gamestartdataList: jspb.Message.toObjectList(msg.getGamestartdataList(),
    proto.MsgGameStartDataBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBlackHoleStartNtf}
 */
proto.MsgBlackHoleStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBlackHoleStartNtf;
  return proto.MsgBlackHoleStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBlackHoleStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBlackHoleStartNtf}
 */
proto.MsgBlackHoleStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScene(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSession(value);
      break;
    case 6:
      var value = new proto.MsgGameStartDataBean;
      reader.readMessage(value,proto.MsgGameStartDataBean.deserializeBinaryFromReader);
      msg.addGamestartdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBlackHoleStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBlackHoleStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBlackHoleStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBlackHoleStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getGamestartdataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.MsgGameStartDataBean.serializeBinaryToWriter
    );
  }
};


/**
 * required string ip = 1;
 * @return {string}
 */
proto.MsgBlackHoleStartNtf.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MsgBlackHoleStartNtf.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBlackHoleStartNtf.prototype.clearIp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBlackHoleStartNtf.prototype.hasIp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 port = 2;
 * @return {number}
 */
proto.MsgBlackHoleStartNtf.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBlackHoleStartNtf.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBlackHoleStartNtf.prototype.clearPort = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBlackHoleStartNtf.prototype.hasPort = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgBlackHoleStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgBlackHoleStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBlackHoleStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBlackHoleStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 scene = 4;
 * @return {number}
 */
proto.MsgBlackHoleStartNtf.prototype.getScene = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgBlackHoleStartNtf.prototype.setScene = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgBlackHoleStartNtf.prototype.clearScene = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBlackHoleStartNtf.prototype.hasScene = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 session = 5;
 * @return {number}
 */
proto.MsgBlackHoleStartNtf.prototype.getSession = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgBlackHoleStartNtf.prototype.setSession = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgBlackHoleStartNtf.prototype.clearSession = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBlackHoleStartNtf.prototype.hasSession = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated MsgGameStartDataBean gameStartData = 6;
 * @return {!Array<!proto.MsgGameStartDataBean>}
 */
proto.MsgBlackHoleStartNtf.prototype.getGamestartdataList = function() {
  return /** @type{!Array<!proto.MsgGameStartDataBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgGameStartDataBean, 6));
};


/** @param {!Array<!proto.MsgGameStartDataBean>} value */
proto.MsgBlackHoleStartNtf.prototype.setGamestartdataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.MsgGameStartDataBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgGameStartDataBean}
 */
proto.MsgBlackHoleStartNtf.prototype.addGamestartdata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.MsgGameStartDataBean, opt_index);
};


proto.MsgBlackHoleStartNtf.prototype.clearGamestartdataList = function() {
  this.setGamestartdataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBlackHoleResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBlackHoleResultNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgBlackHoleResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBlackHoleResultNtf.displayName = 'proto.MsgBlackHoleResultNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBlackHoleResultNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBlackHoleResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBlackHoleResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBlackHoleResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBlackHoleResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    rankInfoList: jspb.Message.toObjectList(msg.getRankInfoList(),
    common_pb.PkPlayerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBlackHoleResultNtf}
 */
proto.MsgBlackHoleResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBlackHoleResultNtf;
  return proto.MsgBlackHoleResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBlackHoleResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBlackHoleResultNtf}
 */
proto.MsgBlackHoleResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.PkPlayerInfo;
      reader.readMessage(value,common_pb.PkPlayerInfo.deserializeBinaryFromReader);
      msg.addRankInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBlackHoleResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBlackHoleResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBlackHoleResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBlackHoleResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRankInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.PkPlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PkPlayerInfo rank_info = 1;
 * @return {!Array<!proto.PkPlayerInfo>}
 */
proto.MsgBlackHoleResultNtf.prototype.getRankInfoList = function() {
  return /** @type{!Array<!proto.PkPlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.PkPlayerInfo, 1));
};


/** @param {!Array<!proto.PkPlayerInfo>} value */
proto.MsgBlackHoleResultNtf.prototype.setRankInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PkPlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PkPlayerInfo}
 */
proto.MsgBlackHoleResultNtf.prototype.addRankInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PkPlayerInfo, opt_index);
};


proto.MsgBlackHoleResultNtf.prototype.clearRankInfoList = function() {
  this.setRankInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgPositionDataReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgPositionDataReq.repeatedFields_, null);
};
goog.inherits(proto.MsgPositionDataReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgPositionDataReq.displayName = 'proto.MsgPositionDataReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgPositionDataReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgPositionDataReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgPositionDataReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgPositionDataReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPositionDataReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    positiondataList: jspb.Message.toObjectList(msg.getPositiondataList(),
    proto.MsgPositionDataBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgPositionDataReq}
 */
proto.MsgPositionDataReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgPositionDataReq;
  return proto.MsgPositionDataReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgPositionDataReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgPositionDataReq}
 */
proto.MsgPositionDataReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgPositionDataBean;
      reader.readMessage(value,proto.MsgPositionDataBean.deserializeBinaryFromReader);
      msg.addPositiondata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgPositionDataReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgPositionDataReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgPositionDataReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPositionDataReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositiondataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MsgPositionDataBean.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MsgPositionDataBean positionData = 1;
 * @return {!Array<!proto.MsgPositionDataBean>}
 */
proto.MsgPositionDataReq.prototype.getPositiondataList = function() {
  return /** @type{!Array<!proto.MsgPositionDataBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgPositionDataBean, 1));
};


/** @param {!Array<!proto.MsgPositionDataBean>} value */
proto.MsgPositionDataReq.prototype.setPositiondataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MsgPositionDataBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgPositionDataBean}
 */
proto.MsgPositionDataReq.prototype.addPositiondata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MsgPositionDataBean, opt_index);
};


proto.MsgPositionDataReq.prototype.clearPositiondataList = function() {
  this.setPositiondataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgPositionDataNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgPositionDataNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgPositionDataNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgPositionDataNtf.displayName = 'proto.MsgPositionDataNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgPositionDataNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgPositionDataNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgPositionDataNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgPositionDataNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPositionDataNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    positiondataList: jspb.Message.toObjectList(msg.getPositiondataList(),
    proto.MsgPositionDataBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgPositionDataNtf}
 */
proto.MsgPositionDataNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgPositionDataNtf;
  return proto.MsgPositionDataNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgPositionDataNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgPositionDataNtf}
 */
proto.MsgPositionDataNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgPositionDataBean;
      reader.readMessage(value,proto.MsgPositionDataBean.deserializeBinaryFromReader);
      msg.addPositiondata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgPositionDataNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgPositionDataNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgPositionDataNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPositionDataNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositiondataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MsgPositionDataBean.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MsgPositionDataBean positionData = 1;
 * @return {!Array<!proto.MsgPositionDataBean>}
 */
proto.MsgPositionDataNtf.prototype.getPositiondataList = function() {
  return /** @type{!Array<!proto.MsgPositionDataBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgPositionDataBean, 1));
};


/** @param {!Array<!proto.MsgPositionDataBean>} value */
proto.MsgPositionDataNtf.prototype.setPositiondataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MsgPositionDataBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgPositionDataBean}
 */
proto.MsgPositionDataNtf.prototype.addPositiondata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MsgPositionDataBean, opt_index);
};


proto.MsgPositionDataNtf.prototype.clearPositiondataList = function() {
  this.setPositiondataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgHoleAttackPlayerReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgHoleAttackPlayerReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgHoleAttackPlayerReq.displayName = 'proto.MsgHoleAttackPlayerReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgHoleAttackPlayerReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgHoleAttackPlayerReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgHoleAttackPlayerReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgHoleAttackPlayerReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid1: jspb.Message.getField(msg, 1),
    uid2: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgHoleAttackPlayerReq}
 */
proto.MsgHoleAttackPlayerReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgHoleAttackPlayerReq;
  return proto.MsgHoleAttackPlayerReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgHoleAttackPlayerReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgHoleAttackPlayerReq}
 */
proto.MsgHoleAttackPlayerReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgHoleAttackPlayerReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgHoleAttackPlayerReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgHoleAttackPlayerReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgHoleAttackPlayerReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid1 = 1;
 * @return {number}
 */
proto.MsgHoleAttackPlayerReq.prototype.getUid1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgHoleAttackPlayerReq.prototype.setUid1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgHoleAttackPlayerReq.prototype.clearUid1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgHoleAttackPlayerReq.prototype.hasUid1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid2 = 2;
 * @return {number}
 */
proto.MsgHoleAttackPlayerReq.prototype.getUid2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgHoleAttackPlayerReq.prototype.setUid2 = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgHoleAttackPlayerReq.prototype.clearUid2 = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgHoleAttackPlayerReq.prototype.hasUid2 = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgHoleAttackPlayerNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgHoleAttackPlayerNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgHoleAttackPlayerNtf.displayName = 'proto.MsgHoleAttackPlayerNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgHoleAttackPlayerNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgHoleAttackPlayerNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgHoleAttackPlayerNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgHoleAttackPlayerNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid1: jspb.Message.getField(msg, 1),
    uid2: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgHoleAttackPlayerNtf}
 */
proto.MsgHoleAttackPlayerNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgHoleAttackPlayerNtf;
  return proto.MsgHoleAttackPlayerNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgHoleAttackPlayerNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgHoleAttackPlayerNtf}
 */
proto.MsgHoleAttackPlayerNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgHoleAttackPlayerNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgHoleAttackPlayerNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgHoleAttackPlayerNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgHoleAttackPlayerNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid1 = 1;
 * @return {number}
 */
proto.MsgHoleAttackPlayerNtf.prototype.getUid1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgHoleAttackPlayerNtf.prototype.setUid1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgHoleAttackPlayerNtf.prototype.clearUid1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgHoleAttackPlayerNtf.prototype.hasUid1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid2 = 2;
 * @return {number}
 */
proto.MsgHoleAttackPlayerNtf.prototype.getUid2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgHoleAttackPlayerNtf.prototype.setUid2 = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgHoleAttackPlayerNtf.prototype.clearUid2 = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgHoleAttackPlayerNtf.prototype.hasUid2 = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgHoleGetInfoRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgHoleGetInfoRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgHoleGetInfoRep.displayName = 'proto.MsgHoleGetInfoRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgHoleGetInfoRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgHoleGetInfoRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgHoleGetInfoRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgHoleGetInfoRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgHoleGetInfoRep}
 */
proto.MsgHoleGetInfoRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgHoleGetInfoRep;
  return proto.MsgHoleGetInfoRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgHoleGetInfoRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgHoleGetInfoRep}
 */
proto.MsgHoleGetInfoRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgHoleGetInfoRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgHoleGetInfoRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgHoleGetInfoRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgHoleGetInfoRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 time = 1;
 * @return {number}
 */
proto.MsgHoleGetInfoRep.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgHoleGetInfoRep.prototype.setTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgHoleGetInfoRep.prototype.clearTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgHoleGetInfoRep.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLudoPkInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLudoPkInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLudoPkInfo.displayName = 'proto.MsgLudoPkInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLudoPkInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLudoPkInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLudoPkInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoPkInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLudoPkInfo}
 */
proto.MsgLudoPkInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLudoPkInfo;
  return proto.MsgLudoPkInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLudoPkInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLudoPkInfo}
 */
proto.MsgLudoPkInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLudoPkInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLudoPkInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLudoPkInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoPkInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgLudoPkInfo.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLudoPkInfo.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLudoPkInfo.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoPkInfo.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgLudoPkInfo.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLudoPkInfo.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLudoPkInfo.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoPkInfo.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLudoStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgLudoStartNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgLudoStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLudoStartNtf.displayName = 'proto.MsgLudoStartNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgLudoStartNtf.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLudoStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLudoStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLudoStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getField(msg, 1),
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.MsgLudoPkInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLudoStartNtf}
 */
proto.MsgLudoStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLudoStartNtf;
  return proto.MsgLudoStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLudoStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLudoStartNtf}
 */
proto.MsgLudoStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.MsgLudoPkInfo;
      reader.readMessage(value,proto.MsgLudoPkInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLudoStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLudoStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLudoStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgLudoPkInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 time = 1;
 * @return {number}
 */
proto.MsgLudoStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLudoStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLudoStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated MsgLudoPkInfo info = 2;
 * @return {!Array<!proto.MsgLudoPkInfo>}
 */
proto.MsgLudoStartNtf.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.MsgLudoPkInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgLudoPkInfo, 2));
};


/** @param {!Array<!proto.MsgLudoPkInfo>} value */
proto.MsgLudoStartNtf.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgLudoPkInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgLudoPkInfo}
 */
proto.MsgLudoStartNtf.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgLudoPkInfo, opt_index);
};


proto.MsgLudoStartNtf.prototype.clearInfoList = function() {
  this.setInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLudoRollDiceRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLudoRollDiceRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLudoRollDiceRep.displayName = 'proto.MsgLudoRollDiceRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLudoRollDiceRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLudoRollDiceRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLudoRollDiceRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoRollDiceRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLudoRollDiceRep}
 */
proto.MsgLudoRollDiceRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLudoRollDiceRep;
  return proto.MsgLudoRollDiceRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLudoRollDiceRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLudoRollDiceRep}
 */
proto.MsgLudoRollDiceRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLudoRollDiceRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLudoRollDiceRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLudoRollDiceRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoRollDiceRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgLudoRollDiceRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLudoRollDiceRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLudoRollDiceRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoRollDiceRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLudoRollDiceNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLudoRollDiceNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLudoRollDiceNtf.displayName = 'proto.MsgLudoRollDiceNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLudoRollDiceNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLudoRollDiceNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLudoRollDiceNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoRollDiceNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getField(msg, 1),
    action: jspb.Message.getField(msg, 2),
    next: jspb.Message.getField(msg, 3),
    time: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLudoRollDiceNtf}
 */
proto.MsgLudoRollDiceNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLudoRollDiceNtf;
  return proto.MsgLudoRollDiceNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLudoRollDiceNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLudoRollDiceNtf}
 */
proto.MsgLudoRollDiceNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLudoRollDiceNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLudoRollDiceNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLudoRollDiceNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoRollDiceNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 value = 1;
 * @return {number}
 */
proto.MsgLudoRollDiceNtf.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLudoRollDiceNtf.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLudoRollDiceNtf.prototype.clearValue = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoRollDiceNtf.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 action = 2;
 * @return {number}
 */
proto.MsgLudoRollDiceNtf.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLudoRollDiceNtf.prototype.setAction = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLudoRollDiceNtf.prototype.clearAction = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoRollDiceNtf.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 next = 3;
 * @return {number}
 */
proto.MsgLudoRollDiceNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgLudoRollDiceNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgLudoRollDiceNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoRollDiceNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 time = 4;
 * @return {number}
 */
proto.MsgLudoRollDiceNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgLudoRollDiceNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgLudoRollDiceNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoRollDiceNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLudoFlyReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLudoFlyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLudoFlyReq.displayName = 'proto.MsgLudoFlyReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLudoFlyReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLudoFlyReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLudoFlyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoFlyReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    index: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLudoFlyReq}
 */
proto.MsgLudoFlyReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLudoFlyReq;
  return proto.MsgLudoFlyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLudoFlyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLudoFlyReq}
 */
proto.MsgLudoFlyReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLudoFlyReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLudoFlyReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLudoFlyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoFlyReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 type = 1;
 * @return {number}
 */
proto.MsgLudoFlyReq.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLudoFlyReq.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLudoFlyReq.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoFlyReq.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 index = 2;
 * @return {number}
 */
proto.MsgLudoFlyReq.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLudoFlyReq.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLudoFlyReq.prototype.clearIndex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoFlyReq.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLudoFlyRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLudoFlyRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLudoFlyRep.displayName = 'proto.MsgLudoFlyRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLudoFlyRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLudoFlyRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLudoFlyRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoFlyRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLudoFlyRep}
 */
proto.MsgLudoFlyRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLudoFlyRep;
  return proto.MsgLudoFlyRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLudoFlyRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLudoFlyRep}
 */
proto.MsgLudoFlyRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLudoFlyRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLudoFlyRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLudoFlyRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoFlyRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgLudoFlyRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLudoFlyRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLudoFlyRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoFlyRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLudoAttackInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLudoAttackInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLudoAttackInfo.displayName = 'proto.MsgLudoAttackInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLudoAttackInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLudoAttackInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLudoAttackInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoAttackInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    count: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLudoAttackInfo}
 */
proto.MsgLudoAttackInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLudoAttackInfo;
  return proto.MsgLudoAttackInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLudoAttackInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLudoAttackInfo}
 */
proto.MsgLudoAttackInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLudoAttackInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLudoAttackInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLudoAttackInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoAttackInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgLudoAttackInfo.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLudoAttackInfo.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLudoAttackInfo.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoAttackInfo.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 count = 2;
 * @return {number}
 */
proto.MsgLudoAttackInfo.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLudoAttackInfo.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLudoAttackInfo.prototype.clearCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoAttackInfo.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLudoFlyNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgLudoFlyNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgLudoFlyNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLudoFlyNtf.displayName = 'proto.MsgLudoFlyNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgLudoFlyNtf.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLudoFlyNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLudoFlyNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLudoFlyNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoFlyNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    next: jspb.Message.getField(msg, 1),
    time: jspb.Message.getField(msg, 2),
    complete: jspb.Message.getField(msg, 3),
    type: jspb.Message.getField(msg, 4),
    start: jspb.Message.getField(msg, 5),
    end: jspb.Message.getField(msg, 6),
    attackList: jspb.Message.toObjectList(msg.getAttackList(),
    proto.MsgLudoAttackInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLudoFlyNtf}
 */
proto.MsgLudoFlyNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLudoFlyNtf;
  return proto.MsgLudoFlyNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLudoFlyNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLudoFlyNtf}
 */
proto.MsgLudoFlyNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setComplete(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStart(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEnd(value);
      break;
    case 7:
      var value = new proto.MsgLudoAttackInfo;
      reader.readMessage(value,proto.MsgLudoAttackInfo.deserializeBinaryFromReader);
      msg.addAttack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLudoFlyNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLudoFlyNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLudoFlyNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoFlyNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getAttackList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.MsgLudoAttackInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 next = 1;
 * @return {number}
 */
proto.MsgLudoFlyNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLudoFlyNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLudoFlyNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoFlyNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 time = 2;
 * @return {number}
 */
proto.MsgLudoFlyNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLudoFlyNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLudoFlyNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoFlyNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 complete = 3;
 * @return {number}
 */
proto.MsgLudoFlyNtf.prototype.getComplete = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgLudoFlyNtf.prototype.setComplete = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgLudoFlyNtf.prototype.clearComplete = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoFlyNtf.prototype.hasComplete = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 type = 4;
 * @return {number}
 */
proto.MsgLudoFlyNtf.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgLudoFlyNtf.prototype.setType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgLudoFlyNtf.prototype.clearType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoFlyNtf.prototype.hasType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 start = 5;
 * @return {number}
 */
proto.MsgLudoFlyNtf.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgLudoFlyNtf.prototype.setStart = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgLudoFlyNtf.prototype.clearStart = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoFlyNtf.prototype.hasStart = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 end = 6;
 * @return {number}
 */
proto.MsgLudoFlyNtf.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgLudoFlyNtf.prototype.setEnd = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgLudoFlyNtf.prototype.clearEnd = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoFlyNtf.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated MsgLudoAttackInfo attack = 7;
 * @return {!Array<!proto.MsgLudoAttackInfo>}
 */
proto.MsgLudoFlyNtf.prototype.getAttackList = function() {
  return /** @type{!Array<!proto.MsgLudoAttackInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgLudoAttackInfo, 7));
};


/** @param {!Array<!proto.MsgLudoAttackInfo>} value */
proto.MsgLudoFlyNtf.prototype.setAttackList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.MsgLudoAttackInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgLudoAttackInfo}
 */
proto.MsgLudoFlyNtf.prototype.addAttack = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.MsgLudoAttackInfo, opt_index);
};


proto.MsgLudoFlyNtf.prototype.clearAttackList = function() {
  this.setAttackList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLudoResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLudoResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLudoResultNtf.displayName = 'proto.MsgLudoResultNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLudoResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLudoResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLudoResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLudoResultNtf}
 */
proto.MsgLudoResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLudoResultNtf;
  return proto.MsgLudoResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLudoResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLudoResultNtf}
 */
proto.MsgLudoResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLudoResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLudoResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLudoResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgLudoResultNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLudoResultNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLudoResultNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoResultNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgLudoResultNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLudoResultNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLudoResultNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoResultNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLudoPlaneInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgLudoPlaneInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLudoPlaneInfo.displayName = 'proto.MsgLudoPlaneInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLudoPlaneInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLudoPlaneInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLudoPlaneInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoPlaneInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    index: jspb.Message.getField(msg, 2),
    pkType: jspb.Message.getField(msg, 3),
    nums: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLudoPlaneInfo}
 */
proto.MsgLudoPlaneInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLudoPlaneInfo;
  return proto.MsgLudoPlaneInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLudoPlaneInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLudoPlaneInfo}
 */
proto.MsgLudoPlaneInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNums(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLudoPlaneInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLudoPlaneInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLudoPlaneInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoPlaneInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 type = 1;
 * @return {number}
 */
proto.MsgLudoPlaneInfo.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLudoPlaneInfo.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLudoPlaneInfo.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoPlaneInfo.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 index = 2;
 * @return {number}
 */
proto.MsgLudoPlaneInfo.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLudoPlaneInfo.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLudoPlaneInfo.prototype.clearIndex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoPlaneInfo.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 pk_type = 3;
 * @return {number}
 */
proto.MsgLudoPlaneInfo.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgLudoPlaneInfo.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgLudoPlaneInfo.prototype.clearPkType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoPlaneInfo.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 nums = 4;
 * @return {number}
 */
proto.MsgLudoPlaneInfo.prototype.getNums = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgLudoPlaneInfo.prototype.setNums = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgLudoPlaneInfo.prototype.clearNums = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoPlaneInfo.prototype.hasNums = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgLudoRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgLudoRecoveryNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgLudoRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgLudoRecoveryNtf.displayName = 'proto.MsgLudoRecoveryNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgLudoRecoveryNtf.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgLudoRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgLudoRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgLudoRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    next: jspb.Message.getField(msg, 1),
    time: jspb.Message.getField(msg, 2),
    value: jspb.Message.getField(msg, 3),
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.MsgLudoPlaneInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgLudoRecoveryNtf}
 */
proto.MsgLudoRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgLudoRecoveryNtf;
  return proto.MsgLudoRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgLudoRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgLudoRecoveryNtf}
 */
proto.MsgLudoRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    case 4:
      var value = new proto.MsgLudoPlaneInfo;
      reader.readMessage(value,proto.MsgLudoPlaneInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgLudoRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgLudoRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgLudoRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgLudoRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.MsgLudoPlaneInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 next = 1;
 * @return {number}
 */
proto.MsgLudoRecoveryNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgLudoRecoveryNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgLudoRecoveryNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoRecoveryNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 time = 2;
 * @return {number}
 */
proto.MsgLudoRecoveryNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgLudoRecoveryNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgLudoRecoveryNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoRecoveryNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 value = 3;
 * @return {number}
 */
proto.MsgLudoRecoveryNtf.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgLudoRecoveryNtf.prototype.setValue = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgLudoRecoveryNtf.prototype.clearValue = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgLudoRecoveryNtf.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated MsgLudoPlaneInfo info = 4;
 * @return {!Array<!proto.MsgLudoPlaneInfo>}
 */
proto.MsgLudoRecoveryNtf.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.MsgLudoPlaneInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgLudoPlaneInfo, 4));
};


/** @param {!Array<!proto.MsgLudoPlaneInfo>} value */
proto.MsgLudoRecoveryNtf.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.MsgLudoPlaneInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgLudoPlaneInfo}
 */
proto.MsgLudoRecoveryNtf.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.MsgLudoPlaneInfo, opt_index);
};


proto.MsgLudoRecoveryNtf.prototype.clearInfoList = function() {
  this.setInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArcheryStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArcheryStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArcheryStartNtf.displayName = 'proto.MsgArcheryStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArcheryStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArcheryStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArcheryStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3),
    scene: jspb.Message.getField(msg, 4),
    distance: jspb.Message.getField(msg, 5),
    windSpeed: jspb.Message.getField(msg, 6),
    windDirection: jspb.Message.getField(msg, 7),
    jianbaType: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArcheryStartNtf}
 */
proto.MsgArcheryStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArcheryStartNtf;
  return proto.MsgArcheryStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArcheryStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArcheryStartNtf}
 */
proto.MsgArcheryStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScene(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDistance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWindSpeed(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWindDirection(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setJianbaType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArcheryStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArcheryStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArcheryStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgArcheryStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArcheryStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArcheryStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgArcheryStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArcheryStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArcheryStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgArcheryStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgArcheryStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArcheryStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 scene = 4;
 * @return {number}
 */
proto.MsgArcheryStartNtf.prototype.getScene = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgArcheryStartNtf.prototype.setScene = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgArcheryStartNtf.prototype.clearScene = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryStartNtf.prototype.hasScene = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 distance = 5;
 * @return {number}
 */
proto.MsgArcheryStartNtf.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgArcheryStartNtf.prototype.setDistance = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgArcheryStartNtf.prototype.clearDistance = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryStartNtf.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 wind_speed = 6;
 * @return {number}
 */
proto.MsgArcheryStartNtf.prototype.getWindSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgArcheryStartNtf.prototype.setWindSpeed = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgArcheryStartNtf.prototype.clearWindSpeed = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryStartNtf.prototype.hasWindSpeed = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 wind_direction = 7;
 * @return {number}
 */
proto.MsgArcheryStartNtf.prototype.getWindDirection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgArcheryStartNtf.prototype.setWindDirection = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgArcheryStartNtf.prototype.clearWindDirection = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryStartNtf.prototype.hasWindDirection = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 jianba_type = 8;
 * @return {number}
 */
proto.MsgArcheryStartNtf.prototype.getJianbaType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.MsgArcheryStartNtf.prototype.setJianbaType = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgArcheryStartNtf.prototype.clearJianbaType = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryStartNtf.prototype.hasJianbaType = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArcheryPlayReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArcheryPlayReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArcheryPlayReq.displayName = 'proto.MsgArcheryPlayReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArcheryPlayReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArcheryPlayReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArcheryPlayReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    hitPoint: jspb.Message.getField(msg, 2),
    score: jspb.Message.getField(msg, 3),
    distance: jspb.Message.getField(msg, 4),
    offsetDir: jspb.Message.getField(msg, 5),
    jianbaTime: jspb.Message.getField(msg, 6),
    flyTime: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArcheryPlayReq}
 */
proto.MsgArcheryPlayReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArcheryPlayReq;
  return proto.MsgArcheryPlayReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArcheryPlayReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArcheryPlayReq}
 */
proto.MsgArcheryPlayReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHitPoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDistance(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffsetDir(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setJianbaTime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlyTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArcheryPlayReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArcheryPlayReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArcheryPlayReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgArcheryPlayReq.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayReq.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArcheryPlayReq.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayReq.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string hit_point = 2;
 * @return {string}
 */
proto.MsgArcheryPlayReq.prototype.getHitPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgArcheryPlayReq.prototype.setHitPoint = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArcheryPlayReq.prototype.clearHitPoint = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayReq.prototype.hasHitPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 score = 3;
 * @return {number}
 */
proto.MsgArcheryPlayReq.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayReq.prototype.setScore = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArcheryPlayReq.prototype.clearScore = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayReq.prototype.hasScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 distance = 4;
 * @return {number}
 */
proto.MsgArcheryPlayReq.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayReq.prototype.setDistance = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgArcheryPlayReq.prototype.clearDistance = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayReq.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string offset_dir = 5;
 * @return {string}
 */
proto.MsgArcheryPlayReq.prototype.getOffsetDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.MsgArcheryPlayReq.prototype.setOffsetDir = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgArcheryPlayReq.prototype.clearOffsetDir = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayReq.prototype.hasOffsetDir = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 jianba_time = 6;
 * @return {number}
 */
proto.MsgArcheryPlayReq.prototype.getJianbaTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayReq.prototype.setJianbaTime = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgArcheryPlayReq.prototype.clearJianbaTime = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayReq.prototype.hasJianbaTime = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 fly_time = 7;
 * @return {number}
 */
proto.MsgArcheryPlayReq.prototype.getFlyTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayReq.prototype.setFlyTime = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgArcheryPlayReq.prototype.clearFlyTime = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayReq.prototype.hasFlyTime = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArcheryPlayRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArcheryPlayRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArcheryPlayRep.displayName = 'proto.MsgArcheryPlayRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArcheryPlayRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArcheryPlayRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArcheryPlayRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArcheryPlayRep}
 */
proto.MsgArcheryPlayRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArcheryPlayRep;
  return proto.MsgArcheryPlayRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArcheryPlayRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArcheryPlayRep}
 */
proto.MsgArcheryPlayRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArcheryPlayRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArcheryPlayRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArcheryPlayRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgArcheryPlayRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArcheryPlayRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArcheryPlayNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArcheryPlayNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArcheryPlayNtf.displayName = 'proto.MsgArcheryPlayNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArcheryPlayNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArcheryPlayNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArcheryPlayNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    hitPoint: jspb.Message.getField(msg, 2),
    score: jspb.Message.getField(msg, 3),
    distance: jspb.Message.getField(msg, 4),
    offsetDir: jspb.Message.getField(msg, 5),
    jianbaTime: jspb.Message.getField(msg, 6),
    flyTime: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArcheryPlayNtf}
 */
proto.MsgArcheryPlayNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArcheryPlayNtf;
  return proto.MsgArcheryPlayNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArcheryPlayNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArcheryPlayNtf}
 */
proto.MsgArcheryPlayNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHitPoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDistance(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffsetDir(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setJianbaTime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlyTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArcheryPlayNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArcheryPlayNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArcheryPlayNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgArcheryPlayNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArcheryPlayNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string hit_point = 2;
 * @return {string}
 */
proto.MsgArcheryPlayNtf.prototype.getHitPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgArcheryPlayNtf.prototype.setHitPoint = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArcheryPlayNtf.prototype.clearHitPoint = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayNtf.prototype.hasHitPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 score = 3;
 * @return {number}
 */
proto.MsgArcheryPlayNtf.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayNtf.prototype.setScore = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArcheryPlayNtf.prototype.clearScore = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayNtf.prototype.hasScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 distance = 4;
 * @return {number}
 */
proto.MsgArcheryPlayNtf.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayNtf.prototype.setDistance = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgArcheryPlayNtf.prototype.clearDistance = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayNtf.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string offset_dir = 5;
 * @return {string}
 */
proto.MsgArcheryPlayNtf.prototype.getOffsetDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.MsgArcheryPlayNtf.prototype.setOffsetDir = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgArcheryPlayNtf.prototype.clearOffsetDir = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayNtf.prototype.hasOffsetDir = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 jianba_time = 6;
 * @return {number}
 */
proto.MsgArcheryPlayNtf.prototype.getJianbaTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayNtf.prototype.setJianbaTime = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgArcheryPlayNtf.prototype.clearJianbaTime = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayNtf.prototype.hasJianbaTime = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 fly_time = 7;
 * @return {number}
 */
proto.MsgArcheryPlayNtf.prototype.getFlyTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayNtf.prototype.setFlyTime = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgArcheryPlayNtf.prototype.clearFlyTime = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayNtf.prototype.hasFlyTime = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArcheryPlayEndReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArcheryPlayEndReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArcheryPlayEndReq.displayName = 'proto.MsgArcheryPlayEndReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArcheryPlayEndReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArcheryPlayEndReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArcheryPlayEndReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayEndReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArcheryPlayEndReq}
 */
proto.MsgArcheryPlayEndReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArcheryPlayEndReq;
  return proto.MsgArcheryPlayEndReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArcheryPlayEndReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArcheryPlayEndReq}
 */
proto.MsgArcheryPlayEndReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArcheryPlayEndReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArcheryPlayEndReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArcheryPlayEndReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayEndReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgArcheryPlayEndReq.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayEndReq.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArcheryPlayEndReq.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayEndReq.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArcheryPlayEndNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArcheryPlayEndNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArcheryPlayEndNtf.displayName = 'proto.MsgArcheryPlayEndNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArcheryPlayEndNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArcheryPlayEndNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArcheryPlayEndNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayEndNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    next: jspb.Message.getField(msg, 1),
    time: jspb.Message.getField(msg, 2),
    round: jspb.Message.getField(msg, 3),
    count: jspb.Message.getField(msg, 4),
    timeout: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArcheryPlayEndNtf}
 */
proto.MsgArcheryPlayEndNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArcheryPlayEndNtf;
  return proto.MsgArcheryPlayEndNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArcheryPlayEndNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArcheryPlayEndNtf}
 */
proto.MsgArcheryPlayEndNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArcheryPlayEndNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArcheryPlayEndNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArcheryPlayEndNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayEndNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required uint32 next = 1;
 * @return {number}
 */
proto.MsgArcheryPlayEndNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayEndNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArcheryPlayEndNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayEndNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 time = 2;
 * @return {number}
 */
proto.MsgArcheryPlayEndNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayEndNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArcheryPlayEndNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayEndNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 round = 3;
 * @return {number}
 */
proto.MsgArcheryPlayEndNtf.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayEndNtf.prototype.setRound = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArcheryPlayEndNtf.prototype.clearRound = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayEndNtf.prototype.hasRound = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 count = 4;
 * @return {number}
 */
proto.MsgArcheryPlayEndNtf.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayEndNtf.prototype.setCount = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgArcheryPlayEndNtf.prototype.clearCount = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayEndNtf.prototype.hasCount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 timeout = 5;
 * @return {number}
 */
proto.MsgArcheryPlayEndNtf.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayEndNtf.prototype.setTimeout = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgArcheryPlayEndNtf.prototype.clearTimeout = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayEndNtf.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArcheryPlayStateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArcheryPlayStateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArcheryPlayStateReq.displayName = 'proto.MsgArcheryPlayStateReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArcheryPlayStateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArcheryPlayStateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArcheryPlayStateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayStateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    position: jspb.Message.getField(msg, 2),
    rotation: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArcheryPlayStateReq}
 */
proto.MsgArcheryPlayStateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArcheryPlayStateReq;
  return proto.MsgArcheryPlayStateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArcheryPlayStateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArcheryPlayStateReq}
 */
proto.MsgArcheryPlayStateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArcheryPlayStateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArcheryPlayStateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArcheryPlayStateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayStateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgArcheryPlayStateReq.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayStateReq.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArcheryPlayStateReq.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayStateReq.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string position = 2;
 * @return {string}
 */
proto.MsgArcheryPlayStateReq.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgArcheryPlayStateReq.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArcheryPlayStateReq.prototype.clearPosition = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayStateReq.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string rotation = 3;
 * @return {string}
 */
proto.MsgArcheryPlayStateReq.prototype.getRotation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.MsgArcheryPlayStateReq.prototype.setRotation = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArcheryPlayStateReq.prototype.clearRotation = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayStateReq.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArcheryPlayStateNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArcheryPlayStateNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArcheryPlayStateNtf.displayName = 'proto.MsgArcheryPlayStateNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArcheryPlayStateNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArcheryPlayStateNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArcheryPlayStateNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayStateNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    position: jspb.Message.getField(msg, 2),
    rotation: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArcheryPlayStateNtf}
 */
proto.MsgArcheryPlayStateNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArcheryPlayStateNtf;
  return proto.MsgArcheryPlayStateNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArcheryPlayStateNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArcheryPlayStateNtf}
 */
proto.MsgArcheryPlayStateNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArcheryPlayStateNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArcheryPlayStateNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArcheryPlayStateNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryPlayStateNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgArcheryPlayStateNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArcheryPlayStateNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArcheryPlayStateNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayStateNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string position = 2;
 * @return {string}
 */
proto.MsgArcheryPlayStateNtf.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgArcheryPlayStateNtf.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArcheryPlayStateNtf.prototype.clearPosition = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayStateNtf.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string rotation = 3;
 * @return {string}
 */
proto.MsgArcheryPlayStateNtf.prototype.getRotation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.MsgArcheryPlayStateNtf.prototype.setRotation = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArcheryPlayStateNtf.prototype.clearRotation = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryPlayStateNtf.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArcheryResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArcheryResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArcheryResultNtf.displayName = 'proto.MsgArcheryResultNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArcheryResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArcheryResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArcheryResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2),
    round: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArcheryResultNtf}
 */
proto.MsgArcheryResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArcheryResultNtf;
  return proto.MsgArcheryResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArcheryResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArcheryResultNtf}
 */
proto.MsgArcheryResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArcheryResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArcheryResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArcheryResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgArcheryResultNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArcheryResultNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArcheryResultNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryResultNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgArcheryResultNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArcheryResultNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArcheryResultNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryResultNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 round = 3;
 * @return {number}
 */
proto.MsgArcheryResultNtf.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgArcheryResultNtf.prototype.setRound = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArcheryResultNtf.prototype.clearRound = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryResultNtf.prototype.hasRound = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArcheryRaceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgArcheryRaceInfo.repeatedFields_, null);
};
goog.inherits(proto.MsgArcheryRaceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArcheryRaceInfo.displayName = 'proto.MsgArcheryRaceInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgArcheryRaceInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArcheryRaceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArcheryRaceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArcheryRaceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryRaceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2),
    resultList: jspb.Message.getRepeatedField(msg, 3),
    distance: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArcheryRaceInfo}
 */
proto.MsgArcheryRaceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArcheryRaceInfo;
  return proto.MsgArcheryRaceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArcheryRaceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArcheryRaceInfo}
 */
proto.MsgArcheryRaceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addResult(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArcheryRaceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArcheryRaceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArcheryRaceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryRaceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgArcheryRaceInfo.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArcheryRaceInfo.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArcheryRaceInfo.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryRaceInfo.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 score = 2;
 * @return {number}
 */
proto.MsgArcheryRaceInfo.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArcheryRaceInfo.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArcheryRaceInfo.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryRaceInfo.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated uint32 result = 3;
 * @return {!Array<number>}
 */
proto.MsgArcheryRaceInfo.prototype.getResultList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.MsgArcheryRaceInfo.prototype.setResultList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.MsgArcheryRaceInfo.prototype.addResult = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.MsgArcheryRaceInfo.prototype.clearResultList = function() {
  this.setResultList([]);
};


/**
 * optional uint32 distance = 4;
 * @return {number}
 */
proto.MsgArcheryRaceInfo.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgArcheryRaceInfo.prototype.setDistance = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgArcheryRaceInfo.prototype.clearDistance = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryRaceInfo.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArcheryRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgArcheryRecoveryNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgArcheryRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArcheryRecoveryNtf.displayName = 'proto.MsgArcheryRecoveryNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgArcheryRecoveryNtf.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArcheryRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArcheryRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArcheryRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    next: jspb.Message.getField(msg, 1),
    time: jspb.Message.getField(msg, 2),
    round: jspb.Message.getField(msg, 3),
    count: jspb.Message.getField(msg, 4),
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.MsgArcheryRaceInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArcheryRecoveryNtf}
 */
proto.MsgArcheryRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArcheryRecoveryNtf;
  return proto.MsgArcheryRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArcheryRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArcheryRecoveryNtf}
 */
proto.MsgArcheryRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 5:
      var value = new proto.MsgArcheryRaceInfo;
      reader.readMessage(value,proto.MsgArcheryRaceInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArcheryRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArcheryRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArcheryRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArcheryRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.MsgArcheryRaceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 next = 1;
 * @return {number}
 */
proto.MsgArcheryRecoveryNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArcheryRecoveryNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArcheryRecoveryNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryRecoveryNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 time = 2;
 * @return {number}
 */
proto.MsgArcheryRecoveryNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArcheryRecoveryNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArcheryRecoveryNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryRecoveryNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 round = 3;
 * @return {number}
 */
proto.MsgArcheryRecoveryNtf.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgArcheryRecoveryNtf.prototype.setRound = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArcheryRecoveryNtf.prototype.clearRound = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryRecoveryNtf.prototype.hasRound = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 count = 4;
 * @return {number}
 */
proto.MsgArcheryRecoveryNtf.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgArcheryRecoveryNtf.prototype.setCount = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgArcheryRecoveryNtf.prototype.clearCount = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArcheryRecoveryNtf.prototype.hasCount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated MsgArcheryRaceInfo info = 5;
 * @return {!Array<!proto.MsgArcheryRaceInfo>}
 */
proto.MsgArcheryRecoveryNtf.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.MsgArcheryRaceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgArcheryRaceInfo, 5));
};


/** @param {!Array<!proto.MsgArcheryRaceInfo>} value */
proto.MsgArcheryRecoveryNtf.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.MsgArcheryRaceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgArcheryRaceInfo}
 */
proto.MsgArcheryRecoveryNtf.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.MsgArcheryRaceInfo, opt_index);
};


proto.MsgArcheryRecoveryNtf.prototype.clearInfoList = function() {
  this.setInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBasketballStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBasketballStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBasketballStartNtf.displayName = 'proto.MsgBasketballStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBasketballStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBasketballStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBasketballStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBasketballStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBasketballStartNtf}
 */
proto.MsgBasketballStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBasketballStartNtf;
  return proto.MsgBasketballStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBasketballStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBasketballStartNtf}
 */
proto.MsgBasketballStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBasketballStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBasketballStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBasketballStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBasketballStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBasketballStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBasketballStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBasketballStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBasketballStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgBasketballStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBasketballStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBasketballStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBasketballStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgBasketballStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgBasketballStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBasketballStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBasketballStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBasketballSyncReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBasketballSyncReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBasketballSyncReq.displayName = 'proto.MsgBasketballSyncReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBasketballSyncReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBasketballSyncReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBasketballSyncReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBasketballSyncReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBasketballSyncReq}
 */
proto.MsgBasketballSyncReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBasketballSyncReq;
  return proto.MsgBasketballSyncReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBasketballSyncReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBasketballSyncReq}
 */
proto.MsgBasketballSyncReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBasketballSyncReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBasketballSyncReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBasketballSyncReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBasketballSyncReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBasketballSyncReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBasketballSyncReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBasketballSyncReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBasketballSyncReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 score = 2;
 * @return {number}
 */
proto.MsgBasketballSyncReq.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBasketballSyncReq.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBasketballSyncReq.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBasketballSyncReq.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBasketballSyncNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBasketballSyncNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBasketballSyncNtf.displayName = 'proto.MsgBasketballSyncNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBasketballSyncNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBasketballSyncNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBasketballSyncNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBasketballSyncNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBasketballSyncNtf}
 */
proto.MsgBasketballSyncNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBasketballSyncNtf;
  return proto.MsgBasketballSyncNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBasketballSyncNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBasketballSyncNtf}
 */
proto.MsgBasketballSyncNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBasketballSyncNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBasketballSyncNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBasketballSyncNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBasketballSyncNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBasketballSyncNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBasketballSyncNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBasketballSyncNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBasketballSyncNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 score = 2;
 * @return {number}
 */
proto.MsgBasketballSyncNtf.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBasketballSyncNtf.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBasketballSyncNtf.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBasketballSyncNtf.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBasketballResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBasketballResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBasketballResultNtf.displayName = 'proto.MsgBasketballResultNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBasketballResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBasketballResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBasketballResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBasketballResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBasketballResultNtf}
 */
proto.MsgBasketballResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBasketballResultNtf;
  return proto.MsgBasketballResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBasketballResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBasketballResultNtf}
 */
proto.MsgBasketballResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBasketballResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBasketballResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBasketballResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBasketballResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgBasketballResultNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBasketballResultNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBasketballResultNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBasketballResultNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgBasketballResultNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBasketballResultNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBasketballResultNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBasketballResultNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBasketballRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBasketballRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBasketballRecoveryNtf.displayName = 'proto.MsgBasketballRecoveryNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBasketballRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBasketballRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBasketballRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBasketballRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    redScore: jspb.Message.getField(msg, 1),
    blueScore: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBasketballRecoveryNtf}
 */
proto.MsgBasketballRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBasketballRecoveryNtf;
  return proto.MsgBasketballRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBasketballRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBasketballRecoveryNtf}
 */
proto.MsgBasketballRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedScore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBasketballRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBasketballRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBasketballRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBasketballRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 red_score = 1;
 * @return {number}
 */
proto.MsgBasketballRecoveryNtf.prototype.getRedScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBasketballRecoveryNtf.prototype.setRedScore = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBasketballRecoveryNtf.prototype.clearRedScore = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBasketballRecoveryNtf.prototype.hasRedScore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 blue_score = 2;
 * @return {number}
 */
proto.MsgBasketballRecoveryNtf.prototype.getBlueScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBasketballRecoveryNtf.prototype.setBlueScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBasketballRecoveryNtf.prototype.clearBlueScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBasketballRecoveryNtf.prototype.hasBlueScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgWhospyStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyStartNtf.displayName = 'proto.MsgWhospyStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    spyUid: jspb.Message.getField(msg, 1),
    spyKey: jspb.Message.getField(msg, 2),
    civilianKey: jspb.Message.getField(msg, 3),
    time: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyStartNtf}
 */
proto.MsgWhospyStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyStartNtf;
  return proto.MsgWhospyStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyStartNtf}
 */
proto.MsgWhospyStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpyUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpyKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCivilianKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 spy_uid = 1;
 * @return {number}
 */
proto.MsgWhospyStartNtf.prototype.getSpyUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyStartNtf.prototype.setSpyUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyStartNtf.prototype.clearSpyUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyStartNtf.prototype.hasSpyUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string spy_key = 2;
 * @return {string}
 */
proto.MsgWhospyStartNtf.prototype.getSpyKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgWhospyStartNtf.prototype.setSpyKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgWhospyStartNtf.prototype.clearSpyKey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyStartNtf.prototype.hasSpyKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string civilian_key = 3;
 * @return {string}
 */
proto.MsgWhospyStartNtf.prototype.getCivilianKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.MsgWhospyStartNtf.prototype.setCivilianKey = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgWhospyStartNtf.prototype.clearCivilianKey = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyStartNtf.prototype.hasCivilianKey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 time = 4;
 * @return {number}
 */
proto.MsgWhospyStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgWhospyStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgWhospyStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyStartDescNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgWhospyStartDescNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyStartDescNtf.displayName = 'proto.MsgWhospyStartDescNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyStartDescNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyStartDescNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyStartDescNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyStartDescNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyStartDescNtf}
 */
proto.MsgWhospyStartDescNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyStartDescNtf;
  return proto.MsgWhospyStartDescNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyStartDescNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyStartDescNtf}
 */
proto.MsgWhospyStartDescNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyStartDescNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyStartDescNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyStartDescNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyStartDescNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 round = 1;
 * @return {number}
 */
proto.MsgWhospyStartDescNtf.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyStartDescNtf.prototype.setRound = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyStartDescNtf.prototype.clearRound = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyStartDescNtf.prototype.hasRound = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyDescReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgWhospyDescReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyDescReq.displayName = 'proto.MsgWhospyDescReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyDescReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyDescReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyDescReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyDescReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    desc: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyDescReq}
 */
proto.MsgWhospyDescReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyDescReq;
  return proto.MsgWhospyDescReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyDescReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyDescReq}
 */
proto.MsgWhospyDescReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyDescReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyDescReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyDescReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyDescReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string desc = 1;
 * @return {string}
 */
proto.MsgWhospyDescReq.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MsgWhospyDescReq.prototype.setDesc = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyDescReq.prototype.clearDesc = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyDescReq.prototype.hasDesc = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyDescNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgWhospyDescNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyDescNtf.displayName = 'proto.MsgWhospyDescNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyDescNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyDescNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyDescNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyDescNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    descInfo: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyDescNtf}
 */
proto.MsgWhospyDescNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyDescNtf;
  return proto.MsgWhospyDescNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyDescNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyDescNtf}
 */
proto.MsgWhospyDescNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyDescNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyDescNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyDescNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyDescNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgWhospyDescNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyDescNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyDescNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyDescNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string desc_info = 2;
 * @return {string}
 */
proto.MsgWhospyDescNtf.prototype.getDescInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgWhospyDescNtf.prototype.setDescInfo = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgWhospyDescNtf.prototype.clearDescInfo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyDescNtf.prototype.hasDescInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyStartVoteNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgWhospyStartVoteNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyStartVoteNtf.displayName = 'proto.MsgWhospyStartVoteNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyStartVoteNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyStartVoteNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyStartVoteNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyStartVoteNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyStartVoteNtf}
 */
proto.MsgWhospyStartVoteNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyStartVoteNtf;
  return proto.MsgWhospyStartVoteNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyStartVoteNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyStartVoteNtf}
 */
proto.MsgWhospyStartVoteNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyStartVoteNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyStartVoteNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyStartVoteNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyStartVoteNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 round = 1;
 * @return {number}
 */
proto.MsgWhospyStartVoteNtf.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyStartVoteNtf.prototype.setRound = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyStartVoteNtf.prototype.clearRound = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyStartVoteNtf.prototype.hasRound = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyVoteReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgWhospyVoteReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyVoteReq.displayName = 'proto.MsgWhospyVoteReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyVoteReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyVoteReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyVoteReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyVoteReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetUid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyVoteReq}
 */
proto.MsgWhospyVoteReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyVoteReq;
  return proto.MsgWhospyVoteReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyVoteReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyVoteReq}
 */
proto.MsgWhospyVoteReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyVoteReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyVoteReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyVoteReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyVoteReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 target_uid = 1;
 * @return {number}
 */
proto.MsgWhospyVoteReq.prototype.getTargetUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyVoteReq.prototype.setTargetUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyVoteReq.prototype.clearTargetUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyVoteReq.prototype.hasTargetUid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyVoteNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgWhospyVoteNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyVoteNtf.displayName = 'proto.MsgWhospyVoteNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyVoteNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyVoteNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyVoteNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyVoteNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcUid: jspb.Message.getField(msg, 1),
    dstUid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyVoteNtf}
 */
proto.MsgWhospyVoteNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyVoteNtf;
  return proto.MsgWhospyVoteNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyVoteNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyVoteNtf}
 */
proto.MsgWhospyVoteNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrcUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyVoteNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyVoteNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyVoteNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyVoteNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 src_uid = 1;
 * @return {number}
 */
proto.MsgWhospyVoteNtf.prototype.getSrcUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyVoteNtf.prototype.setSrcUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyVoteNtf.prototype.clearSrcUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyVoteNtf.prototype.hasSrcUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 dst_uid = 2;
 * @return {number}
 */
proto.MsgWhospyVoteNtf.prototype.getDstUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgWhospyVoteNtf.prototype.setDstUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgWhospyVoteNtf.prototype.clearDstUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyVoteNtf.prototype.hasDstUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyVoteResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgWhospyVoteResultNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgWhospyVoteResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyVoteResultNtf.displayName = 'proto.MsgWhospyVoteResultNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgWhospyVoteResultNtf.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyVoteResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyVoteResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyVoteResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyVoteResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uidList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyVoteResultNtf}
 */
proto.MsgWhospyVoteResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyVoteResultNtf;
  return proto.MsgWhospyVoteResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyVoteResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyVoteResultNtf}
 */
proto.MsgWhospyVoteResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyVoteResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyVoteResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyVoteResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyVoteResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUidList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgWhospyVoteResultNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyVoteResultNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyVoteResultNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyVoteResultNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint32 uid = 2;
 * @return {!Array<number>}
 */
proto.MsgWhospyVoteResultNtf.prototype.getUidList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.MsgWhospyVoteResultNtf.prototype.setUidList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.MsgWhospyVoteResultNtf.prototype.addUid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.MsgWhospyVoteResultNtf.prototype.clearUidList = function() {
  this.setUidList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyStartGuessNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgWhospyStartGuessNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyStartGuessNtf.displayName = 'proto.MsgWhospyStartGuessNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyStartGuessNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyStartGuessNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyStartGuessNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyStartGuessNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    spyUid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyStartGuessNtf}
 */
proto.MsgWhospyStartGuessNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyStartGuessNtf;
  return proto.MsgWhospyStartGuessNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyStartGuessNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyStartGuessNtf}
 */
proto.MsgWhospyStartGuessNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpyUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyStartGuessNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyStartGuessNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyStartGuessNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyStartGuessNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 spy_uid = 1;
 * @return {number}
 */
proto.MsgWhospyStartGuessNtf.prototype.getSpyUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyStartGuessNtf.prototype.setSpyUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyStartGuessNtf.prototype.clearSpyUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyStartGuessNtf.prototype.hasSpyUid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyGuessReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgWhospyGuessReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyGuessReq.displayName = 'proto.MsgWhospyGuessReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyGuessReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyGuessReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyGuessReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyGuessReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    want: jspb.Message.getField(msg, 1),
    key: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyGuessReq}
 */
proto.MsgWhospyGuessReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyGuessReq;
  return proto.MsgWhospyGuessReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyGuessReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyGuessReq}
 */
proto.MsgWhospyGuessReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWant(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyGuessReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyGuessReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyGuessReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyGuessReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int32 want = 1;
 * @return {number}
 */
proto.MsgWhospyGuessReq.prototype.getWant = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyGuessReq.prototype.setWant = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyGuessReq.prototype.clearWant = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyGuessReq.prototype.hasWant = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.MsgWhospyGuessReq.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgWhospyGuessReq.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgWhospyGuessReq.prototype.clearKey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyGuessReq.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyGuessNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgWhospyGuessNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyGuessNtf.displayName = 'proto.MsgWhospyGuessNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyGuessNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyGuessNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyGuessNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyGuessNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    guessRes: jspb.Message.getField(msg, 1),
    key: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyGuessNtf}
 */
proto.MsgWhospyGuessNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyGuessNtf;
  return proto.MsgWhospyGuessNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyGuessNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyGuessNtf}
 */
proto.MsgWhospyGuessNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGuessRes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyGuessNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyGuessNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyGuessNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyGuessNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int32 guess_res = 1;
 * @return {number}
 */
proto.MsgWhospyGuessNtf.prototype.getGuessRes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyGuessNtf.prototype.setGuessRes = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyGuessNtf.prototype.clearGuessRes = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyGuessNtf.prototype.hasGuessRes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.MsgWhospyGuessNtf.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgWhospyGuessNtf.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgWhospyGuessNtf.prototype.clearKey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyGuessNtf.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgWhospyOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyOverNtf.displayName = 'proto.MsgWhospyOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    victory: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyOverNtf}
 */
proto.MsgWhospyOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyOverNtf;
  return proto.MsgWhospyOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyOverNtf}
 */
proto.MsgWhospyOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVictory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 victory = 1;
 * @return {number}
 */
proto.MsgWhospyOverNtf.prototype.getVictory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyOverNtf.prototype.setVictory = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyOverNtf.prototype.clearVictory = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyOverNtf.prototype.hasVictory = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyChatReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgWhospyChatReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyChatReq.displayName = 'proto.MsgWhospyChatReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyChatReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyChatReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyChatReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyChatReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    msg: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyChatReq}
 */
proto.MsgWhospyChatReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyChatReq;
  return proto.MsgWhospyChatReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyChatReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyChatReq}
 */
proto.MsgWhospyChatReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyChatReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyChatReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyChatReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyChatReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgWhospyChatReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyChatReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyChatReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyChatReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string msg = 2;
 * @return {string}
 */
proto.MsgWhospyChatReq.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgWhospyChatReq.prototype.setMsg = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgWhospyChatReq.prototype.clearMsg = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyChatReq.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyChatNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgWhospyChatNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyChatNtf.displayName = 'proto.MsgWhospyChatNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyChatNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyChatNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyChatNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyChatNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    msg: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyChatNtf}
 */
proto.MsgWhospyChatNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyChatNtf;
  return proto.MsgWhospyChatNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyChatNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyChatNtf}
 */
proto.MsgWhospyChatNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyChatNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyChatNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyChatNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyChatNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgWhospyChatNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyChatNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyChatNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyChatNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string msg = 2;
 * @return {string}
 */
proto.MsgWhospyChatNtf.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgWhospyChatNtf.prototype.setMsg = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgWhospyChatNtf.prototype.clearMsg = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyChatNtf.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DescInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DescInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DescInfo.displayName = 'proto.DescInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DescInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.DescInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DescInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DescInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    desc: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DescInfo}
 */
proto.DescInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DescInfo;
  return proto.DescInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DescInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DescInfo}
 */
proto.DescInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DescInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DescInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DescInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DescInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.DescInfo.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DescInfo.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DescInfo.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DescInfo.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string desc = 2;
 * @return {string}
 */
proto.DescInfo.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DescInfo.prototype.setDesc = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DescInfo.prototype.clearDesc = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DescInfo.prototype.hasDesc = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VoteInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VoteInfo.repeatedFields_, null);
};
goog.inherits(proto.VoteInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VoteInfo.displayName = 'proto.VoteInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VoteInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VoteInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.VoteInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VoteInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VoteInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    dstUid: jspb.Message.getField(msg, 1),
    srcUidList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VoteInfo}
 */
proto.VoteInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VoteInfo;
  return proto.VoteInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VoteInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VoteInfo}
 */
proto.VoteInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addSrcUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VoteInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VoteInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VoteInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VoteInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSrcUidList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 dst_uid = 1;
 * @return {number}
 */
proto.VoteInfo.prototype.getDstUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.VoteInfo.prototype.setDstUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.VoteInfo.prototype.clearDstUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.VoteInfo.prototype.hasDstUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint32 src_uid = 2;
 * @return {!Array<number>}
 */
proto.VoteInfo.prototype.getSrcUidList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.VoteInfo.prototype.setSrcUidList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.VoteInfo.prototype.addSrcUid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.VoteInfo.prototype.clearSrcUidList = function() {
  this.setSrcUidList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgWhospyRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgWhospyRecoveryNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgWhospyRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgWhospyRecoveryNtf.displayName = 'proto.MsgWhospyRecoveryNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgWhospyRecoveryNtf.repeatedFields_ = [3,4,5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgWhospyRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgWhospyRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgWhospyRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    leftTime: jspb.Message.getField(msg, 1),
    gameStatus: jspb.Message.getField(msg, 2),
    dieoutUidList: jspb.Message.getRepeatedField(msg, 3),
    descInfoList: jspb.Message.toObjectList(msg.getDescInfoList(),
    proto.DescInfo.toObject, includeInstance),
    voteInfoList: jspb.Message.toObjectList(msg.getVoteInfoList(),
    proto.VoteInfo.toObject, includeInstance),
    gussUid: jspb.Message.getField(msg, 6),
    equalUidList: jspb.Message.getRepeatedField(msg, 7),
    round: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgWhospyRecoveryNtf}
 */
proto.MsgWhospyRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgWhospyRecoveryNtf;
  return proto.MsgWhospyRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgWhospyRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgWhospyRecoveryNtf}
 */
proto.MsgWhospyRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addDieoutUid(value);
      break;
    case 4:
      var value = new proto.DescInfo;
      reader.readMessage(value,proto.DescInfo.deserializeBinaryFromReader);
      msg.addDescInfo(value);
      break;
    case 5:
      var value = new proto.VoteInfo;
      reader.readMessage(value,proto.VoteInfo.deserializeBinaryFromReader);
      msg.addVoteInfo(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGussUid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addEqualUid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgWhospyRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgWhospyRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgWhospyRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgWhospyRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDieoutUidList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      3,
      f
    );
  }
  f = message.getDescInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.DescInfo.serializeBinaryToWriter
    );
  }
  f = message.getVoteInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.VoteInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getEqualUidList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * required uint32 left_time = 1;
 * @return {number}
 */
proto.MsgWhospyRecoveryNtf.prototype.getLeftTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgWhospyRecoveryNtf.prototype.setLeftTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgWhospyRecoveryNtf.prototype.clearLeftTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyRecoveryNtf.prototype.hasLeftTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 game_status = 2;
 * @return {number}
 */
proto.MsgWhospyRecoveryNtf.prototype.getGameStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgWhospyRecoveryNtf.prototype.setGameStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgWhospyRecoveryNtf.prototype.clearGameStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyRecoveryNtf.prototype.hasGameStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated uint32 dieout_uid = 3;
 * @return {!Array<number>}
 */
proto.MsgWhospyRecoveryNtf.prototype.getDieoutUidList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.MsgWhospyRecoveryNtf.prototype.setDieoutUidList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.MsgWhospyRecoveryNtf.prototype.addDieoutUid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.MsgWhospyRecoveryNtf.prototype.clearDieoutUidList = function() {
  this.setDieoutUidList([]);
};


/**
 * repeated DescInfo desc_info = 4;
 * @return {!Array<!proto.DescInfo>}
 */
proto.MsgWhospyRecoveryNtf.prototype.getDescInfoList = function() {
  return /** @type{!Array<!proto.DescInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DescInfo, 4));
};


/** @param {!Array<!proto.DescInfo>} value */
proto.MsgWhospyRecoveryNtf.prototype.setDescInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.DescInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DescInfo}
 */
proto.MsgWhospyRecoveryNtf.prototype.addDescInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.DescInfo, opt_index);
};


proto.MsgWhospyRecoveryNtf.prototype.clearDescInfoList = function() {
  this.setDescInfoList([]);
};


/**
 * repeated VoteInfo vote_info = 5;
 * @return {!Array<!proto.VoteInfo>}
 */
proto.MsgWhospyRecoveryNtf.prototype.getVoteInfoList = function() {
  return /** @type{!Array<!proto.VoteInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VoteInfo, 5));
};


/** @param {!Array<!proto.VoteInfo>} value */
proto.MsgWhospyRecoveryNtf.prototype.setVoteInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.VoteInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VoteInfo}
 */
proto.MsgWhospyRecoveryNtf.prototype.addVoteInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.VoteInfo, opt_index);
};


proto.MsgWhospyRecoveryNtf.prototype.clearVoteInfoList = function() {
  this.setVoteInfoList([]);
};


/**
 * optional uint32 guss_uid = 6;
 * @return {number}
 */
proto.MsgWhospyRecoveryNtf.prototype.getGussUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgWhospyRecoveryNtf.prototype.setGussUid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgWhospyRecoveryNtf.prototype.clearGussUid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyRecoveryNtf.prototype.hasGussUid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated uint32 equal_uid = 7;
 * @return {!Array<number>}
 */
proto.MsgWhospyRecoveryNtf.prototype.getEqualUidList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<number>} value */
proto.MsgWhospyRecoveryNtf.prototype.setEqualUidList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.MsgWhospyRecoveryNtf.prototype.addEqualUid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.MsgWhospyRecoveryNtf.prototype.clearEqualUidList = function() {
  this.setEqualUidList([]);
};


/**
 * required uint32 round = 8;
 * @return {number}
 */
proto.MsgWhospyRecoveryNtf.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.MsgWhospyRecoveryNtf.prototype.setRound = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgWhospyRecoveryNtf.prototype.clearRound = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgWhospyRecoveryNtf.prototype.hasRound = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSolitaireStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSolitaireStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSolitaireStartNtf.displayName = 'proto.MsgSolitaireStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSolitaireStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSolitaireStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSolitaireStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSolitaireStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSolitaireStartNtf}
 */
proto.MsgSolitaireStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSolitaireStartNtf;
  return proto.MsgSolitaireStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSolitaireStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSolitaireStartNtf}
 */
proto.MsgSolitaireStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSolitaireStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSolitaireStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSolitaireStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSolitaireStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgSolitaireStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSolitaireStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSolitaireStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSolitaireStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgSolitaireStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSolitaireStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSolitaireStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSolitaireStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgSolitaireStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgSolitaireStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgSolitaireStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSolitaireStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSolitaireSyncReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSolitaireSyncReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSolitaireSyncReq.displayName = 'proto.MsgSolitaireSyncReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSolitaireSyncReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSolitaireSyncReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSolitaireSyncReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSolitaireSyncReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSolitaireSyncReq}
 */
proto.MsgSolitaireSyncReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSolitaireSyncReq;
  return proto.MsgSolitaireSyncReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSolitaireSyncReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSolitaireSyncReq}
 */
proto.MsgSolitaireSyncReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSolitaireSyncReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSolitaireSyncReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSolitaireSyncReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSolitaireSyncReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgSolitaireSyncReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSolitaireSyncReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSolitaireSyncReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSolitaireSyncReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 score = 2;
 * @return {number}
 */
proto.MsgSolitaireSyncReq.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSolitaireSyncReq.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSolitaireSyncReq.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSolitaireSyncReq.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSolitaireSyncNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSolitaireSyncNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSolitaireSyncNtf.displayName = 'proto.MsgSolitaireSyncNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSolitaireSyncNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSolitaireSyncNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSolitaireSyncNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSolitaireSyncNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSolitaireSyncNtf}
 */
proto.MsgSolitaireSyncNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSolitaireSyncNtf;
  return proto.MsgSolitaireSyncNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSolitaireSyncNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSolitaireSyncNtf}
 */
proto.MsgSolitaireSyncNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSolitaireSyncNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSolitaireSyncNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSolitaireSyncNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSolitaireSyncNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgSolitaireSyncNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSolitaireSyncNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSolitaireSyncNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSolitaireSyncNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 score = 2;
 * @return {number}
 */
proto.MsgSolitaireSyncNtf.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSolitaireSyncNtf.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSolitaireSyncNtf.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSolitaireSyncNtf.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSolitaireResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSolitaireResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSolitaireResultNtf.displayName = 'proto.MsgSolitaireResultNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSolitaireResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSolitaireResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSolitaireResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSolitaireResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSolitaireResultNtf}
 */
proto.MsgSolitaireResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSolitaireResultNtf;
  return proto.MsgSolitaireResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSolitaireResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSolitaireResultNtf}
 */
proto.MsgSolitaireResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSolitaireResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSolitaireResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSolitaireResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSolitaireResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgSolitaireResultNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSolitaireResultNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSolitaireResultNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSolitaireResultNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgSolitaireResultNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSolitaireResultNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSolitaireResultNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSolitaireResultNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSolitaireRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSolitaireRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSolitaireRecoveryNtf.displayName = 'proto.MsgSolitaireRecoveryNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSolitaireRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSolitaireRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSolitaireRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSolitaireRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    redScore: jspb.Message.getField(msg, 1),
    blueScore: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSolitaireRecoveryNtf}
 */
proto.MsgSolitaireRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSolitaireRecoveryNtf;
  return proto.MsgSolitaireRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSolitaireRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSolitaireRecoveryNtf}
 */
proto.MsgSolitaireRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedScore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSolitaireRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSolitaireRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSolitaireRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSolitaireRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 red_score = 1;
 * @return {number}
 */
proto.MsgSolitaireRecoveryNtf.prototype.getRedScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSolitaireRecoveryNtf.prototype.setRedScore = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSolitaireRecoveryNtf.prototype.clearRedScore = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSolitaireRecoveryNtf.prototype.hasRedScore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 blue_score = 2;
 * @return {number}
 */
proto.MsgSolitaireRecoveryNtf.prototype.getBlueScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSolitaireRecoveryNtf.prototype.setBlueScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSolitaireRecoveryNtf.prototype.clearBlueScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSolitaireRecoveryNtf.prototype.hasBlueScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBilliardsStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsStartNtf.displayName = 'proto.MsgBilliardsStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getField(msg, 1),
    delay: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsStartNtf}
 */
proto.MsgBilliardsStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsStartNtf;
  return proto.MsgBilliardsStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsStartNtf}
 */
proto.MsgBilliardsStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDelay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 time = 1;
 * @return {number}
 */
proto.MsgBilliardsStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 delay = 2;
 * @return {number}
 */
proto.MsgBilliardsStartNtf.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBilliardsStartNtf.prototype.setDelay = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBilliardsStartNtf.prototype.clearDelay = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsStartNtf.prototype.hasDelay = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BallInfoBean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BallInfoBean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BallInfoBean.displayName = 'proto.BallInfoBean';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BallInfoBean.prototype.toObject = function(opt_includeInstance) {
  return proto.BallInfoBean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BallInfoBean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BallInfoBean.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    posX: jspb.Message.getField(msg, 2),
    posY: jspb.Message.getField(msg, 3),
    posZ: jspb.Message.getField(msg, 4),
    velX: jspb.Message.getField(msg, 5),
    velY: jspb.Message.getField(msg, 6),
    velZ: jspb.Message.getField(msg, 7),
    angleVelX: jspb.Message.getField(msg, 8),
    angleVelY: jspb.Message.getField(msg, 9),
    angleVelZ: jspb.Message.getField(msg, 10),
    rotX: jspb.Message.getField(msg, 11),
    rotY: jspb.Message.getField(msg, 12),
    rotZ: jspb.Message.getField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BallInfoBean}
 */
proto.BallInfoBean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BallInfoBean;
  return proto.BallInfoBean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BallInfoBean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BallInfoBean}
 */
proto.BallInfoBean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosZ(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setVelX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setVelY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setVelZ(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setAngleVelX(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setAngleVelY(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setAngleVelZ(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRotX(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRotY(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRotZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BallInfoBean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BallInfoBean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BallInfoBean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BallInfoBean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeSint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeSint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeSint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeSint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeSint32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeSint32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeSint32(
      13,
      f
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.BallInfoBean.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BallInfoBean.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BallInfoBean.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BallInfoBean.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint32 pos_x = 2;
 * @return {number}
 */
proto.BallInfoBean.prototype.getPosX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BallInfoBean.prototype.setPosX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BallInfoBean.prototype.clearPosX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BallInfoBean.prototype.hasPosX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 pos_y = 3;
 * @return {number}
 */
proto.BallInfoBean.prototype.getPosY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BallInfoBean.prototype.setPosY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BallInfoBean.prototype.clearPosY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BallInfoBean.prototype.hasPosY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint32 pos_z = 4;
 * @return {number}
 */
proto.BallInfoBean.prototype.getPosZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BallInfoBean.prototype.setPosZ = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BallInfoBean.prototype.clearPosZ = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BallInfoBean.prototype.hasPosZ = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sint32 vel_x = 5;
 * @return {number}
 */
proto.BallInfoBean.prototype.getVelX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BallInfoBean.prototype.setVelX = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BallInfoBean.prototype.clearVelX = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BallInfoBean.prototype.hasVelX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint32 vel_y = 6;
 * @return {number}
 */
proto.BallInfoBean.prototype.getVelY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.BallInfoBean.prototype.setVelY = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.BallInfoBean.prototype.clearVelY = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BallInfoBean.prototype.hasVelY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional sint32 vel_z = 7;
 * @return {number}
 */
proto.BallInfoBean.prototype.getVelZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.BallInfoBean.prototype.setVelZ = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.BallInfoBean.prototype.clearVelZ = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BallInfoBean.prototype.hasVelZ = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional sint32 angle_vel_x = 8;
 * @return {number}
 */
proto.BallInfoBean.prototype.getAngleVelX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.BallInfoBean.prototype.setAngleVelX = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.BallInfoBean.prototype.clearAngleVelX = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BallInfoBean.prototype.hasAngleVelX = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional sint32 angle_vel_y = 9;
 * @return {number}
 */
proto.BallInfoBean.prototype.getAngleVelY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.BallInfoBean.prototype.setAngleVelY = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.BallInfoBean.prototype.clearAngleVelY = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BallInfoBean.prototype.hasAngleVelY = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional sint32 angle_vel_z = 10;
 * @return {number}
 */
proto.BallInfoBean.prototype.getAngleVelZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.BallInfoBean.prototype.setAngleVelZ = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.BallInfoBean.prototype.clearAngleVelZ = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BallInfoBean.prototype.hasAngleVelZ = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional sint32 rot_x = 11;
 * @return {number}
 */
proto.BallInfoBean.prototype.getRotX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.BallInfoBean.prototype.setRotX = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.BallInfoBean.prototype.clearRotX = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BallInfoBean.prototype.hasRotX = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional sint32 rot_y = 12;
 * @return {number}
 */
proto.BallInfoBean.prototype.getRotY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.BallInfoBean.prototype.setRotY = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.BallInfoBean.prototype.clearRotY = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BallInfoBean.prototype.hasRotY = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional sint32 rot_z = 13;
 * @return {number}
 */
proto.BallInfoBean.prototype.getRotZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.BallInfoBean.prototype.setRotZ = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.BallInfoBean.prototype.clearRotZ = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BallInfoBean.prototype.hasRotZ = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsBallSyncReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBilliardsBallSyncReq.repeatedFields_, null);
};
goog.inherits(proto.MsgBilliardsBallSyncReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsBallSyncReq.displayName = 'proto.MsgBilliardsBallSyncReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBilliardsBallSyncReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsBallSyncReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsBallSyncReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsBallSyncReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsBallSyncReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    ballList: jspb.Message.toObjectList(msg.getBallList(),
    proto.BallInfoBean.toObject, includeInstance),
    resetPos: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsBallSyncReq}
 */
proto.MsgBilliardsBallSyncReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsBallSyncReq;
  return proto.MsgBilliardsBallSyncReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsBallSyncReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsBallSyncReq}
 */
proto.MsgBilliardsBallSyncReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.BallInfoBean;
      reader.readMessage(value,proto.BallInfoBean.deserializeBinaryFromReader);
      msg.addBall(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResetPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsBallSyncReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsBallSyncReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsBallSyncReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsBallSyncReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBallList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.BallInfoBean.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBilliardsBallSyncReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsBallSyncReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsBallSyncReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsBallSyncReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated BallInfoBean ball = 2;
 * @return {!Array<!proto.BallInfoBean>}
 */
proto.MsgBilliardsBallSyncReq.prototype.getBallList = function() {
  return /** @type{!Array<!proto.BallInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BallInfoBean, 2));
};


/** @param {!Array<!proto.BallInfoBean>} value */
proto.MsgBilliardsBallSyncReq.prototype.setBallList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.BallInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BallInfoBean}
 */
proto.MsgBilliardsBallSyncReq.prototype.addBall = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.BallInfoBean, opt_index);
};


proto.MsgBilliardsBallSyncReq.prototype.clearBallList = function() {
  this.setBallList([]);
};


/**
 * optional bool reset_pos = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MsgBilliardsBallSyncReq.prototype.getResetPos = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.MsgBilliardsBallSyncReq.prototype.setResetPos = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBilliardsBallSyncReq.prototype.clearResetPos = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsBallSyncReq.prototype.hasResetPos = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsBallSyncNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBilliardsBallSyncNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgBilliardsBallSyncNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsBallSyncNtf.displayName = 'proto.MsgBilliardsBallSyncNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBilliardsBallSyncNtf.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsBallSyncNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsBallSyncNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsBallSyncNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsBallSyncNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    ballList: jspb.Message.toObjectList(msg.getBallList(),
    proto.BallInfoBean.toObject, includeInstance),
    resetPos: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsBallSyncNtf}
 */
proto.MsgBilliardsBallSyncNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsBallSyncNtf;
  return proto.MsgBilliardsBallSyncNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsBallSyncNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsBallSyncNtf}
 */
proto.MsgBilliardsBallSyncNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.BallInfoBean;
      reader.readMessage(value,proto.BallInfoBean.deserializeBinaryFromReader);
      msg.addBall(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResetPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsBallSyncNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsBallSyncNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsBallSyncNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsBallSyncNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBallList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.BallInfoBean.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBilliardsBallSyncNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsBallSyncNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsBallSyncNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsBallSyncNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated BallInfoBean ball = 2;
 * @return {!Array<!proto.BallInfoBean>}
 */
proto.MsgBilliardsBallSyncNtf.prototype.getBallList = function() {
  return /** @type{!Array<!proto.BallInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BallInfoBean, 2));
};


/** @param {!Array<!proto.BallInfoBean>} value */
proto.MsgBilliardsBallSyncNtf.prototype.setBallList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.BallInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BallInfoBean}
 */
proto.MsgBilliardsBallSyncNtf.prototype.addBall = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.BallInfoBean, opt_index);
};


proto.MsgBilliardsBallSyncNtf.prototype.clearBallList = function() {
  this.setBallList([]);
};


/**
 * optional bool reset_pos = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MsgBilliardsBallSyncNtf.prototype.getResetPos = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.MsgBilliardsBallSyncNtf.prototype.setResetPos = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBilliardsBallSyncNtf.prototype.clearResetPos = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsBallSyncNtf.prototype.hasResetPos = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsCueInfoSyncReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBilliardsCueInfoSyncReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsCueInfoSyncReq.displayName = 'proto.MsgBilliardsCueInfoSyncReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsCueInfoSyncReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsCueInfoSyncReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsCueInfoSyncReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    posX: jspb.Message.getField(msg, 2),
    posY: jspb.Message.getField(msg, 3),
    posZ: jspb.Message.getField(msg, 4),
    rotX: jspb.Message.getField(msg, 5),
    rotY: jspb.Message.getField(msg, 6),
    rotZ: jspb.Message.getField(msg, 7),
    active: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsCueInfoSyncReq}
 */
proto.MsgBilliardsCueInfoSyncReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsCueInfoSyncReq;
  return proto.MsgBilliardsCueInfoSyncReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsCueInfoSyncReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsCueInfoSyncReq}
 */
proto.MsgBilliardsCueInfoSyncReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosZ(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRotX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRotY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRotZ(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsCueInfoSyncReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsCueInfoSyncReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsCueInfoSyncReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeSint32(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsCueInfoSyncReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint32 pos_x = 2;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.getPosX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncReq.prototype.setPosX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBilliardsCueInfoSyncReq.prototype.clearPosX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.hasPosX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 pos_y = 3;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.getPosY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncReq.prototype.setPosY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBilliardsCueInfoSyncReq.prototype.clearPosY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.hasPosY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint32 pos_z = 4;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.getPosZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncReq.prototype.setPosZ = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgBilliardsCueInfoSyncReq.prototype.clearPosZ = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.hasPosZ = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sint32 rot_x = 5;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.getRotX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncReq.prototype.setRotX = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgBilliardsCueInfoSyncReq.prototype.clearRotX = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.hasRotX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint32 rot_y = 6;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.getRotY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncReq.prototype.setRotY = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgBilliardsCueInfoSyncReq.prototype.clearRotY = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.hasRotY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional sint32 rot_z = 7;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.getRotZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncReq.prototype.setRotZ = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgBilliardsCueInfoSyncReq.prototype.clearRotZ = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.hasRotZ = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool active = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.MsgBilliardsCueInfoSyncReq.prototype.setActive = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgBilliardsCueInfoSyncReq.prototype.clearActive = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncReq.prototype.hasActive = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsCueInfoSyncNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBilliardsCueInfoSyncNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsCueInfoSyncNtf.displayName = 'proto.MsgBilliardsCueInfoSyncNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsCueInfoSyncNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsCueInfoSyncNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsCueInfoSyncNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    posX: jspb.Message.getField(msg, 2),
    posY: jspb.Message.getField(msg, 3),
    posZ: jspb.Message.getField(msg, 4),
    rotX: jspb.Message.getField(msg, 5),
    rotY: jspb.Message.getField(msg, 6),
    rotZ: jspb.Message.getField(msg, 7),
    active: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsCueInfoSyncNtf}
 */
proto.MsgBilliardsCueInfoSyncNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsCueInfoSyncNtf;
  return proto.MsgBilliardsCueInfoSyncNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsCueInfoSyncNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsCueInfoSyncNtf}
 */
proto.MsgBilliardsCueInfoSyncNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosZ(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRotX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRotY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRotZ(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsCueInfoSyncNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsCueInfoSyncNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsCueInfoSyncNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeSint32(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsCueInfoSyncNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint32 pos_x = 2;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.getPosX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncNtf.prototype.setPosX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBilliardsCueInfoSyncNtf.prototype.clearPosX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.hasPosX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 pos_y = 3;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.getPosY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncNtf.prototype.setPosY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBilliardsCueInfoSyncNtf.prototype.clearPosY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.hasPosY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint32 pos_z = 4;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.getPosZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncNtf.prototype.setPosZ = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgBilliardsCueInfoSyncNtf.prototype.clearPosZ = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.hasPosZ = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sint32 rot_x = 5;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.getRotX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncNtf.prototype.setRotX = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgBilliardsCueInfoSyncNtf.prototype.clearRotX = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.hasRotX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint32 rot_y = 6;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.getRotY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncNtf.prototype.setRotY = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgBilliardsCueInfoSyncNtf.prototype.clearRotY = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.hasRotY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional sint32 rot_z = 7;
 * @return {number}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.getRotZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgBilliardsCueInfoSyncNtf.prototype.setRotZ = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgBilliardsCueInfoSyncNtf.prototype.clearRotZ = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.hasRotZ = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool active = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.MsgBilliardsCueInfoSyncNtf.prototype.setActive = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgBilliardsCueInfoSyncNtf.prototype.clearActive = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsCueInfoSyncNtf.prototype.hasActive = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsHitReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBilliardsHitReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsHitReq.displayName = 'proto.MsgBilliardsHitReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsHitReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsHitReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsHitReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsHitReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    posX: jspb.Message.getOptionalFloatingPointField(msg, 2),
    posY: jspb.Message.getOptionalFloatingPointField(msg, 3),
    posZ: jspb.Message.getOptionalFloatingPointField(msg, 4),
    powerX: jspb.Message.getOptionalFloatingPointField(msg, 5),
    powerY: jspb.Message.getOptionalFloatingPointField(msg, 6),
    powerZ: jspb.Message.getOptionalFloatingPointField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsHitReq}
 */
proto.MsgBilliardsHitReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsHitReq;
  return proto.MsgBilliardsHitReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsHitReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsHitReq}
 */
proto.MsgBilliardsHitReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosZ(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPowerX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPowerY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPowerZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsHitReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsHitReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsHitReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsHitReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBilliardsHitReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsHitReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsHitReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float pos_x = 2;
 * @return {number}
 */
proto.MsgBilliardsHitReq.prototype.getPosX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MsgBilliardsHitReq.prototype.setPosX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBilliardsHitReq.prototype.clearPosX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitReq.prototype.hasPosX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float pos_y = 3;
 * @return {number}
 */
proto.MsgBilliardsHitReq.prototype.getPosY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.MsgBilliardsHitReq.prototype.setPosY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBilliardsHitReq.prototype.clearPosY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitReq.prototype.hasPosY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float pos_z = 4;
 * @return {number}
 */
proto.MsgBilliardsHitReq.prototype.getPosZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.MsgBilliardsHitReq.prototype.setPosZ = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgBilliardsHitReq.prototype.clearPosZ = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitReq.prototype.hasPosZ = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float power_x = 5;
 * @return {number}
 */
proto.MsgBilliardsHitReq.prototype.getPowerX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.MsgBilliardsHitReq.prototype.setPowerX = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgBilliardsHitReq.prototype.clearPowerX = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitReq.prototype.hasPowerX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float power_y = 6;
 * @return {number}
 */
proto.MsgBilliardsHitReq.prototype.getPowerY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.MsgBilliardsHitReq.prototype.setPowerY = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgBilliardsHitReq.prototype.clearPowerY = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitReq.prototype.hasPowerY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float power_z = 7;
 * @return {number}
 */
proto.MsgBilliardsHitReq.prototype.getPowerZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.MsgBilliardsHitReq.prototype.setPowerZ = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgBilliardsHitReq.prototype.clearPowerZ = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitReq.prototype.hasPowerZ = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsHitNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBilliardsHitNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsHitNtf.displayName = 'proto.MsgBilliardsHitNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsHitNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsHitNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsHitNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsHitNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    posX: jspb.Message.getOptionalFloatingPointField(msg, 2),
    posY: jspb.Message.getOptionalFloatingPointField(msg, 3),
    posZ: jspb.Message.getOptionalFloatingPointField(msg, 4),
    powerX: jspb.Message.getOptionalFloatingPointField(msg, 5),
    powerY: jspb.Message.getOptionalFloatingPointField(msg, 6),
    powerZ: jspb.Message.getOptionalFloatingPointField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsHitNtf}
 */
proto.MsgBilliardsHitNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsHitNtf;
  return proto.MsgBilliardsHitNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsHitNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsHitNtf}
 */
proto.MsgBilliardsHitNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosZ(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPowerX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPowerY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPowerZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsHitNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsHitNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsHitNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsHitNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBilliardsHitNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsHitNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsHitNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float pos_x = 2;
 * @return {number}
 */
proto.MsgBilliardsHitNtf.prototype.getPosX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MsgBilliardsHitNtf.prototype.setPosX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBilliardsHitNtf.prototype.clearPosX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitNtf.prototype.hasPosX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float pos_y = 3;
 * @return {number}
 */
proto.MsgBilliardsHitNtf.prototype.getPosY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.MsgBilliardsHitNtf.prototype.setPosY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBilliardsHitNtf.prototype.clearPosY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitNtf.prototype.hasPosY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float pos_z = 4;
 * @return {number}
 */
proto.MsgBilliardsHitNtf.prototype.getPosZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.MsgBilliardsHitNtf.prototype.setPosZ = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgBilliardsHitNtf.prototype.clearPosZ = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitNtf.prototype.hasPosZ = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float power_x = 5;
 * @return {number}
 */
proto.MsgBilliardsHitNtf.prototype.getPowerX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.MsgBilliardsHitNtf.prototype.setPowerX = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgBilliardsHitNtf.prototype.clearPowerX = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitNtf.prototype.hasPowerX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float power_y = 6;
 * @return {number}
 */
proto.MsgBilliardsHitNtf.prototype.getPowerY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.MsgBilliardsHitNtf.prototype.setPowerY = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgBilliardsHitNtf.prototype.clearPowerY = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitNtf.prototype.hasPowerY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float power_z = 7;
 * @return {number}
 */
proto.MsgBilliardsHitNtf.prototype.getPowerZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.MsgBilliardsHitNtf.prototype.setPowerZ = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgBilliardsHitNtf.prototype.clearPowerZ = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsHitNtf.prototype.hasPowerZ = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsOverReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBilliardsOverReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsOverReq.displayName = 'proto.MsgBilliardsOverReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsOverReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsOverReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsOverReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsOverReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsOverReq}
 */
proto.MsgBilliardsOverReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsOverReq;
  return proto.MsgBilliardsOverReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsOverReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsOverReq}
 */
proto.MsgBilliardsOverReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsOverReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsOverReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsOverReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsOverReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBilliardsOverReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsOverReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsOverReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsOverReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBilliardsOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsOverNtf.displayName = 'proto.MsgBilliardsOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsOverNtf}
 */
proto.MsgBilliardsOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsOverNtf;
  return proto.MsgBilliardsOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsOverNtf}
 */
proto.MsgBilliardsOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgBilliardsOverNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsOverNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsOverNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsOverNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgBilliardsOverNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBilliardsOverNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBilliardsOverNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsOverNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsPlayerTurnReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBilliardsPlayerTurnReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsPlayerTurnReq.displayName = 'proto.MsgBilliardsPlayerTurnReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsPlayerTurnReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsPlayerTurnReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsPlayerTurnReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsPlayerTurnReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    turn: jspb.Message.getField(msg, 2),
    firstBallTouched: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsPlayerTurnReq}
 */
proto.MsgBilliardsPlayerTurnReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsPlayerTurnReq;
  return proto.MsgBilliardsPlayerTurnReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsPlayerTurnReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsPlayerTurnReq}
 */
proto.MsgBilliardsPlayerTurnReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTurn(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFirstBallTouched(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsPlayerTurnReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsPlayerTurnReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsPlayerTurnReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsPlayerTurnReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBilliardsPlayerTurnReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsPlayerTurnReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsPlayerTurnReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsPlayerTurnReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 turn = 2;
 * @return {number}
 */
proto.MsgBilliardsPlayerTurnReq.prototype.getTurn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBilliardsPlayerTurnReq.prototype.setTurn = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBilliardsPlayerTurnReq.prototype.clearTurn = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsPlayerTurnReq.prototype.hasTurn = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool first_ball_touched = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MsgBilliardsPlayerTurnReq.prototype.getFirstBallTouched = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.MsgBilliardsPlayerTurnReq.prototype.setFirstBallTouched = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBilliardsPlayerTurnReq.prototype.clearFirstBallTouched = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsPlayerTurnReq.prototype.hasFirstBallTouched = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsPlayerTurnNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBilliardsPlayerTurnNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsPlayerTurnNtf.displayName = 'proto.MsgBilliardsPlayerTurnNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsPlayerTurnNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsPlayerTurnNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsPlayerTurnNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsPlayerTurnNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    fault: jspb.Message.getField(msg, 2),
    firstBallTouched: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsPlayerTurnNtf}
 */
proto.MsgBilliardsPlayerTurnNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsPlayerTurnNtf;
  return proto.MsgBilliardsPlayerTurnNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsPlayerTurnNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsPlayerTurnNtf}
 */
proto.MsgBilliardsPlayerTurnNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFault(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFirstBallTouched(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsPlayerTurnNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsPlayerTurnNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsPlayerTurnNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsPlayerTurnNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBilliardsPlayerTurnNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsPlayerTurnNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsPlayerTurnNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsPlayerTurnNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 fault = 2;
 * @return {number}
 */
proto.MsgBilliardsPlayerTurnNtf.prototype.getFault = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBilliardsPlayerTurnNtf.prototype.setFault = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBilliardsPlayerTurnNtf.prototype.clearFault = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsPlayerTurnNtf.prototype.hasFault = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool first_ball_touched = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MsgBilliardsPlayerTurnNtf.prototype.getFirstBallTouched = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.MsgBilliardsPlayerTurnNtf.prototype.setFirstBallTouched = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBilliardsPlayerTurnNtf.prototype.clearFirstBallTouched = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsPlayerTurnNtf.prototype.hasFirstBallTouched = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsWhiteBallActionReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBilliardsWhiteBallActionReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsWhiteBallActionReq.displayName = 'proto.MsgBilliardsWhiteBallActionReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsWhiteBallActionReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsWhiteBallActionReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsWhiteBallActionReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsWhiteBallActionReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    dragging: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsWhiteBallActionReq}
 */
proto.MsgBilliardsWhiteBallActionReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsWhiteBallActionReq;
  return proto.MsgBilliardsWhiteBallActionReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsWhiteBallActionReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsWhiteBallActionReq}
 */
proto.MsgBilliardsWhiteBallActionReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDragging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsWhiteBallActionReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsWhiteBallActionReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsWhiteBallActionReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsWhiteBallActionReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBilliardsWhiteBallActionReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsWhiteBallActionReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsWhiteBallActionReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsWhiteBallActionReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool dragging = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MsgBilliardsWhiteBallActionReq.prototype.getDragging = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.MsgBilliardsWhiteBallActionReq.prototype.setDragging = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBilliardsWhiteBallActionReq.prototype.clearDragging = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsWhiteBallActionReq.prototype.hasDragging = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsWhiteBallActionNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBilliardsWhiteBallActionNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsWhiteBallActionNtf.displayName = 'proto.MsgBilliardsWhiteBallActionNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsWhiteBallActionNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsWhiteBallActionNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsWhiteBallActionNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsWhiteBallActionNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    dragging: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsWhiteBallActionNtf}
 */
proto.MsgBilliardsWhiteBallActionNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsWhiteBallActionNtf;
  return proto.MsgBilliardsWhiteBallActionNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsWhiteBallActionNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsWhiteBallActionNtf}
 */
proto.MsgBilliardsWhiteBallActionNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDragging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsWhiteBallActionNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsWhiteBallActionNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsWhiteBallActionNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsWhiteBallActionNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBilliardsWhiteBallActionNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsWhiteBallActionNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsWhiteBallActionNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsWhiteBallActionNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool dragging = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MsgBilliardsWhiteBallActionNtf.prototype.getDragging = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.MsgBilliardsWhiteBallActionNtf.prototype.setDragging = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBilliardsWhiteBallActionNtf.prototype.clearDragging = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsWhiteBallActionNtf.prototype.hasDragging = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RecoveryBallInfoBean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RecoveryBallInfoBean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RecoveryBallInfoBean.displayName = 'proto.RecoveryBallInfoBean';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RecoveryBallInfoBean.prototype.toObject = function(opt_includeInstance) {
  return proto.RecoveryBallInfoBean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RecoveryBallInfoBean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RecoveryBallInfoBean.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    posX: jspb.Message.getField(msg, 2),
    posY: jspb.Message.getField(msg, 3),
    posZ: jspb.Message.getField(msg, 4),
    rotX: jspb.Message.getField(msg, 5),
    rotY: jspb.Message.getField(msg, 6),
    rotZ: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RecoveryBallInfoBean}
 */
proto.RecoveryBallInfoBean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RecoveryBallInfoBean;
  return proto.RecoveryBallInfoBean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RecoveryBallInfoBean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RecoveryBallInfoBean}
 */
proto.RecoveryBallInfoBean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPosZ(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRotX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRotY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRotZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RecoveryBallInfoBean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RecoveryBallInfoBean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RecoveryBallInfoBean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RecoveryBallInfoBean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeSint32(
      7,
      f
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.RecoveryBallInfoBean.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RecoveryBallInfoBean.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.RecoveryBallInfoBean.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RecoveryBallInfoBean.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 pos_x = 2;
 * @return {number}
 */
proto.RecoveryBallInfoBean.prototype.getPosX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.RecoveryBallInfoBean.prototype.setPosX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.RecoveryBallInfoBean.prototype.clearPosX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RecoveryBallInfoBean.prototype.hasPosX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 pos_y = 3;
 * @return {number}
 */
proto.RecoveryBallInfoBean.prototype.getPosY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.RecoveryBallInfoBean.prototype.setPosY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.RecoveryBallInfoBean.prototype.clearPosY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RecoveryBallInfoBean.prototype.hasPosY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required sint32 pos_z = 4;
 * @return {number}
 */
proto.RecoveryBallInfoBean.prototype.getPosZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.RecoveryBallInfoBean.prototype.setPosZ = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.RecoveryBallInfoBean.prototype.clearPosZ = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RecoveryBallInfoBean.prototype.hasPosZ = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required sint32 rot_x = 5;
 * @return {number}
 */
proto.RecoveryBallInfoBean.prototype.getRotX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.RecoveryBallInfoBean.prototype.setRotX = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.RecoveryBallInfoBean.prototype.clearRotX = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RecoveryBallInfoBean.prototype.hasRotX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required sint32 rot_y = 6;
 * @return {number}
 */
proto.RecoveryBallInfoBean.prototype.getRotY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.RecoveryBallInfoBean.prototype.setRotY = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.RecoveryBallInfoBean.prototype.clearRotY = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RecoveryBallInfoBean.prototype.hasRotY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required sint32 rot_z = 7;
 * @return {number}
 */
proto.RecoveryBallInfoBean.prototype.getRotZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.RecoveryBallInfoBean.prototype.setRotZ = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.RecoveryBallInfoBean.prototype.clearRotZ = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RecoveryBallInfoBean.prototype.hasRotZ = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBilliardsRecoveryNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgBilliardsRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsRecoveryNtf.displayName = 'proto.MsgBilliardsRecoveryNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBilliardsRecoveryNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    ballsList: jspb.Message.toObjectList(msg.getBallsList(),
    proto.RecoveryBallInfoBean.toObject, includeInstance),
    leftTime: jspb.Message.getField(msg, 2),
    curUid: jspb.Message.getField(msg, 3),
    pause: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsRecoveryNtf}
 */
proto.MsgBilliardsRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsRecoveryNtf;
  return proto.MsgBilliardsRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsRecoveryNtf}
 */
proto.MsgBilliardsRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RecoveryBallInfoBean;
      reader.readMessage(value,proto.RecoveryBallInfoBean.deserializeBinaryFromReader);
      msg.addBalls(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurUid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPause(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.RecoveryBallInfoBean.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * repeated RecoveryBallInfoBean balls = 1;
 * @return {!Array<!proto.RecoveryBallInfoBean>}
 */
proto.MsgBilliardsRecoveryNtf.prototype.getBallsList = function() {
  return /** @type{!Array<!proto.RecoveryBallInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RecoveryBallInfoBean, 1));
};


/** @param {!Array<!proto.RecoveryBallInfoBean>} value */
proto.MsgBilliardsRecoveryNtf.prototype.setBallsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.RecoveryBallInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RecoveryBallInfoBean}
 */
proto.MsgBilliardsRecoveryNtf.prototype.addBalls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.RecoveryBallInfoBean, opt_index);
};


proto.MsgBilliardsRecoveryNtf.prototype.clearBallsList = function() {
  this.setBallsList([]);
};


/**
 * required uint32 left_time = 2;
 * @return {number}
 */
proto.MsgBilliardsRecoveryNtf.prototype.getLeftTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBilliardsRecoveryNtf.prototype.setLeftTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBilliardsRecoveryNtf.prototype.clearLeftTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsRecoveryNtf.prototype.hasLeftTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 cur_uid = 3;
 * @return {number}
 */
proto.MsgBilliardsRecoveryNtf.prototype.getCurUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgBilliardsRecoveryNtf.prototype.setCurUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBilliardsRecoveryNtf.prototype.clearCurUid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsRecoveryNtf.prototype.hasCurUid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required bool pause = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MsgBilliardsRecoveryNtf.prototype.getPause = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.MsgBilliardsRecoveryNtf.prototype.setPause = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgBilliardsRecoveryNtf.prototype.clearPause = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsRecoveryNtf.prototype.hasPause = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsSolidReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBilliardsSolidReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsSolidReq.displayName = 'proto.MsgBilliardsSolidReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsSolidReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsSolidReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsSolidReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsSolidReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsSolidReq}
 */
proto.MsgBilliardsSolidReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsSolidReq;
  return proto.MsgBilliardsSolidReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsSolidReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsSolidReq}
 */
proto.MsgBilliardsSolidReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsSolidReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsSolidReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsSolidReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsSolidReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBilliardsSolidReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsSolidReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsSolidReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsSolidReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBilliardsSolidNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBilliardsSolidNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBilliardsSolidNtf.displayName = 'proto.MsgBilliardsSolidNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBilliardsSolidNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBilliardsSolidNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBilliardsSolidNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsSolidNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBilliardsSolidNtf}
 */
proto.MsgBilliardsSolidNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBilliardsSolidNtf;
  return proto.MsgBilliardsSolidNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBilliardsSolidNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBilliardsSolidNtf}
 */
proto.MsgBilliardsSolidNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBilliardsSolidNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBilliardsSolidNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBilliardsSolidNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBilliardsSolidNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBilliardsSolidNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBilliardsSolidNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBilliardsSolidNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBilliardsSolidNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgChessStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgChessStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgChessStartNtf.displayName = 'proto.MsgChessStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgChessStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgChessStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgChessStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgChessStartNtf}
 */
proto.MsgChessStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgChessStartNtf;
  return proto.MsgChessStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgChessStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgChessStartNtf}
 */
proto.MsgChessStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgChessStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgChessStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgChessStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgChessStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgChessStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgChessStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgChessStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgChessStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgChessStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgChessStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgChessStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgChessStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgChessMoveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgChessMoveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgChessMoveReq.displayName = 'proto.MsgChessMoveReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgChessMoveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgChessMoveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgChessMoveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessMoveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    startX: jspb.Message.getField(msg, 1),
    startY: jspb.Message.getField(msg, 2),
    endX: jspb.Message.getField(msg, 3),
    endY: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgChessMoveReq}
 */
proto.MsgChessMoveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgChessMoveReq;
  return proto.MsgChessMoveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgChessMoveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgChessMoveReq}
 */
proto.MsgChessMoveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgChessMoveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgChessMoveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgChessMoveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessMoveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 start_x = 1;
 * @return {number}
 */
proto.MsgChessMoveReq.prototype.getStartX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgChessMoveReq.prototype.setStartX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgChessMoveReq.prototype.clearStartX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessMoveReq.prototype.hasStartX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 start_y = 2;
 * @return {number}
 */
proto.MsgChessMoveReq.prototype.getStartY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgChessMoveReq.prototype.setStartY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgChessMoveReq.prototype.clearStartY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessMoveReq.prototype.hasStartY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 end_x = 3;
 * @return {number}
 */
proto.MsgChessMoveReq.prototype.getEndX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgChessMoveReq.prototype.setEndX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgChessMoveReq.prototype.clearEndX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessMoveReq.prototype.hasEndX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 end_y = 4;
 * @return {number}
 */
proto.MsgChessMoveReq.prototype.getEndY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgChessMoveReq.prototype.setEndY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgChessMoveReq.prototype.clearEndY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessMoveReq.prototype.hasEndY = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgChessMoveRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgChessMoveRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgChessMoveRep.displayName = 'proto.MsgChessMoveRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgChessMoveRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgChessMoveRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgChessMoveRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessMoveRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgChessMoveRep}
 */
proto.MsgChessMoveRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgChessMoveRep;
  return proto.MsgChessMoveRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgChessMoveRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgChessMoveRep}
 */
proto.MsgChessMoveRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgChessMoveRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgChessMoveRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgChessMoveRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessMoveRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgChessMoveRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgChessMoveRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgChessMoveRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessMoveRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgChessMoveNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgChessMoveNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgChessMoveNtf.displayName = 'proto.MsgChessMoveNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgChessMoveNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgChessMoveNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgChessMoveNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessMoveNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    startX: jspb.Message.getField(msg, 1),
    startY: jspb.Message.getField(msg, 2),
    endX: jspb.Message.getField(msg, 3),
    endY: jspb.Message.getField(msg, 4),
    next: jspb.Message.getField(msg, 5),
    time: jspb.Message.getField(msg, 6),
    actionType: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgChessMoveNtf}
 */
proto.MsgChessMoveNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgChessMoveNtf;
  return proto.MsgChessMoveNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgChessMoveNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgChessMoveNtf}
 */
proto.MsgChessMoveNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgChessMoveNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgChessMoveNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgChessMoveNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessMoveNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * required uint32 start_x = 1;
 * @return {number}
 */
proto.MsgChessMoveNtf.prototype.getStartX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgChessMoveNtf.prototype.setStartX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgChessMoveNtf.prototype.clearStartX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessMoveNtf.prototype.hasStartX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 start_y = 2;
 * @return {number}
 */
proto.MsgChessMoveNtf.prototype.getStartY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgChessMoveNtf.prototype.setStartY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgChessMoveNtf.prototype.clearStartY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessMoveNtf.prototype.hasStartY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 end_x = 3;
 * @return {number}
 */
proto.MsgChessMoveNtf.prototype.getEndX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgChessMoveNtf.prototype.setEndX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgChessMoveNtf.prototype.clearEndX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessMoveNtf.prototype.hasEndX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 end_y = 4;
 * @return {number}
 */
proto.MsgChessMoveNtf.prototype.getEndY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgChessMoveNtf.prototype.setEndY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgChessMoveNtf.prototype.clearEndY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessMoveNtf.prototype.hasEndY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 next = 5;
 * @return {number}
 */
proto.MsgChessMoveNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgChessMoveNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgChessMoveNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessMoveNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 time = 6;
 * @return {number}
 */
proto.MsgChessMoveNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgChessMoveNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgChessMoveNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessMoveNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 action_type = 7;
 * @return {number}
 */
proto.MsgChessMoveNtf.prototype.getActionType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgChessMoveNtf.prototype.setActionType = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgChessMoveNtf.prototype.clearActionType = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessMoveNtf.prototype.hasActionType = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgChessBackNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgChessBackNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgChessBackNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgChessBackNtf.displayName = 'proto.MsgChessBackNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgChessBackNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgChessBackNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgChessBackNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgChessBackNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessBackNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    backList: jspb.Message.toObjectList(msg.getBackList(),
    common_pb.ChessInfo.toObject, includeInstance),
    next: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3),
    lastX: jspb.Message.getField(msg, 4),
    lastY: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgChessBackNtf}
 */
proto.MsgChessBackNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgChessBackNtf;
  return proto.MsgChessBackNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgChessBackNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgChessBackNtf}
 */
proto.MsgChessBackNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ChessInfo;
      reader.readMessage(value,common_pb.ChessInfo.deserializeBinaryFromReader);
      msg.addBack(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgChessBackNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgChessBackNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgChessBackNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessBackNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBackList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.ChessInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * repeated ChessInfo back = 1;
 * @return {!Array<!proto.ChessInfo>}
 */
proto.MsgChessBackNtf.prototype.getBackList = function() {
  return /** @type{!Array<!proto.ChessInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.ChessInfo, 1));
};


/** @param {!Array<!proto.ChessInfo>} value */
proto.MsgChessBackNtf.prototype.setBackList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ChessInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChessInfo}
 */
proto.MsgChessBackNtf.prototype.addBack = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ChessInfo, opt_index);
};


proto.MsgChessBackNtf.prototype.clearBackList = function() {
  this.setBackList([]);
};


/**
 * required uint32 next = 2;
 * @return {number}
 */
proto.MsgChessBackNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgChessBackNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgChessBackNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessBackNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgChessBackNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgChessBackNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgChessBackNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessBackNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 last_x = 4;
 * @return {number}
 */
proto.MsgChessBackNtf.prototype.getLastX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgChessBackNtf.prototype.setLastX = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgChessBackNtf.prototype.clearLastX = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessBackNtf.prototype.hasLastX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 last_y = 5;
 * @return {number}
 */
proto.MsgChessBackNtf.prototype.getLastY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgChessBackNtf.prototype.setLastY = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgChessBackNtf.prototype.clearLastY = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessBackNtf.prototype.hasLastY = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgChessResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgChessResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgChessResultNtf.displayName = 'proto.MsgChessResultNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgChessResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgChessResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgChessResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgChessResultNtf}
 */
proto.MsgChessResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgChessResultNtf;
  return proto.MsgChessResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgChessResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgChessResultNtf}
 */
proto.MsgChessResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgChessResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgChessResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgChessResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgChessResultNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgChessResultNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgChessResultNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessResultNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgChessResultNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgChessResultNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgChessResultNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessResultNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgChessRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgChessRecoveryNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgChessRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgChessRecoveryNtf.displayName = 'proto.MsgChessRecoveryNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgChessRecoveryNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgChessRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgChessRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgChessRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    common_pb.ChessInfo.toObject, includeInstance),
    next: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3),
    lastX: jspb.Message.getField(msg, 4),
    lastY: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgChessRecoveryNtf}
 */
proto.MsgChessRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgChessRecoveryNtf;
  return proto.MsgChessRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgChessRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgChessRecoveryNtf}
 */
proto.MsgChessRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ChessInfo;
      reader.readMessage(value,common_pb.ChessInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgChessRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgChessRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgChessRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChessRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.ChessInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * repeated ChessInfo info = 1;
 * @return {!Array<!proto.ChessInfo>}
 */
proto.MsgChessRecoveryNtf.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.ChessInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.ChessInfo, 1));
};


/** @param {!Array<!proto.ChessInfo>} value */
proto.MsgChessRecoveryNtf.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ChessInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChessInfo}
 */
proto.MsgChessRecoveryNtf.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ChessInfo, opt_index);
};


proto.MsgChessRecoveryNtf.prototype.clearInfoList = function() {
  this.setInfoList([]);
};


/**
 * required uint32 next = 2;
 * @return {number}
 */
proto.MsgChessRecoveryNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgChessRecoveryNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgChessRecoveryNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessRecoveryNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgChessRecoveryNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgChessRecoveryNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgChessRecoveryNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessRecoveryNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 last_x = 4;
 * @return {number}
 */
proto.MsgChessRecoveryNtf.prototype.getLastX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgChessRecoveryNtf.prototype.setLastX = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgChessRecoveryNtf.prototype.clearLastX = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessRecoveryNtf.prototype.hasLastX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 last_y = 5;
 * @return {number}
 */
proto.MsgChessRecoveryNtf.prototype.getLastY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgChessRecoveryNtf.prototype.setLastY = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgChessRecoveryNtf.prototype.clearLastY = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChessRecoveryNtf.prototype.hasLastY = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBalltowerStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBalltowerStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBalltowerStartNtf.displayName = 'proto.MsgBalltowerStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBalltowerStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBalltowerStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBalltowerStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3),
    seed: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBalltowerStartNtf}
 */
proto.MsgBalltowerStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBalltowerStartNtf;
  return proto.MsgBalltowerStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBalltowerStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBalltowerStartNtf}
 */
proto.MsgBalltowerStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBalltowerStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBalltowerStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBalltowerStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBalltowerStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBalltowerStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBalltowerStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgBalltowerStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBalltowerStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBalltowerStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgBalltowerStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgBalltowerStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBalltowerStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 seed = 4;
 * @return {number}
 */
proto.MsgBalltowerStartNtf.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgBalltowerStartNtf.prototype.setSeed = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgBalltowerStartNtf.prototype.clearSeed = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerStartNtf.prototype.hasSeed = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBalltowerScoreSyncReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBalltowerScoreSyncReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBalltowerScoreSyncReq.displayName = 'proto.MsgBalltowerScoreSyncReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBalltowerScoreSyncReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBalltowerScoreSyncReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBalltowerScoreSyncReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerScoreSyncReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBalltowerScoreSyncReq}
 */
proto.MsgBalltowerScoreSyncReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBalltowerScoreSyncReq;
  return proto.MsgBalltowerScoreSyncReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBalltowerScoreSyncReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBalltowerScoreSyncReq}
 */
proto.MsgBalltowerScoreSyncReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBalltowerScoreSyncReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBalltowerScoreSyncReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBalltowerScoreSyncReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerScoreSyncReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBalltowerScoreSyncReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBalltowerScoreSyncReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBalltowerScoreSyncReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerScoreSyncReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 score = 2;
 * @return {number}
 */
proto.MsgBalltowerScoreSyncReq.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBalltowerScoreSyncReq.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBalltowerScoreSyncReq.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerScoreSyncReq.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBalltowerScoreSyncNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBalltowerScoreSyncNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBalltowerScoreSyncNtf.displayName = 'proto.MsgBalltowerScoreSyncNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBalltowerScoreSyncNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBalltowerScoreSyncNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBalltowerScoreSyncNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerScoreSyncNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBalltowerScoreSyncNtf}
 */
proto.MsgBalltowerScoreSyncNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBalltowerScoreSyncNtf;
  return proto.MsgBalltowerScoreSyncNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBalltowerScoreSyncNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBalltowerScoreSyncNtf}
 */
proto.MsgBalltowerScoreSyncNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBalltowerScoreSyncNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBalltowerScoreSyncNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBalltowerScoreSyncNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerScoreSyncNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBalltowerScoreSyncNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBalltowerScoreSyncNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBalltowerScoreSyncNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerScoreSyncNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 score = 2;
 * @return {number}
 */
proto.MsgBalltowerScoreSyncNtf.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBalltowerScoreSyncNtf.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBalltowerScoreSyncNtf.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerScoreSyncNtf.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBalltowerInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBalltowerInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBalltowerInfoReq.displayName = 'proto.MsgBalltowerInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBalltowerInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBalltowerInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBalltowerInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    voice: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBalltowerInfoReq}
 */
proto.MsgBalltowerInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBalltowerInfoReq;
  return proto.MsgBalltowerInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBalltowerInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBalltowerInfoReq}
 */
proto.MsgBalltowerInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBalltowerInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBalltowerInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBalltowerInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBalltowerInfoReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBalltowerInfoReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBalltowerInfoReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerInfoReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 voice = 2;
 * @return {number}
 */
proto.MsgBalltowerInfoReq.prototype.getVoice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBalltowerInfoReq.prototype.setVoice = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBalltowerInfoReq.prototype.clearVoice = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerInfoReq.prototype.hasVoice = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBalltowerInfoNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBalltowerInfoNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBalltowerInfoNtf.displayName = 'proto.MsgBalltowerInfoNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBalltowerInfoNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBalltowerInfoNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBalltowerInfoNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerInfoNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    voice: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBalltowerInfoNtf}
 */
proto.MsgBalltowerInfoNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBalltowerInfoNtf;
  return proto.MsgBalltowerInfoNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBalltowerInfoNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBalltowerInfoNtf}
 */
proto.MsgBalltowerInfoNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBalltowerInfoNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBalltowerInfoNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBalltowerInfoNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerInfoNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgBalltowerInfoNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBalltowerInfoNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBalltowerInfoNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerInfoNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 voice = 2;
 * @return {number}
 */
proto.MsgBalltowerInfoNtf.prototype.getVoice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBalltowerInfoNtf.prototype.setVoice = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBalltowerInfoNtf.prototype.clearVoice = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerInfoNtf.prototype.hasVoice = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBalltowerOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBalltowerOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBalltowerOverNtf.displayName = 'proto.MsgBalltowerOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBalltowerOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBalltowerOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBalltowerOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBalltowerOverNtf}
 */
proto.MsgBalltowerOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBalltowerOverNtf;
  return proto.MsgBalltowerOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBalltowerOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBalltowerOverNtf}
 */
proto.MsgBalltowerOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBalltowerOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBalltowerOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBalltowerOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgBalltowerOverNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBalltowerOverNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBalltowerOverNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerOverNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgBalltowerOverNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBalltowerOverNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBalltowerOverNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerOverNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBalltowerRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBalltowerRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBalltowerRecoveryNtf.displayName = 'proto.MsgBalltowerRecoveryNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBalltowerRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBalltowerRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBalltowerRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    redUid: jspb.Message.getField(msg, 1),
    redScore: jspb.Message.getField(msg, 2),
    blueUid: jspb.Message.getField(msg, 3),
    blueScore: jspb.Message.getField(msg, 4),
    leftTime: jspb.Message.getField(msg, 5),
    gameStatus: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBalltowerRecoveryNtf}
 */
proto.MsgBalltowerRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBalltowerRecoveryNtf;
  return proto.MsgBalltowerRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBalltowerRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBalltowerRecoveryNtf}
 */
proto.MsgBalltowerRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueUid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueScore(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBalltowerRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBalltowerRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBalltowerRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBalltowerRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * required uint32 red_uid = 1;
 * @return {number}
 */
proto.MsgBalltowerRecoveryNtf.prototype.getRedUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBalltowerRecoveryNtf.prototype.setRedUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBalltowerRecoveryNtf.prototype.clearRedUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerRecoveryNtf.prototype.hasRedUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 red_score = 2;
 * @return {number}
 */
proto.MsgBalltowerRecoveryNtf.prototype.getRedScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBalltowerRecoveryNtf.prototype.setRedScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBalltowerRecoveryNtf.prototype.clearRedScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerRecoveryNtf.prototype.hasRedScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 blue_uid = 3;
 * @return {number}
 */
proto.MsgBalltowerRecoveryNtf.prototype.getBlueUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgBalltowerRecoveryNtf.prototype.setBlueUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBalltowerRecoveryNtf.prototype.clearBlueUid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerRecoveryNtf.prototype.hasBlueUid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 blue_score = 4;
 * @return {number}
 */
proto.MsgBalltowerRecoveryNtf.prototype.getBlueScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgBalltowerRecoveryNtf.prototype.setBlueScore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgBalltowerRecoveryNtf.prototype.clearBlueScore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerRecoveryNtf.prototype.hasBlueScore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 left_time = 5;
 * @return {number}
 */
proto.MsgBalltowerRecoveryNtf.prototype.getLeftTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgBalltowerRecoveryNtf.prototype.setLeftTime = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgBalltowerRecoveryNtf.prototype.clearLeftTime = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerRecoveryNtf.prototype.hasLeftTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 game_status = 6;
 * @return {number}
 */
proto.MsgBalltowerRecoveryNtf.prototype.getGameStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgBalltowerRecoveryNtf.prototype.setGameStatus = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgBalltowerRecoveryNtf.prototype.clearGameStatus = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBalltowerRecoveryNtf.prototype.hasGameStatus = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Army = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Army, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Army.displayName = 'proto.Army';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Army.prototype.toObject = function(opt_includeInstance) {
  return proto.Army.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Army} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Army.toObject = function(includeInstance, msg) {
  var f, obj = {
    armyType: jspb.Message.getField(msg, 1),
    armyColor: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Army}
 */
proto.Army.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Army;
  return proto.Army.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Army} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Army}
 */
proto.Army.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArmyType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArmyColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Army.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Army.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Army} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Army.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 army_type = 1;
 * @return {number}
 */
proto.Army.prototype.getArmyType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Army.prototype.setArmyType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Army.prototype.clearArmyType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Army.prototype.hasArmyType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 army_color = 2;
 * @return {number}
 */
proto.Army.prototype.getArmyColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Army.prototype.setArmyColor = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Army.prototype.clearArmyColor = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Army.prototype.hasArmyColor = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArmychessStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArmychessStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArmychessStartNtf.displayName = 'proto.MsgArmychessStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArmychessStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArmychessStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArmychessStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2),
    pkType: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArmychessStartNtf}
 */
proto.MsgArmychessStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArmychessStartNtf;
  return proto.MsgArmychessStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArmychessStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArmychessStartNtf}
 */
proto.MsgArmychessStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArmychessStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArmychessStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArmychessStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 time = 1;
 * @return {number}
 */
proto.MsgArmychessStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArmychessStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArmychessStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgArmychessStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArmychessStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArmychessStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 pk_type = 3;
 * @return {number}
 */
proto.MsgArmychessStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgArmychessStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArmychessStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArmychessOperateNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArmychessOperateNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArmychessOperateNtf.displayName = 'proto.MsgArmychessOperateNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArmychessOperateNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArmychessOperateNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArmychessOperateNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessOperateNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    timeoutCnt: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArmychessOperateNtf}
 */
proto.MsgArmychessOperateNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArmychessOperateNtf;
  return proto.MsgArmychessOperateNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArmychessOperateNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArmychessOperateNtf}
 */
proto.MsgArmychessOperateNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeoutCnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArmychessOperateNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArmychessOperateNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArmychessOperateNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessOperateNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgArmychessOperateNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArmychessOperateNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArmychessOperateNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOperateNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 timeout_cnt = 2;
 * @return {number}
 */
proto.MsgArmychessOperateNtf.prototype.getTimeoutCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArmychessOperateNtf.prototype.setTimeoutCnt = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArmychessOperateNtf.prototype.clearTimeoutCnt = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOperateNtf.prototype.hasTimeoutCnt = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArmychessOpenReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArmychessOpenReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArmychessOpenReq.displayName = 'proto.MsgArmychessOpenReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArmychessOpenReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArmychessOpenReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArmychessOpenReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessOpenReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArmychessOpenReq}
 */
proto.MsgArmychessOpenReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArmychessOpenReq;
  return proto.MsgArmychessOpenReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArmychessOpenReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArmychessOpenReq}
 */
proto.MsgArmychessOpenReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArmychessOpenReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArmychessOpenReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArmychessOpenReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessOpenReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.MsgArmychessOpenReq.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArmychessOpenReq.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArmychessOpenReq.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOpenReq.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.MsgArmychessOpenReq.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArmychessOpenReq.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArmychessOpenReq.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOpenReq.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArmychessOpenRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArmychessOpenRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArmychessOpenRep.displayName = 'proto.MsgArmychessOpenRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArmychessOpenRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArmychessOpenRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArmychessOpenRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessOpenRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArmychessOpenRep}
 */
proto.MsgArmychessOpenRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArmychessOpenRep;
  return proto.MsgArmychessOpenRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArmychessOpenRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArmychessOpenRep}
 */
proto.MsgArmychessOpenRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArmychessOpenRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArmychessOpenRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArmychessOpenRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessOpenRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgArmychessOpenRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArmychessOpenRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArmychessOpenRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOpenRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArmychessOpenNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArmychessOpenNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArmychessOpenNtf.displayName = 'proto.MsgArmychessOpenNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArmychessOpenNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArmychessOpenNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArmychessOpenNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessOpenNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    x: jspb.Message.getField(msg, 2),
    y: jspb.Message.getField(msg, 3),
    armyChess: (f = msg.getArmyChess()) && proto.Army.toObject(includeInstance, f),
    next: jspb.Message.getField(msg, 5),
    pkType: jspb.Message.getField(msg, 6),
    steps: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArmychessOpenNtf}
 */
proto.MsgArmychessOpenNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArmychessOpenNtf;
  return proto.MsgArmychessOpenNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArmychessOpenNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArmychessOpenNtf}
 */
proto.MsgArmychessOpenNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    case 4:
      var value = new proto.Army;
      reader.readMessage(value,proto.Army.deserializeBinaryFromReader);
      msg.setArmyChess(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSteps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArmychessOpenNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArmychessOpenNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArmychessOpenNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessOpenNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getArmyChess();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Army.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgArmychessOpenNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArmychessOpenNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArmychessOpenNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOpenNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 x = 2;
 * @return {number}
 */
proto.MsgArmychessOpenNtf.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArmychessOpenNtf.prototype.setX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArmychessOpenNtf.prototype.clearX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOpenNtf.prototype.hasX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 y = 3;
 * @return {number}
 */
proto.MsgArmychessOpenNtf.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgArmychessOpenNtf.prototype.setY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArmychessOpenNtf.prototype.clearY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOpenNtf.prototype.hasY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required Army army_chess = 4;
 * @return {!proto.Army}
 */
proto.MsgArmychessOpenNtf.prototype.getArmyChess = function() {
  return /** @type{!proto.Army} */ (
    jspb.Message.getWrapperField(this, proto.Army, 4, 1));
};


/** @param {!proto.Army} value */
proto.MsgArmychessOpenNtf.prototype.setArmyChess = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.MsgArmychessOpenNtf.prototype.clearArmyChess = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOpenNtf.prototype.hasArmyChess = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 next = 5;
 * @return {number}
 */
proto.MsgArmychessOpenNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgArmychessOpenNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgArmychessOpenNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOpenNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 pk_type = 6;
 * @return {number}
 */
proto.MsgArmychessOpenNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgArmychessOpenNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgArmychessOpenNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOpenNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 steps = 7;
 * @return {number}
 */
proto.MsgArmychessOpenNtf.prototype.getSteps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgArmychessOpenNtf.prototype.setSteps = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgArmychessOpenNtf.prototype.clearSteps = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOpenNtf.prototype.hasSteps = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArmychessMoveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArmychessMoveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArmychessMoveReq.displayName = 'proto.MsgArmychessMoveReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArmychessMoveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArmychessMoveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArmychessMoveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessMoveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    startX: jspb.Message.getField(msg, 1),
    startY: jspb.Message.getField(msg, 2),
    endX: jspb.Message.getField(msg, 3),
    endY: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArmychessMoveReq}
 */
proto.MsgArmychessMoveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArmychessMoveReq;
  return proto.MsgArmychessMoveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArmychessMoveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArmychessMoveReq}
 */
proto.MsgArmychessMoveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArmychessMoveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArmychessMoveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArmychessMoveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessMoveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 start_x = 1;
 * @return {number}
 */
proto.MsgArmychessMoveReq.prototype.getStartX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArmychessMoveReq.prototype.setStartX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArmychessMoveReq.prototype.clearStartX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessMoveReq.prototype.hasStartX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 start_y = 2;
 * @return {number}
 */
proto.MsgArmychessMoveReq.prototype.getStartY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArmychessMoveReq.prototype.setStartY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArmychessMoveReq.prototype.clearStartY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessMoveReq.prototype.hasStartY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 end_x = 3;
 * @return {number}
 */
proto.MsgArmychessMoveReq.prototype.getEndX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgArmychessMoveReq.prototype.setEndX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArmychessMoveReq.prototype.clearEndX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessMoveReq.prototype.hasEndX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 end_y = 4;
 * @return {number}
 */
proto.MsgArmychessMoveReq.prototype.getEndY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgArmychessMoveReq.prototype.setEndY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgArmychessMoveReq.prototype.clearEndY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessMoveReq.prototype.hasEndY = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArmychessMoveRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArmychessMoveRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArmychessMoveRep.displayName = 'proto.MsgArmychessMoveRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArmychessMoveRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArmychessMoveRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArmychessMoveRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessMoveRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArmychessMoveRep}
 */
proto.MsgArmychessMoveRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArmychessMoveRep;
  return proto.MsgArmychessMoveRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArmychessMoveRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArmychessMoveRep}
 */
proto.MsgArmychessMoveRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArmychessMoveRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArmychessMoveRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArmychessMoveRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessMoveRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgArmychessMoveRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArmychessMoveRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArmychessMoveRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessMoveRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArmychessMoveNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArmychessMoveNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArmychessMoveNtf.displayName = 'proto.MsgArmychessMoveNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArmychessMoveNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArmychessMoveNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArmychessMoveNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessMoveNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    startX: jspb.Message.getField(msg, 1),
    startY: jspb.Message.getField(msg, 2),
    endX: jspb.Message.getField(msg, 3),
    endY: jspb.Message.getField(msg, 4),
    moveType: jspb.Message.getField(msg, 5),
    next: jspb.Message.getField(msg, 6),
    steps: jspb.Message.getField(msg, 7),
    uid: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArmychessMoveNtf}
 */
proto.MsgArmychessMoveNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArmychessMoveNtf;
  return proto.MsgArmychessMoveNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArmychessMoveNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArmychessMoveNtf}
 */
proto.MsgArmychessMoveNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMoveType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNext(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSteps(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArmychessMoveNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArmychessMoveNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArmychessMoveNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessMoveNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * required uint32 start_x = 1;
 * @return {number}
 */
proto.MsgArmychessMoveNtf.prototype.getStartX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArmychessMoveNtf.prototype.setStartX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArmychessMoveNtf.prototype.clearStartX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessMoveNtf.prototype.hasStartX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 start_y = 2;
 * @return {number}
 */
proto.MsgArmychessMoveNtf.prototype.getStartY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArmychessMoveNtf.prototype.setStartY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArmychessMoveNtf.prototype.clearStartY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessMoveNtf.prototype.hasStartY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 end_x = 3;
 * @return {number}
 */
proto.MsgArmychessMoveNtf.prototype.getEndX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgArmychessMoveNtf.prototype.setEndX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArmychessMoveNtf.prototype.clearEndX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessMoveNtf.prototype.hasEndX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 end_y = 4;
 * @return {number}
 */
proto.MsgArmychessMoveNtf.prototype.getEndY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgArmychessMoveNtf.prototype.setEndY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgArmychessMoveNtf.prototype.clearEndY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessMoveNtf.prototype.hasEndY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 move_type = 5;
 * @return {number}
 */
proto.MsgArmychessMoveNtf.prototype.getMoveType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgArmychessMoveNtf.prototype.setMoveType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgArmychessMoveNtf.prototype.clearMoveType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessMoveNtf.prototype.hasMoveType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 next = 6;
 * @return {number}
 */
proto.MsgArmychessMoveNtf.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgArmychessMoveNtf.prototype.setNext = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgArmychessMoveNtf.prototype.clearNext = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessMoveNtf.prototype.hasNext = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 steps = 7;
 * @return {number}
 */
proto.MsgArmychessMoveNtf.prototype.getSteps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgArmychessMoveNtf.prototype.setSteps = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgArmychessMoveNtf.prototype.clearSteps = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessMoveNtf.prototype.hasSteps = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 uid = 8;
 * @return {number}
 */
proto.MsgArmychessMoveNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.MsgArmychessMoveNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgArmychessMoveNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessMoveNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArmychessOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArmychessOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArmychessOverNtf.displayName = 'proto.MsgArmychessOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArmychessOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArmychessOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArmychessOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArmychessOverNtf}
 */
proto.MsgArmychessOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArmychessOverNtf;
  return proto.MsgArmychessOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArmychessOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArmychessOverNtf}
 */
proto.MsgArmychessOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArmychessOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArmychessOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArmychessOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgArmychessOverNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArmychessOverNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArmychessOverNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOverNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgArmychessOverNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArmychessOverNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArmychessOverNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessOverNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArmyChessInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgArmyChessInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArmyChessInfo.displayName = 'proto.MsgArmyChessInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArmyChessInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArmyChessInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArmyChessInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmyChessInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2),
    display: jspb.Message.getField(msg, 3),
    armyChess: (f = msg.getArmyChess()) && proto.Army.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArmyChessInfo}
 */
proto.MsgArmyChessInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArmyChessInfo;
  return proto.MsgArmyChessInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArmyChessInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArmyChessInfo}
 */
proto.MsgArmyChessInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisplay(value);
      break;
    case 4:
      var value = new proto.Army;
      reader.readMessage(value,proto.Army.deserializeBinaryFromReader);
      msg.setArmyChess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArmyChessInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArmyChessInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArmyChessInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmyChessInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getArmyChess();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Army.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.MsgArmyChessInfo.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgArmyChessInfo.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgArmyChessInfo.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmyChessInfo.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.MsgArmyChessInfo.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArmyChessInfo.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArmyChessInfo.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmyChessInfo.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool display = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MsgArmyChessInfo.prototype.getDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.MsgArmyChessInfo.prototype.setDisplay = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArmyChessInfo.prototype.clearDisplay = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmyChessInfo.prototype.hasDisplay = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required Army army_chess = 4;
 * @return {!proto.Army}
 */
proto.MsgArmyChessInfo.prototype.getArmyChess = function() {
  return /** @type{!proto.Army} */ (
    jspb.Message.getWrapperField(this, proto.Army, 4, 1));
};


/** @param {!proto.Army} value */
proto.MsgArmyChessInfo.prototype.setArmyChess = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.MsgArmyChessInfo.prototype.clearArmyChess = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmyChessInfo.prototype.hasArmyChess = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgArmychessRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgArmychessRecoveryNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgArmychessRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgArmychessRecoveryNtf.displayName = 'proto.MsgArmychessRecoveryNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgArmychessRecoveryNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgArmychessRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgArmychessRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgArmychessRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    chessList: jspb.Message.toObjectList(msg.getChessList(),
    proto.MsgArmyChessInfo.toObject, includeInstance),
    leftTime: jspb.Message.getField(msg, 2),
    curUid: jspb.Message.getField(msg, 3),
    curCamp: jspb.Message.getField(msg, 4),
    redChess: (f = msg.getRedChess()) && proto.Army.toObject(includeInstance, f),
    blueChess: (f = msg.getBlueChess()) && proto.Army.toObject(includeInstance, f),
    lastSrcX: jspb.Message.getField(msg, 7),
    lastSrcY: jspb.Message.getField(msg, 8),
    lastDstX: jspb.Message.getField(msg, 9),
    lastDstY: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgArmychessRecoveryNtf}
 */
proto.MsgArmychessRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgArmychessRecoveryNtf;
  return proto.MsgArmychessRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgArmychessRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgArmychessRecoveryNtf}
 */
proto.MsgArmychessRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgArmyChessInfo;
      reader.readMessage(value,proto.MsgArmyChessInfo.deserializeBinaryFromReader);
      msg.addChess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurUid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurCamp(value);
      break;
    case 5:
      var value = new proto.Army;
      reader.readMessage(value,proto.Army.deserializeBinaryFromReader);
      msg.setRedChess(value);
      break;
    case 6:
      var value = new proto.Army;
      reader.readMessage(value,proto.Army.deserializeBinaryFromReader);
      msg.setBlueChess(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastSrcX(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastSrcY(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastDstX(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastDstY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgArmychessRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgArmychessRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgArmychessRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgArmychessRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChessList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MsgArmyChessInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getRedChess();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Army.serializeBinaryToWriter
    );
  }
  f = message.getBlueChess();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Army.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * repeated MsgArmyChessInfo chess = 1;
 * @return {!Array<!proto.MsgArmyChessInfo>}
 */
proto.MsgArmychessRecoveryNtf.prototype.getChessList = function() {
  return /** @type{!Array<!proto.MsgArmyChessInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgArmyChessInfo, 1));
};


/** @param {!Array<!proto.MsgArmyChessInfo>} value */
proto.MsgArmychessRecoveryNtf.prototype.setChessList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MsgArmyChessInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgArmyChessInfo}
 */
proto.MsgArmychessRecoveryNtf.prototype.addChess = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MsgArmyChessInfo, opt_index);
};


proto.MsgArmychessRecoveryNtf.prototype.clearChessList = function() {
  this.setChessList([]);
};


/**
 * required uint32 left_time = 2;
 * @return {number}
 */
proto.MsgArmychessRecoveryNtf.prototype.getLeftTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgArmychessRecoveryNtf.prototype.setLeftTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgArmychessRecoveryNtf.prototype.clearLeftTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessRecoveryNtf.prototype.hasLeftTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 cur_uid = 3;
 * @return {number}
 */
proto.MsgArmychessRecoveryNtf.prototype.getCurUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgArmychessRecoveryNtf.prototype.setCurUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgArmychessRecoveryNtf.prototype.clearCurUid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessRecoveryNtf.prototype.hasCurUid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 cur_camp = 4;
 * @return {number}
 */
proto.MsgArmychessRecoveryNtf.prototype.getCurCamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgArmychessRecoveryNtf.prototype.setCurCamp = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgArmychessRecoveryNtf.prototype.clearCurCamp = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessRecoveryNtf.prototype.hasCurCamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Army red_chess = 5;
 * @return {?proto.Army}
 */
proto.MsgArmychessRecoveryNtf.prototype.getRedChess = function() {
  return /** @type{?proto.Army} */ (
    jspb.Message.getWrapperField(this, proto.Army, 5));
};


/** @param {?proto.Army|undefined} value */
proto.MsgArmychessRecoveryNtf.prototype.setRedChess = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.MsgArmychessRecoveryNtf.prototype.clearRedChess = function() {
  this.setRedChess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessRecoveryNtf.prototype.hasRedChess = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Army blue_chess = 6;
 * @return {?proto.Army}
 */
proto.MsgArmychessRecoveryNtf.prototype.getBlueChess = function() {
  return /** @type{?proto.Army} */ (
    jspb.Message.getWrapperField(this, proto.Army, 6));
};


/** @param {?proto.Army|undefined} value */
proto.MsgArmychessRecoveryNtf.prototype.setBlueChess = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.MsgArmychessRecoveryNtf.prototype.clearBlueChess = function() {
  this.setBlueChess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessRecoveryNtf.prototype.hasBlueChess = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 last_src_x = 7;
 * @return {number}
 */
proto.MsgArmychessRecoveryNtf.prototype.getLastSrcX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgArmychessRecoveryNtf.prototype.setLastSrcX = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgArmychessRecoveryNtf.prototype.clearLastSrcX = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessRecoveryNtf.prototype.hasLastSrcX = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 last_src_y = 8;
 * @return {number}
 */
proto.MsgArmychessRecoveryNtf.prototype.getLastSrcY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.MsgArmychessRecoveryNtf.prototype.setLastSrcY = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgArmychessRecoveryNtf.prototype.clearLastSrcY = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessRecoveryNtf.prototype.hasLastSrcY = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 last_dst_x = 9;
 * @return {number}
 */
proto.MsgArmychessRecoveryNtf.prototype.getLastDstX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.MsgArmychessRecoveryNtf.prototype.setLastDstX = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.MsgArmychessRecoveryNtf.prototype.clearLastDstX = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessRecoveryNtf.prototype.hasLastDstX = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 last_dst_y = 10;
 * @return {number}
 */
proto.MsgArmychessRecoveryNtf.prototype.getLastDstY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.MsgArmychessRecoveryNtf.prototype.setLastDstY = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.MsgArmychessRecoveryNtf.prototype.clearLastDstY = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgArmychessRecoveryNtf.prototype.hasLastDstY = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NitpickKeys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NitpickKeys.repeatedFields_, null);
};
goog.inherits(proto.NitpickKeys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NitpickKeys.displayName = 'proto.NitpickKeys';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NitpickKeys.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NitpickKeys.prototype.toObject = function(opt_includeInstance) {
  return proto.NitpickKeys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NitpickKeys} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NitpickKeys.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getField(msg, 1),
    count: jspb.Message.getField(msg, 2),
    indexsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NitpickKeys}
 */
proto.NitpickKeys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NitpickKeys;
  return proto.NitpickKeys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NitpickKeys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NitpickKeys}
 */
proto.NitpickKeys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addIndexs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NitpickKeys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NitpickKeys.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NitpickKeys} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NitpickKeys.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getIndexsList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      3,
      f
    );
  }
};


/**
 * required string key = 1;
 * @return {string}
 */
proto.NitpickKeys.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NitpickKeys.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.NitpickKeys.prototype.clearKey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NitpickKeys.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 count = 2;
 * @return {number}
 */
proto.NitpickKeys.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.NitpickKeys.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.NitpickKeys.prototype.clearCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NitpickKeys.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated uint32 indexs = 3;
 * @return {!Array<number>}
 */
proto.NitpickKeys.prototype.getIndexsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.NitpickKeys.prototype.setIndexsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.NitpickKeys.prototype.addIndexs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.NitpickKeys.prototype.clearIndexsList = function() {
  this.setIndexsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NitpickImageData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NitpickImageData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NitpickImageData.displayName = 'proto.NitpickImageData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NitpickImageData.prototype.toObject = function(opt_includeInstance) {
  return proto.NitpickImageData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NitpickImageData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NitpickImageData.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2),
    imageName: jspb.Message.getField(msg, 3),
    index: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NitpickImageData}
 */
proto.NitpickImageData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NitpickImageData;
  return proto.NitpickImageData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NitpickImageData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NitpickImageData}
 */
proto.NitpickImageData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NitpickImageData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NitpickImageData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NitpickImageData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NitpickImageData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.NitpickImageData.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NitpickImageData.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.NitpickImageData.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NitpickImageData.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.NitpickImageData.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.NitpickImageData.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.NitpickImageData.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NitpickImageData.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string image_name = 3;
 * @return {string}
 */
proto.NitpickImageData.prototype.getImageName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.NitpickImageData.prototype.setImageName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.NitpickImageData.prototype.clearImageName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NitpickImageData.prototype.hasImageName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 index = 4;
 * @return {number}
 */
proto.NitpickImageData.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.NitpickImageData.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.NitpickImageData.prototype.clearIndex = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NitpickImageData.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgNitpickStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgNitpickStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgNitpickStartNtf.displayName = 'proto.MsgNitpickStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgNitpickStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgNitpickStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgNitpickStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    redUid: jspb.Message.getField(msg, 1),
    blueUid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgNitpickStartNtf}
 */
proto.MsgNitpickStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgNitpickStartNtf;
  return proto.MsgNitpickStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgNitpickStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgNitpickStartNtf}
 */
proto.MsgNitpickStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgNitpickStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgNitpickStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgNitpickStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 red_uid = 1;
 * @return {number}
 */
proto.MsgNitpickStartNtf.prototype.getRedUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgNitpickStartNtf.prototype.setRedUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgNitpickStartNtf.prototype.clearRedUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickStartNtf.prototype.hasRedUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 blue_uid = 2;
 * @return {number}
 */
proto.MsgNitpickStartNtf.prototype.getBlueUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgNitpickStartNtf.prototype.setBlueUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgNitpickStartNtf.prototype.clearBlueUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickStartNtf.prototype.hasBlueUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgNitpickRoundStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgNitpickRoundStartNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgNitpickRoundStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgNitpickRoundStartNtf.displayName = 'proto.MsgNitpickRoundStartNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgNitpickRoundStartNtf.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgNitpickRoundStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgNitpickRoundStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgNitpickRoundStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickRoundStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getField(msg, 1),
    time: jspb.Message.getField(msg, 2),
    propCnt: jspb.Message.getField(msg, 3),
    nitKeysList: jspb.Message.toObjectList(msg.getNitKeysList(),
    proto.NitpickKeys.toObject, includeInstance),
    imgDataList: jspb.Message.toObjectList(msg.getImgDataList(),
    proto.NitpickImageData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgNitpickRoundStartNtf}
 */
proto.MsgNitpickRoundStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgNitpickRoundStartNtf;
  return proto.MsgNitpickRoundStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgNitpickRoundStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgNitpickRoundStartNtf}
 */
proto.MsgNitpickRoundStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPropCnt(value);
      break;
    case 4:
      var value = new proto.NitpickKeys;
      reader.readMessage(value,proto.NitpickKeys.deserializeBinaryFromReader);
      msg.addNitKeys(value);
      break;
    case 5:
      var value = new proto.NitpickImageData;
      reader.readMessage(value,proto.NitpickImageData.deserializeBinaryFromReader);
      msg.addImgData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgNitpickRoundStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgNitpickRoundStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgNitpickRoundStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickRoundStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getNitKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.NitpickKeys.serializeBinaryToWriter
    );
  }
  f = message.getImgDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.NitpickImageData.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 round = 1;
 * @return {number}
 */
proto.MsgNitpickRoundStartNtf.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgNitpickRoundStartNtf.prototype.setRound = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgNitpickRoundStartNtf.prototype.clearRound = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickRoundStartNtf.prototype.hasRound = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 time = 2;
 * @return {number}
 */
proto.MsgNitpickRoundStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgNitpickRoundStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgNitpickRoundStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickRoundStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 prop_cnt = 3;
 * @return {number}
 */
proto.MsgNitpickRoundStartNtf.prototype.getPropCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgNitpickRoundStartNtf.prototype.setPropCnt = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgNitpickRoundStartNtf.prototype.clearPropCnt = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickRoundStartNtf.prototype.hasPropCnt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated NitpickKeys nit_keys = 4;
 * @return {!Array<!proto.NitpickKeys>}
 */
proto.MsgNitpickRoundStartNtf.prototype.getNitKeysList = function() {
  return /** @type{!Array<!proto.NitpickKeys>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NitpickKeys, 4));
};


/** @param {!Array<!proto.NitpickKeys>} value */
proto.MsgNitpickRoundStartNtf.prototype.setNitKeysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.NitpickKeys=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NitpickKeys}
 */
proto.MsgNitpickRoundStartNtf.prototype.addNitKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.NitpickKeys, opt_index);
};


proto.MsgNitpickRoundStartNtf.prototype.clearNitKeysList = function() {
  this.setNitKeysList([]);
};


/**
 * repeated NitpickImageData img_data = 5;
 * @return {!Array<!proto.NitpickImageData>}
 */
proto.MsgNitpickRoundStartNtf.prototype.getImgDataList = function() {
  return /** @type{!Array<!proto.NitpickImageData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NitpickImageData, 5));
};


/** @param {!Array<!proto.NitpickImageData>} value */
proto.MsgNitpickRoundStartNtf.prototype.setImgDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.NitpickImageData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NitpickImageData}
 */
proto.MsgNitpickRoundStartNtf.prototype.addImgData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.NitpickImageData, opt_index);
};


proto.MsgNitpickRoundStartNtf.prototype.clearImgDataList = function() {
  this.setImgDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgNitpickSyncScoreReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgNitpickSyncScoreReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgNitpickSyncScoreReq.displayName = 'proto.MsgNitpickSyncScoreReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgNitpickSyncScoreReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgNitpickSyncScoreReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgNitpickSyncScoreReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickSyncScoreReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    count: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgNitpickSyncScoreReq}
 */
proto.MsgNitpickSyncScoreReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgNitpickSyncScoreReq;
  return proto.MsgNitpickSyncScoreReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgNitpickSyncScoreReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgNitpickSyncScoreReq}
 */
proto.MsgNitpickSyncScoreReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgNitpickSyncScoreReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgNitpickSyncScoreReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgNitpickSyncScoreReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickSyncScoreReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgNitpickSyncScoreReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgNitpickSyncScoreReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgNitpickSyncScoreReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickSyncScoreReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 count = 2;
 * @return {number}
 */
proto.MsgNitpickSyncScoreReq.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgNitpickSyncScoreReq.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgNitpickSyncScoreReq.prototype.clearCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickSyncScoreReq.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgNitpickSyncScoreNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgNitpickSyncScoreNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgNitpickSyncScoreNtf.displayName = 'proto.MsgNitpickSyncScoreNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgNitpickSyncScoreNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgNitpickSyncScoreNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgNitpickSyncScoreNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickSyncScoreNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    count: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgNitpickSyncScoreNtf}
 */
proto.MsgNitpickSyncScoreNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgNitpickSyncScoreNtf;
  return proto.MsgNitpickSyncScoreNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgNitpickSyncScoreNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgNitpickSyncScoreNtf}
 */
proto.MsgNitpickSyncScoreNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgNitpickSyncScoreNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgNitpickSyncScoreNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgNitpickSyncScoreNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickSyncScoreNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgNitpickSyncScoreNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgNitpickSyncScoreNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgNitpickSyncScoreNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickSyncScoreNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 count = 2;
 * @return {number}
 */
proto.MsgNitpickSyncScoreNtf.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgNitpickSyncScoreNtf.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgNitpickSyncScoreNtf.prototype.clearCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickSyncScoreNtf.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgNitpickRoundOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgNitpickRoundOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgNitpickRoundOverNtf.displayName = 'proto.MsgNitpickRoundOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgNitpickRoundOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgNitpickRoundOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgNitpickRoundOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickRoundOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    winCamp: jspb.Message.getField(msg, 1),
    round: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgNitpickRoundOverNtf}
 */
proto.MsgNitpickRoundOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgNitpickRoundOverNtf;
  return proto.MsgNitpickRoundOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgNitpickRoundOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgNitpickRoundOverNtf}
 */
proto.MsgNitpickRoundOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWinCamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgNitpickRoundOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgNitpickRoundOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgNitpickRoundOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickRoundOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 win_camp = 1;
 * @return {number}
 */
proto.MsgNitpickRoundOverNtf.prototype.getWinCamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgNitpickRoundOverNtf.prototype.setWinCamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgNitpickRoundOverNtf.prototype.clearWinCamp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickRoundOverNtf.prototype.hasWinCamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 round = 2;
 * @return {number}
 */
proto.MsgNitpickRoundOverNtf.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgNitpickRoundOverNtf.prototype.setRound = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgNitpickRoundOverNtf.prototype.clearRound = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickRoundOverNtf.prototype.hasRound = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgNitpickOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgNitpickOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgNitpickOverNtf.displayName = 'proto.MsgNitpickOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgNitpickOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgNitpickOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgNitpickOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    win: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgNitpickOverNtf}
 */
proto.MsgNitpickOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgNitpickOverNtf;
  return proto.MsgNitpickOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgNitpickOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgNitpickOverNtf}
 */
proto.MsgNitpickOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgNitpickOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgNitpickOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgNitpickOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgNitpickOverNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgNitpickOverNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgNitpickOverNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickOverNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 win = 2;
 * @return {number}
 */
proto.MsgNitpickOverNtf.prototype.getWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgNitpickOverNtf.prototype.setWin = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgNitpickOverNtf.prototype.clearWin = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickOverNtf.prototype.hasWin = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgNitpickRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgNitpickRecoveryNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgNitpickRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgNitpickRecoveryNtf.displayName = 'proto.MsgNitpickRecoveryNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgNitpickRecoveryNtf.repeatedFields_ = [8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgNitpickRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgNitpickRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgNitpickRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getField(msg, 1),
    leftTime: jspb.Message.getField(msg, 2),
    redCnt: jspb.Message.getField(msg, 3),
    blueCnt: jspb.Message.getField(msg, 4),
    propCnt: jspb.Message.getField(msg, 5),
    redScore: jspb.Message.getField(msg, 6),
    blueScore: jspb.Message.getField(msg, 7),
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.NitpickKeys.toObject, includeInstance),
    imgDataList: jspb.Message.toObjectList(msg.getImgDataList(),
    proto.NitpickImageData.toObject, includeInstance),
    roundOver: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgNitpickRecoveryNtf}
 */
proto.MsgNitpickRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgNitpickRecoveryNtf;
  return proto.MsgNitpickRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgNitpickRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgNitpickRecoveryNtf}
 */
proto.MsgNitpickRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedCnt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueCnt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPropCnt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedScore(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueScore(value);
      break;
    case 8:
      var value = new proto.NitpickKeys;
      reader.readMessage(value,proto.NitpickKeys.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    case 9:
      var value = new proto.NitpickImageData;
      reader.readMessage(value,proto.NitpickImageData.deserializeBinaryFromReader);
      msg.addImgData(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRoundOver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgNitpickRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgNitpickRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgNitpickRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgNitpickRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.NitpickKeys.serializeBinaryToWriter
    );
  }
  f = message.getImgDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.NitpickImageData.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * required uint32 round = 1;
 * @return {number}
 */
proto.MsgNitpickRecoveryNtf.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgNitpickRecoveryNtf.prototype.setRound = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgNitpickRecoveryNtf.prototype.clearRound = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickRecoveryNtf.prototype.hasRound = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 left_time = 2;
 * @return {number}
 */
proto.MsgNitpickRecoveryNtf.prototype.getLeftTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgNitpickRecoveryNtf.prototype.setLeftTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgNitpickRecoveryNtf.prototype.clearLeftTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickRecoveryNtf.prototype.hasLeftTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 red_cnt = 3;
 * @return {number}
 */
proto.MsgNitpickRecoveryNtf.prototype.getRedCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgNitpickRecoveryNtf.prototype.setRedCnt = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgNitpickRecoveryNtf.prototype.clearRedCnt = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickRecoveryNtf.prototype.hasRedCnt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 blue_cnt = 4;
 * @return {number}
 */
proto.MsgNitpickRecoveryNtf.prototype.getBlueCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgNitpickRecoveryNtf.prototype.setBlueCnt = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgNitpickRecoveryNtf.prototype.clearBlueCnt = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickRecoveryNtf.prototype.hasBlueCnt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 prop_cnt = 5;
 * @return {number}
 */
proto.MsgNitpickRecoveryNtf.prototype.getPropCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgNitpickRecoveryNtf.prototype.setPropCnt = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgNitpickRecoveryNtf.prototype.clearPropCnt = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickRecoveryNtf.prototype.hasPropCnt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 red_score = 6;
 * @return {number}
 */
proto.MsgNitpickRecoveryNtf.prototype.getRedScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgNitpickRecoveryNtf.prototype.setRedScore = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgNitpickRecoveryNtf.prototype.clearRedScore = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickRecoveryNtf.prototype.hasRedScore = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 blue_score = 7;
 * @return {number}
 */
proto.MsgNitpickRecoveryNtf.prototype.getBlueScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgNitpickRecoveryNtf.prototype.setBlueScore = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgNitpickRecoveryNtf.prototype.clearBlueScore = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickRecoveryNtf.prototype.hasBlueScore = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated NitpickKeys keys = 8;
 * @return {!Array<!proto.NitpickKeys>}
 */
proto.MsgNitpickRecoveryNtf.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.NitpickKeys>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NitpickKeys, 8));
};


/** @param {!Array<!proto.NitpickKeys>} value */
proto.MsgNitpickRecoveryNtf.prototype.setKeysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.NitpickKeys=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NitpickKeys}
 */
proto.MsgNitpickRecoveryNtf.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.NitpickKeys, opt_index);
};


proto.MsgNitpickRecoveryNtf.prototype.clearKeysList = function() {
  this.setKeysList([]);
};


/**
 * repeated NitpickImageData img_data = 9;
 * @return {!Array<!proto.NitpickImageData>}
 */
proto.MsgNitpickRecoveryNtf.prototype.getImgDataList = function() {
  return /** @type{!Array<!proto.NitpickImageData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NitpickImageData, 9));
};


/** @param {!Array<!proto.NitpickImageData>} value */
proto.MsgNitpickRecoveryNtf.prototype.setImgDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.NitpickImageData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NitpickImageData}
 */
proto.MsgNitpickRecoveryNtf.prototype.addImgData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.NitpickImageData, opt_index);
};


proto.MsgNitpickRecoveryNtf.prototype.clearImgDataList = function() {
  this.setImgDataList([]);
};


/**
 * required bool round_over = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MsgNitpickRecoveryNtf.prototype.getRoundOver = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.MsgNitpickRecoveryNtf.prototype.setRoundOver = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.MsgNitpickRecoveryNtf.prototype.clearRoundOver = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgNitpickRecoveryNtf.prototype.hasRoundOver = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgClearbrickStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgClearbrickStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgClearbrickStartNtf.displayName = 'proto.MsgClearbrickStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgClearbrickStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgClearbrickStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgClearbrickStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgClearbrickStartNtf}
 */
proto.MsgClearbrickStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgClearbrickStartNtf;
  return proto.MsgClearbrickStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgClearbrickStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgClearbrickStartNtf}
 */
proto.MsgClearbrickStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgClearbrickStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgClearbrickStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgClearbrickStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 time = 1;
 * @return {number}
 */
proto.MsgClearbrickStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgClearbrickStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgClearbrickStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgClearbrickSyncPosReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgClearbrickSyncPosReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgClearbrickSyncPosReq.displayName = 'proto.MsgClearbrickSyncPosReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgClearbrickSyncPosReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgClearbrickSyncPosReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgClearbrickSyncPosReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickSyncPosReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pos: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgClearbrickSyncPosReq}
 */
proto.MsgClearbrickSyncPosReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgClearbrickSyncPosReq;
  return proto.MsgClearbrickSyncPosReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgClearbrickSyncPosReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgClearbrickSyncPosReq}
 */
proto.MsgClearbrickSyncPosReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgClearbrickSyncPosReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgClearbrickSyncPosReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgClearbrickSyncPosReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickSyncPosReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgClearbrickSyncPosReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgClearbrickSyncPosReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgClearbrickSyncPosReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickSyncPosReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pos = 2;
 * @return {number}
 */
proto.MsgClearbrickSyncPosReq.prototype.getPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgClearbrickSyncPosReq.prototype.setPos = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgClearbrickSyncPosReq.prototype.clearPos = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickSyncPosReq.prototype.hasPos = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgClearbrickSyncPosNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgClearbrickSyncPosNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgClearbrickSyncPosNtf.displayName = 'proto.MsgClearbrickSyncPosNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgClearbrickSyncPosNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgClearbrickSyncPosNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgClearbrickSyncPosNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickSyncPosNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pos: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgClearbrickSyncPosNtf}
 */
proto.MsgClearbrickSyncPosNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgClearbrickSyncPosNtf;
  return proto.MsgClearbrickSyncPosNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgClearbrickSyncPosNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgClearbrickSyncPosNtf}
 */
proto.MsgClearbrickSyncPosNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgClearbrickSyncPosNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgClearbrickSyncPosNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgClearbrickSyncPosNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickSyncPosNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgClearbrickSyncPosNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgClearbrickSyncPosNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgClearbrickSyncPosNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickSyncPosNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pos = 2;
 * @return {number}
 */
proto.MsgClearbrickSyncPosNtf.prototype.getPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgClearbrickSyncPosNtf.prototype.setPos = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgClearbrickSyncPosNtf.prototype.clearPos = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickSyncPosNtf.prototype.hasPos = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgClearbrickAddRowReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgClearbrickAddRowReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgClearbrickAddRowReq.displayName = 'proto.MsgClearbrickAddRowReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgClearbrickAddRowReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgClearbrickAddRowReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgClearbrickAddRowReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickAddRowReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    dstUid: jspb.Message.getField(msg, 1),
    rowCnt: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgClearbrickAddRowReq}
 */
proto.MsgClearbrickAddRowReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgClearbrickAddRowReq;
  return proto.MsgClearbrickAddRowReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgClearbrickAddRowReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgClearbrickAddRowReq}
 */
proto.MsgClearbrickAddRowReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRowCnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgClearbrickAddRowReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgClearbrickAddRowReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgClearbrickAddRowReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickAddRowReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 dst_uid = 1;
 * @return {number}
 */
proto.MsgClearbrickAddRowReq.prototype.getDstUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgClearbrickAddRowReq.prototype.setDstUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgClearbrickAddRowReq.prototype.clearDstUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickAddRowReq.prototype.hasDstUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 row_cnt = 2;
 * @return {number}
 */
proto.MsgClearbrickAddRowReq.prototype.getRowCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgClearbrickAddRowReq.prototype.setRowCnt = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgClearbrickAddRowReq.prototype.clearRowCnt = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickAddRowReq.prototype.hasRowCnt = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgClearbrickAddRowNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgClearbrickAddRowNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgClearbrickAddRowNtf.displayName = 'proto.MsgClearbrickAddRowNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgClearbrickAddRowNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgClearbrickAddRowNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgClearbrickAddRowNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickAddRowNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    dstUid: jspb.Message.getField(msg, 1),
    rowCnt: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgClearbrickAddRowNtf}
 */
proto.MsgClearbrickAddRowNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgClearbrickAddRowNtf;
  return proto.MsgClearbrickAddRowNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgClearbrickAddRowNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgClearbrickAddRowNtf}
 */
proto.MsgClearbrickAddRowNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRowCnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgClearbrickAddRowNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgClearbrickAddRowNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgClearbrickAddRowNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickAddRowNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 dst_uid = 1;
 * @return {number}
 */
proto.MsgClearbrickAddRowNtf.prototype.getDstUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgClearbrickAddRowNtf.prototype.setDstUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgClearbrickAddRowNtf.prototype.clearDstUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickAddRowNtf.prototype.hasDstUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 row_cnt = 2;
 * @return {number}
 */
proto.MsgClearbrickAddRowNtf.prototype.getRowCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgClearbrickAddRowNtf.prototype.setRowCnt = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgClearbrickAddRowNtf.prototype.clearRowCnt = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickAddRowNtf.prototype.hasRowCnt = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgClearbrickBottomReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgClearbrickBottomReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgClearbrickBottomReq.displayName = 'proto.MsgClearbrickBottomReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgClearbrickBottomReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgClearbrickBottomReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgClearbrickBottomReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickBottomReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgClearbrickBottomReq}
 */
proto.MsgClearbrickBottomReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgClearbrickBottomReq;
  return proto.MsgClearbrickBottomReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgClearbrickBottomReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgClearbrickBottomReq}
 */
proto.MsgClearbrickBottomReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgClearbrickBottomReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgClearbrickBottomReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgClearbrickBottomReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickBottomReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgClearbrickBottomReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgClearbrickBottomReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgClearbrickBottomReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickBottomReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgClearbrickOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgClearbrickOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgClearbrickOverNtf.displayName = 'proto.MsgClearbrickOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgClearbrickOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgClearbrickOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgClearbrickOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgClearbrickOverNtf}
 */
proto.MsgClearbrickOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgClearbrickOverNtf;
  return proto.MsgClearbrickOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgClearbrickOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgClearbrickOverNtf}
 */
proto.MsgClearbrickOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgClearbrickOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgClearbrickOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgClearbrickOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgClearbrickOverNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgClearbrickOverNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgClearbrickOverNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickOverNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgClearbrickOverNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgClearbrickOverNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgClearbrickOverNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickOverNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgClearbrickRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgClearbrickRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgClearbrickRecoveryNtf.displayName = 'proto.MsgClearbrickRecoveryNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgClearbrickRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgClearbrickRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgClearbrickRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    leftTime: jspb.Message.getField(msg, 1),
    pos: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgClearbrickRecoveryNtf}
 */
proto.MsgClearbrickRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgClearbrickRecoveryNtf;
  return proto.MsgClearbrickRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgClearbrickRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgClearbrickRecoveryNtf}
 */
proto.MsgClearbrickRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgClearbrickRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgClearbrickRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgClearbrickRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearbrickRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 left_time = 1;
 * @return {number}
 */
proto.MsgClearbrickRecoveryNtf.prototype.getLeftTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgClearbrickRecoveryNtf.prototype.setLeftTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgClearbrickRecoveryNtf.prototype.clearLeftTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickRecoveryNtf.prototype.hasLeftTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pos = 2;
 * @return {number}
 */
proto.MsgClearbrickRecoveryNtf.prototype.getPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgClearbrickRecoveryNtf.prototype.setPos = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgClearbrickRecoveryNtf.prototype.clearPos = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearbrickRecoveryNtf.prototype.hasPos = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgClearPointStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgClearPointStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgClearPointStartNtf.displayName = 'proto.MsgClearPointStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgClearPointStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgClearPointStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgClearPointStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearPointStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgClearPointStartNtf}
 */
proto.MsgClearPointStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgClearPointStartNtf;
  return proto.MsgClearPointStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgClearPointStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgClearPointStartNtf}
 */
proto.MsgClearPointStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgClearPointStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgClearPointStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgClearPointStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearPointStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgClearPointStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgClearPointStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgClearPointStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearPointStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgClearPointStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgClearPointStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgClearPointStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearPointStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgClearPointStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgClearPointStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgClearPointStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearPointStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgClearPointSyncReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgClearPointSyncReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgClearPointSyncReq.displayName = 'proto.MsgClearPointSyncReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgClearPointSyncReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgClearPointSyncReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgClearPointSyncReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearPointSyncReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgClearPointSyncReq}
 */
proto.MsgClearPointSyncReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgClearPointSyncReq;
  return proto.MsgClearPointSyncReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgClearPointSyncReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgClearPointSyncReq}
 */
proto.MsgClearPointSyncReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgClearPointSyncReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgClearPointSyncReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgClearPointSyncReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearPointSyncReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgClearPointSyncReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgClearPointSyncReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgClearPointSyncReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearPointSyncReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 score = 2;
 * @return {number}
 */
proto.MsgClearPointSyncReq.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgClearPointSyncReq.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgClearPointSyncReq.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearPointSyncReq.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgClearPointSyncNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgClearPointSyncNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgClearPointSyncNtf.displayName = 'proto.MsgClearPointSyncNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgClearPointSyncNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgClearPointSyncNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgClearPointSyncNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearPointSyncNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgClearPointSyncNtf}
 */
proto.MsgClearPointSyncNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgClearPointSyncNtf;
  return proto.MsgClearPointSyncNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgClearPointSyncNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgClearPointSyncNtf}
 */
proto.MsgClearPointSyncNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgClearPointSyncNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgClearPointSyncNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgClearPointSyncNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearPointSyncNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgClearPointSyncNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgClearPointSyncNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgClearPointSyncNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearPointSyncNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 score = 2;
 * @return {number}
 */
proto.MsgClearPointSyncNtf.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgClearPointSyncNtf.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgClearPointSyncNtf.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearPointSyncNtf.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgClearPointResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgClearPointResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgClearPointResultNtf.displayName = 'proto.MsgClearPointResultNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgClearPointResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgClearPointResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgClearPointResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearPointResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgClearPointResultNtf}
 */
proto.MsgClearPointResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgClearPointResultNtf;
  return proto.MsgClearPointResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgClearPointResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgClearPointResultNtf}
 */
proto.MsgClearPointResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgClearPointResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgClearPointResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgClearPointResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearPointResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgClearPointResultNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgClearPointResultNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgClearPointResultNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearPointResultNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgClearPointResultNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgClearPointResultNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgClearPointResultNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearPointResultNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgClearPointRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgClearPointRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgClearPointRecoveryNtf.displayName = 'proto.MsgClearPointRecoveryNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgClearPointRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgClearPointRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgClearPointRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearPointRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    redScore: jspb.Message.getField(msg, 1),
    blueScore: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgClearPointRecoveryNtf}
 */
proto.MsgClearPointRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgClearPointRecoveryNtf;
  return proto.MsgClearPointRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgClearPointRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgClearPointRecoveryNtf}
 */
proto.MsgClearPointRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedScore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgClearPointRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgClearPointRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgClearPointRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgClearPointRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 red_score = 1;
 * @return {number}
 */
proto.MsgClearPointRecoveryNtf.prototype.getRedScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgClearPointRecoveryNtf.prototype.setRedScore = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgClearPointRecoveryNtf.prototype.clearRedScore = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearPointRecoveryNtf.prototype.hasRedScore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 blue_score = 2;
 * @return {number}
 */
proto.MsgClearPointRecoveryNtf.prototype.getBlueScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgClearPointRecoveryNtf.prototype.setBlueScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgClearPointRecoveryNtf.prototype.clearBlueScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgClearPointRecoveryNtf.prototype.hasBlueScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGuessDrawStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawStartNtf.displayName = 'proto.MsgGuessDrawStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    choiceTime: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawStartNtf}
 */
proto.MsgGuessDrawStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawStartNtf;
  return proto.MsgGuessDrawStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawStartNtf}
 */
proto.MsgGuessDrawStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChoiceTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGuessDrawStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGuessDrawStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGuessDrawStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 choice_time = 2;
 * @return {number}
 */
proto.MsgGuessDrawStartNtf.prototype.getChoiceTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGuessDrawStartNtf.prototype.setChoiceTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGuessDrawStartNtf.prototype.clearChoiceTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawStartNtf.prototype.hasChoiceTime = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawKeysReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGuessDrawKeysReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawKeysReq.displayName = 'proto.MsgGuessDrawKeysReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawKeysReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawKeysReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawKeysReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawKeysReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawKeysReq}
 */
proto.MsgGuessDrawKeysReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawKeysReq;
  return proto.MsgGuessDrawKeysReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawKeysReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawKeysReq}
 */
proto.MsgGuessDrawKeysReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawKeysReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawKeysReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawKeysReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawKeysReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGuessDrawKeysReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGuessDrawKeysReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGuessDrawKeysReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawKeysReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawKeysNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgGuessDrawKeysNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgGuessDrawKeysNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawKeysNtf.displayName = 'proto.MsgGuessDrawKeysNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgGuessDrawKeysNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawKeysNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawKeysNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawKeysNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawKeysNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    wordsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawKeysNtf}
 */
proto.MsgGuessDrawKeysNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawKeysNtf;
  return proto.MsgGuessDrawKeysNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawKeysNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawKeysNtf}
 */
proto.MsgGuessDrawKeysNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addWords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawKeysNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawKeysNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawKeysNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawKeysNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string words = 1;
 * @return {!Array<string>}
 */
proto.MsgGuessDrawKeysNtf.prototype.getWordsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.MsgGuessDrawKeysNtf.prototype.setWordsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.MsgGuessDrawKeysNtf.prototype.addWords = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.MsgGuessDrawKeysNtf.prototype.clearWordsList = function() {
  this.setWordsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawChoiceKeyReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGuessDrawChoiceKeyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawChoiceKeyReq.displayName = 'proto.MsgGuessDrawChoiceKeyReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawChoiceKeyReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawChoiceKeyReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawChoiceKeyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawChoiceKeyReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    key: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawChoiceKeyReq}
 */
proto.MsgGuessDrawChoiceKeyReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawChoiceKeyReq;
  return proto.MsgGuessDrawChoiceKeyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawChoiceKeyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawChoiceKeyReq}
 */
proto.MsgGuessDrawChoiceKeyReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawChoiceKeyReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawChoiceKeyReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawChoiceKeyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawChoiceKeyReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGuessDrawChoiceKeyReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGuessDrawChoiceKeyReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGuessDrawChoiceKeyReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawChoiceKeyReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string key = 2;
 * @return {string}
 */
proto.MsgGuessDrawChoiceKeyReq.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgGuessDrawChoiceKeyReq.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGuessDrawChoiceKeyReq.prototype.clearKey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawChoiceKeyReq.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawChoiceKeyNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGuessDrawChoiceKeyNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawChoiceKeyNtf.displayName = 'proto.MsgGuessDrawChoiceKeyNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawChoiceKeyNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawChoiceKeyNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawChoiceKeyNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawChoiceKeyNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    drawTime: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawChoiceKeyNtf}
 */
proto.MsgGuessDrawChoiceKeyNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawChoiceKeyNtf;
  return proto.MsgGuessDrawChoiceKeyNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawChoiceKeyNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawChoiceKeyNtf}
 */
proto.MsgGuessDrawChoiceKeyNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDrawTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawChoiceKeyNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawChoiceKeyNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawChoiceKeyNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawChoiceKeyNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGuessDrawChoiceKeyNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGuessDrawChoiceKeyNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGuessDrawChoiceKeyNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawChoiceKeyNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string type = 2;
 * @return {string}
 */
proto.MsgGuessDrawChoiceKeyNtf.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgGuessDrawChoiceKeyNtf.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGuessDrawChoiceKeyNtf.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawChoiceKeyNtf.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 draw_time = 3;
 * @return {number}
 */
proto.MsgGuessDrawChoiceKeyNtf.prototype.getDrawTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGuessDrawChoiceKeyNtf.prototype.setDrawTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGuessDrawChoiceKeyNtf.prototype.clearDrawTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawChoiceKeyNtf.prototype.hasDrawTime = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GuessDrawPen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GuessDrawPen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GuessDrawPen.displayName = 'proto.GuessDrawPen';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GuessDrawPen.prototype.toObject = function(opt_includeInstance) {
  return proto.GuessDrawPen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GuessDrawPen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GuessDrawPen.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getField(msg, 1),
    color: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GuessDrawPen}
 */
proto.GuessDrawPen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GuessDrawPen;
  return proto.GuessDrawPen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GuessDrawPen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GuessDrawPen}
 */
proto.GuessDrawPen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GuessDrawPen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GuessDrawPen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GuessDrawPen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GuessDrawPen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 width = 1;
 * @return {number}
 */
proto.GuessDrawPen.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GuessDrawPen.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GuessDrawPen.prototype.clearWidth = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GuessDrawPen.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 color = 2;
 * @return {number}
 */
proto.GuessDrawPen.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GuessDrawPen.prototype.setColor = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GuessDrawPen.prototype.clearColor = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GuessDrawPen.prototype.hasColor = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GuessDrawPath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GuessDrawPath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GuessDrawPath.displayName = 'proto.GuessDrawPath';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GuessDrawPath.prototype.toObject = function(opt_includeInstance) {
  return proto.GuessDrawPath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GuessDrawPath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GuessDrawPath.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GuessDrawPath}
 */
proto.GuessDrawPath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GuessDrawPath;
  return proto.GuessDrawPath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GuessDrawPath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GuessDrawPath}
 */
proto.GuessDrawPath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GuessDrawPath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GuessDrawPath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GuessDrawPath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GuessDrawPath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.GuessDrawPath.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GuessDrawPath.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GuessDrawPath.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GuessDrawPath.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.GuessDrawPath.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GuessDrawPath.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GuessDrawPath.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GuessDrawPath.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgGuessDrawLine.repeatedFields_, null);
};
goog.inherits(proto.MsgGuessDrawLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawLine.displayName = 'proto.MsgGuessDrawLine';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgGuessDrawLine.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawLine.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    pen: (f = msg.getPen()) && proto.GuessDrawPen.toObject(includeInstance, f),
    pathList: jspb.Message.toObjectList(msg.getPathList(),
    proto.GuessDrawPath.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawLine}
 */
proto.MsgGuessDrawLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawLine;
  return proto.MsgGuessDrawLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawLine}
 */
proto.MsgGuessDrawLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GuessDrawPen;
      reader.readMessage(value,proto.GuessDrawPen.deserializeBinaryFromReader);
      msg.setPen(value);
      break;
    case 2:
      var value = new proto.GuessDrawPath;
      reader.readMessage(value,proto.GuessDrawPath.deserializeBinaryFromReader);
      msg.addPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPen();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.GuessDrawPen.serializeBinaryToWriter
    );
  }
  f = message.getPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.GuessDrawPath.serializeBinaryToWriter
    );
  }
};


/**
 * required GuessDrawPen pen = 1;
 * @return {!proto.GuessDrawPen}
 */
proto.MsgGuessDrawLine.prototype.getPen = function() {
  return /** @type{!proto.GuessDrawPen} */ (
    jspb.Message.getWrapperField(this, proto.GuessDrawPen, 1, 1));
};


/** @param {!proto.GuessDrawPen} value */
proto.MsgGuessDrawLine.prototype.setPen = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MsgGuessDrawLine.prototype.clearPen = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawLine.prototype.hasPen = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated GuessDrawPath path = 2;
 * @return {!Array<!proto.GuessDrawPath>}
 */
proto.MsgGuessDrawLine.prototype.getPathList = function() {
  return /** @type{!Array<!proto.GuessDrawPath>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GuessDrawPath, 2));
};


/** @param {!Array<!proto.GuessDrawPath>} value */
proto.MsgGuessDrawLine.prototype.setPathList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.GuessDrawPath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GuessDrawPath}
 */
proto.MsgGuessDrawLine.prototype.addPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.GuessDrawPath, opt_index);
};


proto.MsgGuessDrawLine.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawSyncLineReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGuessDrawSyncLineReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawSyncLineReq.displayName = 'proto.MsgGuessDrawSyncLineReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawSyncLineReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawSyncLineReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawSyncLineReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawSyncLineReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    action: jspb.Message.getField(msg, 2),
    line: (f = msg.getLine()) && proto.MsgGuessDrawLine.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawSyncLineReq}
 */
proto.MsgGuessDrawSyncLineReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawSyncLineReq;
  return proto.MsgGuessDrawSyncLineReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawSyncLineReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawSyncLineReq}
 */
proto.MsgGuessDrawSyncLineReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAction(value);
      break;
    case 3:
      var value = new proto.MsgGuessDrawLine;
      reader.readMessage(value,proto.MsgGuessDrawLine.deserializeBinaryFromReader);
      msg.setLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawSyncLineReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawSyncLineReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawSyncLineReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawSyncLineReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLine();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MsgGuessDrawLine.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGuessDrawSyncLineReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGuessDrawSyncLineReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGuessDrawSyncLineReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawSyncLineReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 action = 2;
 * @return {number}
 */
proto.MsgGuessDrawSyncLineReq.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGuessDrawSyncLineReq.prototype.setAction = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGuessDrawSyncLineReq.prototype.clearAction = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawSyncLineReq.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MsgGuessDrawLine line = 3;
 * @return {?proto.MsgGuessDrawLine}
 */
proto.MsgGuessDrawSyncLineReq.prototype.getLine = function() {
  return /** @type{?proto.MsgGuessDrawLine} */ (
    jspb.Message.getWrapperField(this, proto.MsgGuessDrawLine, 3));
};


/** @param {?proto.MsgGuessDrawLine|undefined} value */
proto.MsgGuessDrawSyncLineReq.prototype.setLine = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.MsgGuessDrawSyncLineReq.prototype.clearLine = function() {
  this.setLine(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawSyncLineReq.prototype.hasLine = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawSyncLineNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGuessDrawSyncLineNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawSyncLineNtf.displayName = 'proto.MsgGuessDrawSyncLineNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawSyncLineNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawSyncLineNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawSyncLineNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawSyncLineNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    action: jspb.Message.getField(msg, 2),
    line: (f = msg.getLine()) && proto.MsgGuessDrawLine.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawSyncLineNtf}
 */
proto.MsgGuessDrawSyncLineNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawSyncLineNtf;
  return proto.MsgGuessDrawSyncLineNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawSyncLineNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawSyncLineNtf}
 */
proto.MsgGuessDrawSyncLineNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAction(value);
      break;
    case 3:
      var value = new proto.MsgGuessDrawLine;
      reader.readMessage(value,proto.MsgGuessDrawLine.deserializeBinaryFromReader);
      msg.setLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawSyncLineNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawSyncLineNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawSyncLineNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawSyncLineNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLine();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MsgGuessDrawLine.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGuessDrawSyncLineNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGuessDrawSyncLineNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGuessDrawSyncLineNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawSyncLineNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 action = 2;
 * @return {number}
 */
proto.MsgGuessDrawSyncLineNtf.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGuessDrawSyncLineNtf.prototype.setAction = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGuessDrawSyncLineNtf.prototype.clearAction = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawSyncLineNtf.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MsgGuessDrawLine line = 3;
 * @return {?proto.MsgGuessDrawLine}
 */
proto.MsgGuessDrawSyncLineNtf.prototype.getLine = function() {
  return /** @type{?proto.MsgGuessDrawLine} */ (
    jspb.Message.getWrapperField(this, proto.MsgGuessDrawLine, 3));
};


/** @param {?proto.MsgGuessDrawLine|undefined} value */
proto.MsgGuessDrawSyncLineNtf.prototype.setLine = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.MsgGuessDrawSyncLineNtf.prototype.clearLine = function() {
  this.setLine(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawSyncLineNtf.prototype.hasLine = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawGuessReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGuessDrawGuessReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawGuessReq.displayName = 'proto.MsgGuessDrawGuessReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawGuessReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawGuessReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawGuessReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawGuessReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    key: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawGuessReq}
 */
proto.MsgGuessDrawGuessReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawGuessReq;
  return proto.MsgGuessDrawGuessReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawGuessReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawGuessReq}
 */
proto.MsgGuessDrawGuessReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawGuessReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawGuessReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawGuessReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawGuessReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGuessDrawGuessReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGuessDrawGuessReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGuessDrawGuessReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawGuessReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string key = 2;
 * @return {string}
 */
proto.MsgGuessDrawGuessReq.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgGuessDrawGuessReq.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGuessDrawGuessReq.prototype.clearKey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawGuessReq.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawGuessNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGuessDrawGuessNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawGuessNtf.displayName = 'proto.MsgGuessDrawGuessNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawGuessNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawGuessNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawGuessNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawGuessNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    guessUid: jspb.Message.getField(msg, 1),
    guessScore: jspb.Message.getField(msg, 2),
    key: jspb.Message.getField(msg, 3),
    order: jspb.Message.getField(msg, 4),
    drawScore: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawGuessNtf}
 */
proto.MsgGuessDrawGuessNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawGuessNtf;
  return proto.MsgGuessDrawGuessNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawGuessNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawGuessNtf}
 */
proto.MsgGuessDrawGuessNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGuessUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGuessScore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrder(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDrawScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawGuessNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawGuessNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawGuessNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawGuessNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required uint32 guess_uid = 1;
 * @return {number}
 */
proto.MsgGuessDrawGuessNtf.prototype.getGuessUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGuessDrawGuessNtf.prototype.setGuessUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGuessDrawGuessNtf.prototype.clearGuessUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawGuessNtf.prototype.hasGuessUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 guess_score = 2;
 * @return {number}
 */
proto.MsgGuessDrawGuessNtf.prototype.getGuessScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGuessDrawGuessNtf.prototype.setGuessScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGuessDrawGuessNtf.prototype.clearGuessScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawGuessNtf.prototype.hasGuessScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.MsgGuessDrawGuessNtf.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.MsgGuessDrawGuessNtf.prototype.setKey = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGuessDrawGuessNtf.prototype.clearKey = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawGuessNtf.prototype.hasKey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 order = 4;
 * @return {number}
 */
proto.MsgGuessDrawGuessNtf.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgGuessDrawGuessNtf.prototype.setOrder = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgGuessDrawGuessNtf.prototype.clearOrder = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawGuessNtf.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 draw_score = 5;
 * @return {number}
 */
proto.MsgGuessDrawGuessNtf.prototype.getDrawScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgGuessDrawGuessNtf.prototype.setDrawScore = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgGuessDrawGuessNtf.prototype.clearDrawScore = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawGuessNtf.prototype.hasDrawScore = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawDisplayNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGuessDrawDisplayNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawDisplayNtf.displayName = 'proto.MsgGuessDrawDisplayNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawDisplayNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawDisplayNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawDisplayNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawDisplayNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawDisplayNtf}
 */
proto.MsgGuessDrawDisplayNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawDisplayNtf;
  return proto.MsgGuessDrawDisplayNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawDisplayNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawDisplayNtf}
 */
proto.MsgGuessDrawDisplayNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawDisplayNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawDisplayNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawDisplayNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawDisplayNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGuessDrawDisplayNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGuessDrawDisplayNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGuessDrawDisplayNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawDisplayNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawEvaluateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGuessDrawEvaluateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawEvaluateReq.displayName = 'proto.MsgGuessDrawEvaluateReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawEvaluateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawEvaluateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawEvaluateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawEvaluateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    eva: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawEvaluateReq}
 */
proto.MsgGuessDrawEvaluateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawEvaluateReq;
  return proto.MsgGuessDrawEvaluateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawEvaluateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawEvaluateReq}
 */
proto.MsgGuessDrawEvaluateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEva(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawEvaluateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawEvaluateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawEvaluateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawEvaluateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGuessDrawEvaluateReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGuessDrawEvaluateReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGuessDrawEvaluateReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawEvaluateReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 eva = 2;
 * @return {number}
 */
proto.MsgGuessDrawEvaluateReq.prototype.getEva = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGuessDrawEvaluateReq.prototype.setEva = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGuessDrawEvaluateReq.prototype.clearEva = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawEvaluateReq.prototype.hasEva = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawEvaluateNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGuessDrawEvaluateNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawEvaluateNtf.displayName = 'proto.MsgGuessDrawEvaluateNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawEvaluateNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawEvaluateNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawEvaluateNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawEvaluateNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    eva: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawEvaluateNtf}
 */
proto.MsgGuessDrawEvaluateNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawEvaluateNtf;
  return proto.MsgGuessDrawEvaluateNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawEvaluateNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawEvaluateNtf}
 */
proto.MsgGuessDrawEvaluateNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEva(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawEvaluateNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawEvaluateNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawEvaluateNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawEvaluateNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGuessDrawEvaluateNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGuessDrawEvaluateNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGuessDrawEvaluateNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawEvaluateNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 eva = 2;
 * @return {number}
 */
proto.MsgGuessDrawEvaluateNtf.prototype.getEva = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGuessDrawEvaluateNtf.prototype.setEva = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGuessDrawEvaluateNtf.prototype.clearEva = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawEvaluateNtf.prototype.hasEva = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GuessDrawResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GuessDrawResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GuessDrawResult.displayName = 'proto.GuessDrawResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GuessDrawResult.prototype.toObject = function(opt_includeInstance) {
  return proto.GuessDrawResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GuessDrawResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GuessDrawResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GuessDrawResult}
 */
proto.GuessDrawResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GuessDrawResult;
  return proto.GuessDrawResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GuessDrawResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GuessDrawResult}
 */
proto.GuessDrawResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GuessDrawResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GuessDrawResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GuessDrawResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GuessDrawResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.GuessDrawResult.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GuessDrawResult.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GuessDrawResult.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GuessDrawResult.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 score = 2;
 * @return {number}
 */
proto.GuessDrawResult.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GuessDrawResult.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GuessDrawResult.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GuessDrawResult.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgGuessDrawOverNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgGuessDrawOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawOverNtf.displayName = 'proto.MsgGuessDrawOverNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgGuessDrawOverNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultList: jspb.Message.toObjectList(msg.getResultList(),
    proto.GuessDrawResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawOverNtf}
 */
proto.MsgGuessDrawOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawOverNtf;
  return proto.MsgGuessDrawOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawOverNtf}
 */
proto.MsgGuessDrawOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GuessDrawResult;
      reader.readMessage(value,proto.GuessDrawResult.deserializeBinaryFromReader);
      msg.addResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GuessDrawResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GuessDrawResult result = 1;
 * @return {!Array<!proto.GuessDrawResult>}
 */
proto.MsgGuessDrawOverNtf.prototype.getResultList = function() {
  return /** @type{!Array<!proto.GuessDrawResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GuessDrawResult, 1));
};


/** @param {!Array<!proto.GuessDrawResult>} value */
proto.MsgGuessDrawOverNtf.prototype.setResultList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GuessDrawResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GuessDrawResult}
 */
proto.MsgGuessDrawOverNtf.prototype.addResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GuessDrawResult, opt_index);
};


proto.MsgGuessDrawOverNtf.prototype.clearResultList = function() {
  this.setResultList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGuessDrawRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgGuessDrawRecoveryNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgGuessDrawRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGuessDrawRecoveryNtf.displayName = 'proto.MsgGuessDrawRecoveryNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgGuessDrawRecoveryNtf.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGuessDrawRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGuessDrawRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGuessDrawRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameStatus: jspb.Message.getField(msg, 1),
    leftTime: jspb.Message.getField(msg, 2),
    uid: jspb.Message.getField(msg, 3),
    key: jspb.Message.getField(msg, 4),
    linesList: jspb.Message.toObjectList(msg.getLinesList(),
    proto.MsgGuessDrawLine.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGuessDrawRecoveryNtf}
 */
proto.MsgGuessDrawRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGuessDrawRecoveryNtf;
  return proto.MsgGuessDrawRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGuessDrawRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGuessDrawRecoveryNtf}
 */
proto.MsgGuessDrawRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 5:
      var value = new proto.MsgGuessDrawLine;
      reader.readMessage(value,proto.MsgGuessDrawLine.deserializeBinaryFromReader);
      msg.addLines(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGuessDrawRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGuessDrawRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGuessDrawRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGuessDrawRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLinesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.MsgGuessDrawLine.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 game_status = 1;
 * @return {number}
 */
proto.MsgGuessDrawRecoveryNtf.prototype.getGameStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGuessDrawRecoveryNtf.prototype.setGameStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGuessDrawRecoveryNtf.prototype.clearGameStatus = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawRecoveryNtf.prototype.hasGameStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 left_time = 2;
 * @return {number}
 */
proto.MsgGuessDrawRecoveryNtf.prototype.getLeftTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGuessDrawRecoveryNtf.prototype.setLeftTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGuessDrawRecoveryNtf.prototype.clearLeftTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawRecoveryNtf.prototype.hasLeftTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 uid = 3;
 * @return {number}
 */
proto.MsgGuessDrawRecoveryNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGuessDrawRecoveryNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGuessDrawRecoveryNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawRecoveryNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string key = 4;
 * @return {string}
 */
proto.MsgGuessDrawRecoveryNtf.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.MsgGuessDrawRecoveryNtf.prototype.setKey = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgGuessDrawRecoveryNtf.prototype.clearKey = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGuessDrawRecoveryNtf.prototype.hasKey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated MsgGuessDrawLine lines = 5;
 * @return {!Array<!proto.MsgGuessDrawLine>}
 */
proto.MsgGuessDrawRecoveryNtf.prototype.getLinesList = function() {
  return /** @type{!Array<!proto.MsgGuessDrawLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgGuessDrawLine, 5));
};


/** @param {!Array<!proto.MsgGuessDrawLine>} value */
proto.MsgGuessDrawRecoveryNtf.prototype.setLinesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.MsgGuessDrawLine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgGuessDrawLine}
 */
proto.MsgGuessDrawRecoveryNtf.prototype.addLines = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.MsgGuessDrawLine, opt_index);
};


proto.MsgGuessDrawRecoveryNtf.prototype.clearLinesList = function() {
  this.setLinesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PileHeroPos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PileHeroPos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PileHeroPos.displayName = 'proto.PileHeroPos';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PileHeroPos.prototype.toObject = function(opt_includeInstance) {
  return proto.PileHeroPos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PileHeroPos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PileHeroPos.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: jspb.Message.getField(msg, 1),
    height: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PileHeroPos}
 */
proto.PileHeroPos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PileHeroPos;
  return proto.PileHeroPos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PileHeroPos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PileHeroPos}
 */
proto.PileHeroPos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLocation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PileHeroPos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PileHeroPos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PileHeroPos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PileHeroPos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 location = 1;
 * @return {number}
 */
proto.PileHeroPos.prototype.getLocation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PileHeroPos.prototype.setLocation = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.PileHeroPos.prototype.clearLocation = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PileHeroPos.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 height = 2;
 * @return {number}
 */
proto.PileHeroPos.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PileHeroPos.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.PileHeroPos.prototype.clearHeight = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PileHeroPos.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PileHeroProp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PileHeroProp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PileHeroProp.displayName = 'proto.PileHeroProp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PileHeroProp.prototype.toObject = function(opt_includeInstance) {
  return proto.PileHeroProp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PileHeroProp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PileHeroProp.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    location: jspb.Message.getField(msg, 2),
    height: jspb.Message.getField(msg, 3),
    redBlue: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PileHeroProp}
 */
proto.PileHeroProp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PileHeroProp;
  return proto.PileHeroProp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PileHeroProp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PileHeroProp}
 */
proto.PileHeroProp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLocation(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedBlue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PileHeroProp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PileHeroProp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PileHeroProp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PileHeroProp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 type = 1;
 * @return {number}
 */
proto.PileHeroProp.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PileHeroProp.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.PileHeroProp.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PileHeroProp.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 location = 2;
 * @return {number}
 */
proto.PileHeroProp.prototype.getLocation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PileHeroProp.prototype.setLocation = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.PileHeroProp.prototype.clearLocation = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PileHeroProp.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 height = 3;
 * @return {number}
 */
proto.PileHeroProp.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.PileHeroProp.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.PileHeroProp.prototype.clearHeight = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PileHeroProp.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 red_blue = 4;
 * @return {number}
 */
proto.PileHeroProp.prototype.getRedBlue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.PileHeroProp.prototype.setRedBlue = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.PileHeroProp.prototype.clearRedBlue = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PileHeroProp.prototype.hasRedBlue = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgPileHeroStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgPileHeroStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgPileHeroStartNtf.displayName = 'proto.MsgPileHeroStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgPileHeroStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgPileHeroStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgPileHeroStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    hpValue: jspb.Message.getField(msg, 1),
    time: jspb.Message.getField(msg, 2),
    redUid: jspb.Message.getField(msg, 3),
    blueUid: jspb.Message.getField(msg, 4),
    redPos: (f = msg.getRedPos()) && proto.PileHeroPos.toObject(includeInstance, f),
    bluePos: (f = msg.getBluePos()) && proto.PileHeroPos.toObject(includeInstance, f),
    seed: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgPileHeroStartNtf}
 */
proto.MsgPileHeroStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgPileHeroStartNtf;
  return proto.MsgPileHeroStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgPileHeroStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgPileHeroStartNtf}
 */
proto.MsgPileHeroStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHpValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedUid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueUid(value);
      break;
    case 5:
      var value = new proto.PileHeroPos;
      reader.readMessage(value,proto.PileHeroPos.deserializeBinaryFromReader);
      msg.setRedPos(value);
      break;
    case 6:
      var value = new proto.PileHeroPos;
      reader.readMessage(value,proto.PileHeroPos.deserializeBinaryFromReader);
      msg.setBluePos(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgPileHeroStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgPileHeroStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgPileHeroStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getRedPos();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.PileHeroPos.serializeBinaryToWriter
    );
  }
  f = message.getBluePos();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.PileHeroPos.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * required uint32 hp_value = 1;
 * @return {number}
 */
proto.MsgPileHeroStartNtf.prototype.getHpValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgPileHeroStartNtf.prototype.setHpValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgPileHeroStartNtf.prototype.clearHpValue = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroStartNtf.prototype.hasHpValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 time = 2;
 * @return {number}
 */
proto.MsgPileHeroStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgPileHeroStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgPileHeroStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 red_uid = 3;
 * @return {number}
 */
proto.MsgPileHeroStartNtf.prototype.getRedUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgPileHeroStartNtf.prototype.setRedUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgPileHeroStartNtf.prototype.clearRedUid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroStartNtf.prototype.hasRedUid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 blue_uid = 4;
 * @return {number}
 */
proto.MsgPileHeroStartNtf.prototype.getBlueUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgPileHeroStartNtf.prototype.setBlueUid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgPileHeroStartNtf.prototype.clearBlueUid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroStartNtf.prototype.hasBlueUid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required PileHeroPos red_pos = 5;
 * @return {!proto.PileHeroPos}
 */
proto.MsgPileHeroStartNtf.prototype.getRedPos = function() {
  return /** @type{!proto.PileHeroPos} */ (
    jspb.Message.getWrapperField(this, proto.PileHeroPos, 5, 1));
};


/** @param {!proto.PileHeroPos} value */
proto.MsgPileHeroStartNtf.prototype.setRedPos = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.MsgPileHeroStartNtf.prototype.clearRedPos = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroStartNtf.prototype.hasRedPos = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required PileHeroPos blue_pos = 6;
 * @return {!proto.PileHeroPos}
 */
proto.MsgPileHeroStartNtf.prototype.getBluePos = function() {
  return /** @type{!proto.PileHeroPos} */ (
    jspb.Message.getWrapperField(this, proto.PileHeroPos, 6, 1));
};


/** @param {!proto.PileHeroPos} value */
proto.MsgPileHeroStartNtf.prototype.setBluePos = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.MsgPileHeroStartNtf.prototype.clearBluePos = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroStartNtf.prototype.hasBluePos = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 seed = 7;
 * @return {number}
 */
proto.MsgPileHeroStartNtf.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgPileHeroStartNtf.prototype.setSeed = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgPileHeroStartNtf.prototype.clearSeed = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroStartNtf.prototype.hasSeed = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgPileHeroShootReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgPileHeroShootReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgPileHeroShootReq.displayName = 'proto.MsgPileHeroShootReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgPileHeroShootReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgPileHeroShootReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgPileHeroShootReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroShootReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    attackAngle: jspb.Message.getField(msg, 2),
    attackPower: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgPileHeroShootReq}
 */
proto.MsgPileHeroShootReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgPileHeroShootReq;
  return proto.MsgPileHeroShootReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgPileHeroShootReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgPileHeroShootReq}
 */
proto.MsgPileHeroShootReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAttackAngle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAttackPower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgPileHeroShootReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgPileHeroShootReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgPileHeroShootReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroShootReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgPileHeroShootReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgPileHeroShootReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgPileHeroShootReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroShootReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 attack_angle = 2;
 * @return {number}
 */
proto.MsgPileHeroShootReq.prototype.getAttackAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgPileHeroShootReq.prototype.setAttackAngle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgPileHeroShootReq.prototype.clearAttackAngle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroShootReq.prototype.hasAttackAngle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 attack_power = 3;
 * @return {number}
 */
proto.MsgPileHeroShootReq.prototype.getAttackPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgPileHeroShootReq.prototype.setAttackPower = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgPileHeroShootReq.prototype.clearAttackPower = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroShootReq.prototype.hasAttackPower = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgPileHeroShootRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgPileHeroShootRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgPileHeroShootRep.displayName = 'proto.MsgPileHeroShootRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgPileHeroShootRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgPileHeroShootRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgPileHeroShootRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroShootRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgPileHeroShootRep}
 */
proto.MsgPileHeroShootRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgPileHeroShootRep;
  return proto.MsgPileHeroShootRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgPileHeroShootRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgPileHeroShootRep}
 */
proto.MsgPileHeroShootRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgPileHeroShootRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgPileHeroShootRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgPileHeroShootRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroShootRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgPileHeroShootRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgPileHeroShootRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgPileHeroShootRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroShootRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgPileHeroShootNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgPileHeroShootNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgPileHeroShootNtf.displayName = 'proto.MsgPileHeroShootNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgPileHeroShootNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgPileHeroShootNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgPileHeroShootNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroShootNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    attackAngle: jspb.Message.getField(msg, 2),
    attackPower: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgPileHeroShootNtf}
 */
proto.MsgPileHeroShootNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgPileHeroShootNtf;
  return proto.MsgPileHeroShootNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgPileHeroShootNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgPileHeroShootNtf}
 */
proto.MsgPileHeroShootNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAttackAngle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAttackPower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgPileHeroShootNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgPileHeroShootNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgPileHeroShootNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroShootNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgPileHeroShootNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgPileHeroShootNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgPileHeroShootNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroShootNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 attack_angle = 2;
 * @return {number}
 */
proto.MsgPileHeroShootNtf.prototype.getAttackAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgPileHeroShootNtf.prototype.setAttackAngle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgPileHeroShootNtf.prototype.clearAttackAngle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroShootNtf.prototype.hasAttackAngle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 attack_power = 3;
 * @return {number}
 */
proto.MsgPileHeroShootNtf.prototype.getAttackPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgPileHeroShootNtf.prototype.setAttackPower = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgPileHeroShootNtf.prototype.clearAttackPower = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroShootNtf.prototype.hasAttackPower = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgPileHeroPlayReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgPileHeroPlayReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgPileHeroPlayReq.displayName = 'proto.MsgPileHeroPlayReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgPileHeroPlayReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgPileHeroPlayReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgPileHeroPlayReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroPlayReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    hitType: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgPileHeroPlayReq}
 */
proto.MsgPileHeroPlayReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgPileHeroPlayReq;
  return proto.MsgPileHeroPlayReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgPileHeroPlayReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgPileHeroPlayReq}
 */
proto.MsgPileHeroPlayReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHitType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgPileHeroPlayReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgPileHeroPlayReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgPileHeroPlayReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroPlayReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgPileHeroPlayReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgPileHeroPlayReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgPileHeroPlayReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroPlayReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 hit_type = 2;
 * @return {number}
 */
proto.MsgPileHeroPlayReq.prototype.getHitType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgPileHeroPlayReq.prototype.setHitType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgPileHeroPlayReq.prototype.clearHitType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroPlayReq.prototype.hasHitType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgPileHeroPlayNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgPileHeroPlayNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgPileHeroPlayNtf.displayName = 'proto.MsgPileHeroPlayNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgPileHeroPlayNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgPileHeroPlayNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgPileHeroPlayNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroPlayNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    hitType: jspb.Message.getField(msg, 2),
    updateUid: jspb.Message.getField(msg, 3),
    hpValue: jspb.Message.getField(msg, 4),
    crit: jspb.Message.getField(msg, 5),
    score: jspb.Message.getField(msg, 6),
    dstPos: (f = msg.getDstPos()) && proto.PileHeroPos.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgPileHeroPlayNtf}
 */
proto.MsgPileHeroPlayNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgPileHeroPlayNtf;
  return proto.MsgPileHeroPlayNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgPileHeroPlayNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgPileHeroPlayNtf}
 */
proto.MsgPileHeroPlayNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHitType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUpdateUid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHpValue(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCrit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 7:
      var value = new proto.PileHeroPos;
      reader.readMessage(value,proto.PileHeroPos.deserializeBinaryFromReader);
      msg.setDstPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgPileHeroPlayNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgPileHeroPlayNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgPileHeroPlayNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroPlayNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getDstPos();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.PileHeroPos.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgPileHeroPlayNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgPileHeroPlayNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgPileHeroPlayNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroPlayNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 hit_type = 2;
 * @return {number}
 */
proto.MsgPileHeroPlayNtf.prototype.getHitType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgPileHeroPlayNtf.prototype.setHitType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgPileHeroPlayNtf.prototype.clearHitType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroPlayNtf.prototype.hasHitType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 update_uid = 3;
 * @return {number}
 */
proto.MsgPileHeroPlayNtf.prototype.getUpdateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgPileHeroPlayNtf.prototype.setUpdateUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgPileHeroPlayNtf.prototype.clearUpdateUid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroPlayNtf.prototype.hasUpdateUid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 hp_value = 4;
 * @return {number}
 */
proto.MsgPileHeroPlayNtf.prototype.getHpValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgPileHeroPlayNtf.prototype.setHpValue = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgPileHeroPlayNtf.prototype.clearHpValue = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroPlayNtf.prototype.hasHpValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool crit = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MsgPileHeroPlayNtf.prototype.getCrit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.MsgPileHeroPlayNtf.prototype.setCrit = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgPileHeroPlayNtf.prototype.clearCrit = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroPlayNtf.prototype.hasCrit = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 score = 6;
 * @return {number}
 */
proto.MsgPileHeroPlayNtf.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgPileHeroPlayNtf.prototype.setScore = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgPileHeroPlayNtf.prototype.clearScore = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroPlayNtf.prototype.hasScore = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PileHeroPos dst_pos = 7;
 * @return {?proto.PileHeroPos}
 */
proto.MsgPileHeroPlayNtf.prototype.getDstPos = function() {
  return /** @type{?proto.PileHeroPos} */ (
    jspb.Message.getWrapperField(this, proto.PileHeroPos, 7));
};


/** @param {?proto.PileHeroPos|undefined} value */
proto.MsgPileHeroPlayNtf.prototype.setDstPos = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.MsgPileHeroPlayNtf.prototype.clearDstPos = function() {
  this.setDstPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroPlayNtf.prototype.hasDstPos = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgPileHeroPropsNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgPileHeroPropsNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgPileHeroPropsNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgPileHeroPropsNtf.displayName = 'proto.MsgPileHeroPropsNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgPileHeroPropsNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgPileHeroPropsNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgPileHeroPropsNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgPileHeroPropsNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroPropsNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    propList: jspb.Message.toObjectList(msg.getPropList(),
    proto.PileHeroProp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgPileHeroPropsNtf}
 */
proto.MsgPileHeroPropsNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgPileHeroPropsNtf;
  return proto.MsgPileHeroPropsNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgPileHeroPropsNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgPileHeroPropsNtf}
 */
proto.MsgPileHeroPropsNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PileHeroProp;
      reader.readMessage(value,proto.PileHeroProp.deserializeBinaryFromReader);
      msg.addProp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgPileHeroPropsNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgPileHeroPropsNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgPileHeroPropsNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroPropsNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PileHeroProp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PileHeroProp prop = 1;
 * @return {!Array<!proto.PileHeroProp>}
 */
proto.MsgPileHeroPropsNtf.prototype.getPropList = function() {
  return /** @type{!Array<!proto.PileHeroProp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PileHeroProp, 1));
};


/** @param {!Array<!proto.PileHeroProp>} value */
proto.MsgPileHeroPropsNtf.prototype.setPropList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PileHeroProp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PileHeroProp}
 */
proto.MsgPileHeroPropsNtf.prototype.addProp = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PileHeroProp, opt_index);
};


proto.MsgPileHeroPropsNtf.prototype.clearPropList = function() {
  this.setPropList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgPileHeroOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgPileHeroOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgPileHeroOverNtf.displayName = 'proto.MsgPileHeroOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgPileHeroOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgPileHeroOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgPileHeroOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgPileHeroOverNtf}
 */
proto.MsgPileHeroOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgPileHeroOverNtf;
  return proto.MsgPileHeroOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgPileHeroOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgPileHeroOverNtf}
 */
proto.MsgPileHeroOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgPileHeroOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgPileHeroOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgPileHeroOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgPileHeroOverNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgPileHeroOverNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgPileHeroOverNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroOverNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgPileHeroOverNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgPileHeroOverNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgPileHeroOverNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroOverNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgPileHeroRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgPileHeroRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgPileHeroRecoveryNtf.displayName = 'proto.MsgPileHeroRecoveryNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgPileHeroRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgPileHeroRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgPileHeroRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    hpValue: jspb.Message.getField(msg, 1),
    redScore: jspb.Message.getField(msg, 2),
    blueScore: jspb.Message.getField(msg, 3),
    leftTime: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgPileHeroRecoveryNtf}
 */
proto.MsgPileHeroRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgPileHeroRecoveryNtf;
  return proto.MsgPileHeroRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgPileHeroRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgPileHeroRecoveryNtf}
 */
proto.MsgPileHeroRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHpValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueScore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgPileHeroRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgPileHeroRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgPileHeroRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgPileHeroRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 hp_value = 1;
 * @return {number}
 */
proto.MsgPileHeroRecoveryNtf.prototype.getHpValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgPileHeroRecoveryNtf.prototype.setHpValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgPileHeroRecoveryNtf.prototype.clearHpValue = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroRecoveryNtf.prototype.hasHpValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 red_score = 2;
 * @return {number}
 */
proto.MsgPileHeroRecoveryNtf.prototype.getRedScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgPileHeroRecoveryNtf.prototype.setRedScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgPileHeroRecoveryNtf.prototype.clearRedScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroRecoveryNtf.prototype.hasRedScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 blue_score = 3;
 * @return {number}
 */
proto.MsgPileHeroRecoveryNtf.prototype.getBlueScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgPileHeroRecoveryNtf.prototype.setBlueScore = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgPileHeroRecoveryNtf.prototype.clearBlueScore = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroRecoveryNtf.prototype.hasBlueScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 left_time = 4;
 * @return {number}
 */
proto.MsgPileHeroRecoveryNtf.prototype.getLeftTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgPileHeroRecoveryNtf.prototype.setLeftTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgPileHeroRecoveryNtf.prototype.clearLeftTime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgPileHeroRecoveryNtf.prototype.hasLeftTime = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJoyClearStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJoyClearStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJoyClearStartNtf.displayName = 'proto.MsgJoyClearStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJoyClearStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJoyClearStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJoyClearStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameTime: jspb.Message.getField(msg, 1),
    hpValue: jspb.Message.getField(msg, 2),
    mpValue: jspb.Message.getField(msg, 3),
    redUid: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJoyClearStartNtf}
 */
proto.MsgJoyClearStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJoyClearStartNtf;
  return proto.MsgJoyClearStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJoyClearStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJoyClearStartNtf}
 */
proto.MsgJoyClearStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHpValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMpValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJoyClearStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJoyClearStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJoyClearStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 game_time = 1;
 * @return {number}
 */
proto.MsgJoyClearStartNtf.prototype.getGameTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJoyClearStartNtf.prototype.setGameTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJoyClearStartNtf.prototype.clearGameTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearStartNtf.prototype.hasGameTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 hp_value = 2;
 * @return {number}
 */
proto.MsgJoyClearStartNtf.prototype.getHpValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgJoyClearStartNtf.prototype.setHpValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJoyClearStartNtf.prototype.clearHpValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearStartNtf.prototype.hasHpValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 mp_value = 3;
 * @return {number}
 */
proto.MsgJoyClearStartNtf.prototype.getMpValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgJoyClearStartNtf.prototype.setMpValue = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgJoyClearStartNtf.prototype.clearMpValue = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearStartNtf.prototype.hasMpValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 red_uid = 4;
 * @return {number}
 */
proto.MsgJoyClearStartNtf.prototype.getRedUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgJoyClearStartNtf.prototype.setRedUid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgJoyClearStartNtf.prototype.clearRedUid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearStartNtf.prototype.hasRedUid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJoyClearSyncMpReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJoyClearSyncMpReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJoyClearSyncMpReq.displayName = 'proto.MsgJoyClearSyncMpReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJoyClearSyncMpReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJoyClearSyncMpReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJoyClearSyncMpReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearSyncMpReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcType: jspb.Message.getField(msg, 1),
    mpValue: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJoyClearSyncMpReq}
 */
proto.MsgJoyClearSyncMpReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJoyClearSyncMpReq;
  return proto.MsgJoyClearSyncMpReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJoyClearSyncMpReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJoyClearSyncMpReq}
 */
proto.MsgJoyClearSyncMpReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrcType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMpValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJoyClearSyncMpReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJoyClearSyncMpReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJoyClearSyncMpReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearSyncMpReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 src_type = 1;
 * @return {number}
 */
proto.MsgJoyClearSyncMpReq.prototype.getSrcType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJoyClearSyncMpReq.prototype.setSrcType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJoyClearSyncMpReq.prototype.clearSrcType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearSyncMpReq.prototype.hasSrcType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 mp_value = 2;
 * @return {number}
 */
proto.MsgJoyClearSyncMpReq.prototype.getMpValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgJoyClearSyncMpReq.prototype.setMpValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJoyClearSyncMpReq.prototype.clearMpValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearSyncMpReq.prototype.hasMpValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJoyClearSyncMpNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJoyClearSyncMpNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJoyClearSyncMpNtf.displayName = 'proto.MsgJoyClearSyncMpNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJoyClearSyncMpNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJoyClearSyncMpNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJoyClearSyncMpNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearSyncMpNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    dstType: jspb.Message.getField(msg, 1),
    mpValue: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJoyClearSyncMpNtf}
 */
proto.MsgJoyClearSyncMpNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJoyClearSyncMpNtf;
  return proto.MsgJoyClearSyncMpNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJoyClearSyncMpNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJoyClearSyncMpNtf}
 */
proto.MsgJoyClearSyncMpNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMpValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJoyClearSyncMpNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJoyClearSyncMpNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJoyClearSyncMpNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearSyncMpNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 dst_type = 1;
 * @return {number}
 */
proto.MsgJoyClearSyncMpNtf.prototype.getDstType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJoyClearSyncMpNtf.prototype.setDstType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJoyClearSyncMpNtf.prototype.clearDstType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearSyncMpNtf.prototype.hasDstType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 mp_value = 2;
 * @return {number}
 */
proto.MsgJoyClearSyncMpNtf.prototype.getMpValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgJoyClearSyncMpNtf.prototype.setMpValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJoyClearSyncMpNtf.prototype.clearMpValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearSyncMpNtf.prototype.hasMpValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJoyClearSyncHpReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJoyClearSyncHpReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJoyClearSyncHpReq.displayName = 'proto.MsgJoyClearSyncHpReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJoyClearSyncHpReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJoyClearSyncHpReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJoyClearSyncHpReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearSyncHpReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcType: jspb.Message.getField(msg, 1),
    damageValue: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJoyClearSyncHpReq}
 */
proto.MsgJoyClearSyncHpReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJoyClearSyncHpReq;
  return proto.MsgJoyClearSyncHpReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJoyClearSyncHpReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJoyClearSyncHpReq}
 */
proto.MsgJoyClearSyncHpReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrcType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDamageValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJoyClearSyncHpReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJoyClearSyncHpReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJoyClearSyncHpReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearSyncHpReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 src_type = 1;
 * @return {number}
 */
proto.MsgJoyClearSyncHpReq.prototype.getSrcType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJoyClearSyncHpReq.prototype.setSrcType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJoyClearSyncHpReq.prototype.clearSrcType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearSyncHpReq.prototype.hasSrcType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 damage_value = 2;
 * @return {number}
 */
proto.MsgJoyClearSyncHpReq.prototype.getDamageValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgJoyClearSyncHpReq.prototype.setDamageValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJoyClearSyncHpReq.prototype.clearDamageValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearSyncHpReq.prototype.hasDamageValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJoyClearSyncHpNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJoyClearSyncHpNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJoyClearSyncHpNtf.displayName = 'proto.MsgJoyClearSyncHpNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJoyClearSyncHpNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJoyClearSyncHpNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJoyClearSyncHpNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearSyncHpNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    dstType: jspb.Message.getField(msg, 1),
    damageValue: jspb.Message.getField(msg, 2),
    dstHp: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJoyClearSyncHpNtf}
 */
proto.MsgJoyClearSyncHpNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJoyClearSyncHpNtf;
  return proto.MsgJoyClearSyncHpNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJoyClearSyncHpNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJoyClearSyncHpNtf}
 */
proto.MsgJoyClearSyncHpNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDamageValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstHp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJoyClearSyncHpNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJoyClearSyncHpNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJoyClearSyncHpNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearSyncHpNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 dst_type = 1;
 * @return {number}
 */
proto.MsgJoyClearSyncHpNtf.prototype.getDstType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJoyClearSyncHpNtf.prototype.setDstType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJoyClearSyncHpNtf.prototype.clearDstType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearSyncHpNtf.prototype.hasDstType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 damage_value = 2;
 * @return {number}
 */
proto.MsgJoyClearSyncHpNtf.prototype.getDamageValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgJoyClearSyncHpNtf.prototype.setDamageValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJoyClearSyncHpNtf.prototype.clearDamageValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearSyncHpNtf.prototype.hasDamageValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 dst_hp = 3;
 * @return {number}
 */
proto.MsgJoyClearSyncHpNtf.prototype.getDstHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgJoyClearSyncHpNtf.prototype.setDstHp = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgJoyClearSyncHpNtf.prototype.clearDstHp = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearSyncHpNtf.prototype.hasDstHp = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJoyClearOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJoyClearOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJoyClearOverNtf.displayName = 'proto.MsgJoyClearOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJoyClearOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJoyClearOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJoyClearOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJoyClearOverNtf}
 */
proto.MsgJoyClearOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJoyClearOverNtf;
  return proto.MsgJoyClearOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJoyClearOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJoyClearOverNtf}
 */
proto.MsgJoyClearOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJoyClearOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJoyClearOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJoyClearOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgJoyClearOverNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJoyClearOverNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJoyClearOverNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearOverNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgJoyClearOverNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgJoyClearOverNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJoyClearOverNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearOverNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgJoyClearRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgJoyClearRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgJoyClearRecoveryNtf.displayName = 'proto.MsgJoyClearRecoveryNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgJoyClearRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgJoyClearRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgJoyClearRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    hpValue: jspb.Message.getField(msg, 1),
    leftTime: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgJoyClearRecoveryNtf}
 */
proto.MsgJoyClearRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgJoyClearRecoveryNtf;
  return proto.MsgJoyClearRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgJoyClearRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgJoyClearRecoveryNtf}
 */
proto.MsgJoyClearRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHpValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgJoyClearRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgJoyClearRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgJoyClearRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgJoyClearRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 hp_value = 1;
 * @return {number}
 */
proto.MsgJoyClearRecoveryNtf.prototype.getHpValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgJoyClearRecoveryNtf.prototype.setHpValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgJoyClearRecoveryNtf.prototype.clearHpValue = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearRecoveryNtf.prototype.hasHpValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 left_time = 2;
 * @return {number}
 */
proto.MsgJoyClearRecoveryNtf.prototype.getLeftTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgJoyClearRecoveryNtf.prototype.setLeftTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgJoyClearRecoveryNtf.prototype.clearLeftTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgJoyClearRecoveryNtf.prototype.hasLeftTime = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFlyChickenStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgFlyChickenStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFlyChickenStartNtf.displayName = 'proto.MsgFlyChickenStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFlyChickenStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFlyChickenStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFlyChickenStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    hpValue: jspb.Message.getField(msg, 2),
    redUid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFlyChickenStartNtf}
 */
proto.MsgFlyChickenStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFlyChickenStartNtf;
  return proto.MsgFlyChickenStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFlyChickenStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFlyChickenStartNtf}
 */
proto.MsgFlyChickenStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHpValue(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFlyChickenStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFlyChickenStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFlyChickenStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 hp_value = 2;
 * @return {number}
 */
proto.MsgFlyChickenStartNtf.prototype.getHpValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgFlyChickenStartNtf.prototype.setHpValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgFlyChickenStartNtf.prototype.clearHpValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenStartNtf.prototype.hasHpValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 red_uid = 1;
 * @return {number}
 */
proto.MsgFlyChickenStartNtf.prototype.getRedUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgFlyChickenStartNtf.prototype.setRedUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgFlyChickenStartNtf.prototype.clearRedUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenStartNtf.prototype.hasRedUid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFlyChickenRounStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgFlyChickenRounStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFlyChickenRounStartNtf.displayName = 'proto.MsgFlyChickenRounStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFlyChickenRounStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFlyChickenRounStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFlyChickenRounStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenRounStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getField(msg, 1),
    time: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFlyChickenRounStartNtf}
 */
proto.MsgFlyChickenRounStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFlyChickenRounStartNtf;
  return proto.MsgFlyChickenRounStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFlyChickenRounStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFlyChickenRounStartNtf}
 */
proto.MsgFlyChickenRounStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFlyChickenRounStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFlyChickenRounStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFlyChickenRounStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenRounStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 round = 1;
 * @return {number}
 */
proto.MsgFlyChickenRounStartNtf.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgFlyChickenRounStartNtf.prototype.setRound = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgFlyChickenRounStartNtf.prototype.clearRound = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenRounStartNtf.prototype.hasRound = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 time = 2;
 * @return {number}
 */
proto.MsgFlyChickenRounStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgFlyChickenRounStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgFlyChickenRounStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenRounStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFlyChickenShootReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgFlyChickenShootReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFlyChickenShootReq.displayName = 'proto.MsgFlyChickenShootReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFlyChickenShootReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFlyChickenShootReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFlyChickenShootReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenShootReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    height: jspb.Message.getField(msg, 2),
    count: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFlyChickenShootReq}
 */
proto.MsgFlyChickenShootReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFlyChickenShootReq;
  return proto.MsgFlyChickenShootReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFlyChickenShootReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFlyChickenShootReq}
 */
proto.MsgFlyChickenShootReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFlyChickenShootReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFlyChickenShootReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFlyChickenShootReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenShootReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 type = 1;
 * @return {number}
 */
proto.MsgFlyChickenShootReq.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgFlyChickenShootReq.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgFlyChickenShootReq.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenShootReq.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 height = 2;
 * @return {number}
 */
proto.MsgFlyChickenShootReq.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgFlyChickenShootReq.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgFlyChickenShootReq.prototype.clearHeight = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenShootReq.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 count = 3;
 * @return {number}
 */
proto.MsgFlyChickenShootReq.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgFlyChickenShootReq.prototype.setCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgFlyChickenShootReq.prototype.clearCount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenShootReq.prototype.hasCount = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFlyChickenShootNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgFlyChickenShootNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFlyChickenShootNtf.displayName = 'proto.MsgFlyChickenShootNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFlyChickenShootNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFlyChickenShootNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFlyChickenShootNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenShootNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    height: jspb.Message.getField(msg, 2),
    count: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFlyChickenShootNtf}
 */
proto.MsgFlyChickenShootNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFlyChickenShootNtf;
  return proto.MsgFlyChickenShootNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFlyChickenShootNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFlyChickenShootNtf}
 */
proto.MsgFlyChickenShootNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFlyChickenShootNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFlyChickenShootNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFlyChickenShootNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenShootNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 type = 1;
 * @return {number}
 */
proto.MsgFlyChickenShootNtf.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgFlyChickenShootNtf.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgFlyChickenShootNtf.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenShootNtf.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 height = 2;
 * @return {number}
 */
proto.MsgFlyChickenShootNtf.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgFlyChickenShootNtf.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgFlyChickenShootNtf.prototype.clearHeight = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenShootNtf.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 count = 3;
 * @return {number}
 */
proto.MsgFlyChickenShootNtf.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgFlyChickenShootNtf.prototype.setCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgFlyChickenShootNtf.prototype.clearCount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenShootNtf.prototype.hasCount = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFlyChickenHitReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgFlyChickenHitReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFlyChickenHitReq.displayName = 'proto.MsgFlyChickenHitReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFlyChickenHitReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFlyChickenHitReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFlyChickenHitReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenHitReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    hitType: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFlyChickenHitReq}
 */
proto.MsgFlyChickenHitReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFlyChickenHitReq;
  return proto.MsgFlyChickenHitReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFlyChickenHitReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFlyChickenHitReq}
 */
proto.MsgFlyChickenHitReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHitType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFlyChickenHitReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFlyChickenHitReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFlyChickenHitReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenHitReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 type = 1;
 * @return {number}
 */
proto.MsgFlyChickenHitReq.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgFlyChickenHitReq.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgFlyChickenHitReq.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenHitReq.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 hit_type = 2;
 * @return {number}
 */
proto.MsgFlyChickenHitReq.prototype.getHitType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgFlyChickenHitReq.prototype.setHitType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgFlyChickenHitReq.prototype.clearHitType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenHitReq.prototype.hasHitType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFlyChickenHitNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgFlyChickenHitNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFlyChickenHitNtf.displayName = 'proto.MsgFlyChickenHitNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFlyChickenHitNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFlyChickenHitNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFlyChickenHitNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenHitNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    hitType: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFlyChickenHitNtf}
 */
proto.MsgFlyChickenHitNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFlyChickenHitNtf;
  return proto.MsgFlyChickenHitNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFlyChickenHitNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFlyChickenHitNtf}
 */
proto.MsgFlyChickenHitNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHitType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFlyChickenHitNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFlyChickenHitNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFlyChickenHitNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenHitNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 type = 1;
 * @return {number}
 */
proto.MsgFlyChickenHitNtf.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgFlyChickenHitNtf.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgFlyChickenHitNtf.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenHitNtf.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 hit_type = 2;
 * @return {number}
 */
proto.MsgFlyChickenHitNtf.prototype.getHitType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgFlyChickenHitNtf.prototype.setHitType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgFlyChickenHitNtf.prototype.clearHitType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenHitNtf.prototype.hasHitType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FlyChickenProp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FlyChickenProp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FlyChickenProp.displayName = 'proto.FlyChickenProp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FlyChickenProp.prototype.toObject = function(opt_includeInstance) {
  return proto.FlyChickenProp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FlyChickenProp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FlyChickenProp.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getField(msg, 1),
    propType: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FlyChickenProp}
 */
proto.FlyChickenProp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FlyChickenProp;
  return proto.FlyChickenProp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FlyChickenProp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FlyChickenProp}
 */
proto.FlyChickenProp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPropType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FlyChickenProp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FlyChickenProp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FlyChickenProp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FlyChickenProp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 height = 1;
 * @return {number}
 */
proto.FlyChickenProp.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.FlyChickenProp.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.FlyChickenProp.prototype.clearHeight = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FlyChickenProp.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 prop_type = 2;
 * @return {number}
 */
proto.FlyChickenProp.prototype.getPropType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.FlyChickenProp.prototype.setPropType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.FlyChickenProp.prototype.clearPropType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FlyChickenProp.prototype.hasPropType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFlyChickenPropsNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgFlyChickenPropsNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgFlyChickenPropsNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFlyChickenPropsNtf.displayName = 'proto.MsgFlyChickenPropsNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgFlyChickenPropsNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFlyChickenPropsNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFlyChickenPropsNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFlyChickenPropsNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenPropsNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    propInfoList: jspb.Message.toObjectList(msg.getPropInfoList(),
    proto.FlyChickenProp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFlyChickenPropsNtf}
 */
proto.MsgFlyChickenPropsNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFlyChickenPropsNtf;
  return proto.MsgFlyChickenPropsNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFlyChickenPropsNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFlyChickenPropsNtf}
 */
proto.MsgFlyChickenPropsNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.FlyChickenProp;
      reader.readMessage(value,proto.FlyChickenProp.deserializeBinaryFromReader);
      msg.addPropInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFlyChickenPropsNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFlyChickenPropsNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFlyChickenPropsNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenPropsNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.FlyChickenProp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FlyChickenProp prop_info = 1;
 * @return {!Array<!proto.FlyChickenProp>}
 */
proto.MsgFlyChickenPropsNtf.prototype.getPropInfoList = function() {
  return /** @type{!Array<!proto.FlyChickenProp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.FlyChickenProp, 1));
};


/** @param {!Array<!proto.FlyChickenProp>} value */
proto.MsgFlyChickenPropsNtf.prototype.setPropInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.FlyChickenProp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.FlyChickenProp}
 */
proto.MsgFlyChickenPropsNtf.prototype.addPropInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.FlyChickenProp, opt_index);
};


proto.MsgFlyChickenPropsNtf.prototype.clearPropInfoList = function() {
  this.setPropInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFlyChickenRoundOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgFlyChickenRoundOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFlyChickenRoundOverNtf.displayName = 'proto.MsgFlyChickenRoundOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFlyChickenRoundOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFlyChickenRoundOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFlyChickenRoundOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenRoundOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getField(msg, 1),
    winType: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFlyChickenRoundOverNtf}
 */
proto.MsgFlyChickenRoundOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFlyChickenRoundOverNtf;
  return proto.MsgFlyChickenRoundOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFlyChickenRoundOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFlyChickenRoundOverNtf}
 */
proto.MsgFlyChickenRoundOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWinType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFlyChickenRoundOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFlyChickenRoundOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFlyChickenRoundOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenRoundOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 round = 1;
 * @return {number}
 */
proto.MsgFlyChickenRoundOverNtf.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgFlyChickenRoundOverNtf.prototype.setRound = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgFlyChickenRoundOverNtf.prototype.clearRound = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenRoundOverNtf.prototype.hasRound = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 win_type = 2;
 * @return {number}
 */
proto.MsgFlyChickenRoundOverNtf.prototype.getWinType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgFlyChickenRoundOverNtf.prototype.setWinType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgFlyChickenRoundOverNtf.prototype.clearWinType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenRoundOverNtf.prototype.hasWinType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFlyChickenOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgFlyChickenOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFlyChickenOverNtf.displayName = 'proto.MsgFlyChickenOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFlyChickenOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFlyChickenOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFlyChickenOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFlyChickenOverNtf}
 */
proto.MsgFlyChickenOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFlyChickenOverNtf;
  return proto.MsgFlyChickenOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFlyChickenOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFlyChickenOverNtf}
 */
proto.MsgFlyChickenOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFlyChickenOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFlyChickenOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFlyChickenOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgFlyChickenOverNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgFlyChickenOverNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgFlyChickenOverNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenOverNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgFlyChickenOverNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgFlyChickenOverNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgFlyChickenOverNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenOverNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFlyChickenRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgFlyChickenRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFlyChickenRecoveryNtf.displayName = 'proto.MsgFlyChickenRecoveryNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFlyChickenRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFlyChickenRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFlyChickenRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getField(msg, 1),
    leftTime: jspb.Message.getField(msg, 2),
    hpValue: jspb.Message.getField(msg, 3),
    rivalHp: jspb.Message.getField(msg, 4),
    propInfo: (f = msg.getPropInfo()) && proto.FlyChickenProp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFlyChickenRecoveryNtf}
 */
proto.MsgFlyChickenRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFlyChickenRecoveryNtf;
  return proto.MsgFlyChickenRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFlyChickenRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFlyChickenRecoveryNtf}
 */
proto.MsgFlyChickenRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHpValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRivalHp(value);
      break;
    case 5:
      var value = new proto.FlyChickenProp;
      reader.readMessage(value,proto.FlyChickenProp.deserializeBinaryFromReader);
      msg.setPropInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFlyChickenRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFlyChickenRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFlyChickenRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFlyChickenRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getPropInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.FlyChickenProp.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 round = 1;
 * @return {number}
 */
proto.MsgFlyChickenRecoveryNtf.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgFlyChickenRecoveryNtf.prototype.setRound = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgFlyChickenRecoveryNtf.prototype.clearRound = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenRecoveryNtf.prototype.hasRound = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 left_time = 2;
 * @return {number}
 */
proto.MsgFlyChickenRecoveryNtf.prototype.getLeftTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgFlyChickenRecoveryNtf.prototype.setLeftTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgFlyChickenRecoveryNtf.prototype.clearLeftTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenRecoveryNtf.prototype.hasLeftTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 hp_value = 3;
 * @return {number}
 */
proto.MsgFlyChickenRecoveryNtf.prototype.getHpValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgFlyChickenRecoveryNtf.prototype.setHpValue = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgFlyChickenRecoveryNtf.prototype.clearHpValue = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenRecoveryNtf.prototype.hasHpValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 rival_hp = 4;
 * @return {number}
 */
proto.MsgFlyChickenRecoveryNtf.prototype.getRivalHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgFlyChickenRecoveryNtf.prototype.setRivalHp = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgFlyChickenRecoveryNtf.prototype.clearRivalHp = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenRecoveryNtf.prototype.hasRivalHp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FlyChickenProp prop_info = 5;
 * @return {?proto.FlyChickenProp}
 */
proto.MsgFlyChickenRecoveryNtf.prototype.getPropInfo = function() {
  return /** @type{?proto.FlyChickenProp} */ (
    jspb.Message.getWrapperField(this, proto.FlyChickenProp, 5));
};


/** @param {?proto.FlyChickenProp|undefined} value */
proto.MsgFlyChickenRecoveryNtf.prototype.setPropInfo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.MsgFlyChickenRecoveryNtf.prototype.clearPropInfo = function() {
  this.setPropInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFlyChickenRecoveryNtf.prototype.hasPropInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsStatusInfoBean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBattlegroundsStatusInfoBean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsStatusInfoBean.displayName = 'proto.MsgBattlegroundsStatusInfoBean';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsStatusInfoBean.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsStatusInfoBean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsStatusInfoBean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsStatusInfoBean.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    args1: jspb.Message.getField(msg, 2),
    args2: jspb.Message.getField(msg, 3),
    args3: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsStatusInfoBean}
 */
proto.MsgBattlegroundsStatusInfoBean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsStatusInfoBean;
  return proto.MsgBattlegroundsStatusInfoBean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsStatusInfoBean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsStatusInfoBean}
 */
proto.MsgBattlegroundsStatusInfoBean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArgs1(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArgs2(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArgs3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsStatusInfoBean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsStatusInfoBean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsStatusInfoBean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsStatusInfoBean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required uint32 type = 1;
 * @return {number}
 */
proto.MsgBattlegroundsStatusInfoBean.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsStatusInfoBean.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattlegroundsStatusInfoBean.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsStatusInfoBean.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 args1 = 2;
 * @return {number}
 */
proto.MsgBattlegroundsStatusInfoBean.prototype.getArgs1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsStatusInfoBean.prototype.setArgs1 = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBattlegroundsStatusInfoBean.prototype.clearArgs1 = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsStatusInfoBean.prototype.hasArgs1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 args2 = 3;
 * @return {number}
 */
proto.MsgBattlegroundsStatusInfoBean.prototype.getArgs2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsStatusInfoBean.prototype.setArgs2 = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBattlegroundsStatusInfoBean.prototype.clearArgs2 = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsStatusInfoBean.prototype.hasArgs2 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 args3 = 4;
 * @return {number}
 */
proto.MsgBattlegroundsStatusInfoBean.prototype.getArgs3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsStatusInfoBean.prototype.setArgs3 = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgBattlegroundsStatusInfoBean.prototype.clearArgs3 = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsStatusInfoBean.prototype.hasArgs3 = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsPlayerInfoBean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBattlegroundsPlayerInfoBean.repeatedFields_, null);
};
goog.inherits(proto.MsgBattlegroundsPlayerInfoBean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsPlayerInfoBean.displayName = 'proto.MsgBattlegroundsPlayerInfoBean';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBattlegroundsPlayerInfoBean.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsPlayerInfoBean.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsPlayerInfoBean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsPlayerInfoBean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsPlayerInfoBean.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.MsgBattlegroundsStatusInfoBean.toObject, includeInstance),
    itemList: jspb.Message.toObjectList(msg.getItemList(),
    proto.MsgBattlegroundsStatusInfoBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsPlayerInfoBean}
 */
proto.MsgBattlegroundsPlayerInfoBean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsPlayerInfoBean;
  return proto.MsgBattlegroundsPlayerInfoBean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsPlayerInfoBean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsPlayerInfoBean}
 */
proto.MsgBattlegroundsPlayerInfoBean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.MsgBattlegroundsStatusInfoBean;
      reader.readMessage(value,proto.MsgBattlegroundsStatusInfoBean.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    case 3:
      var value = new proto.MsgBattlegroundsStatusInfoBean;
      reader.readMessage(value,proto.MsgBattlegroundsStatusInfoBean.deserializeBinaryFromReader);
      msg.addItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsPlayerInfoBean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsPlayerInfoBean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsPlayerInfoBean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsPlayerInfoBean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgBattlegroundsStatusInfoBean.serializeBinaryToWriter
    );
  }
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.MsgBattlegroundsStatusInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.MsgBattlegroundsPlayerInfoBean.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsPlayerInfoBean.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattlegroundsPlayerInfoBean.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsPlayerInfoBean.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated MsgBattlegroundsStatusInfoBean info = 2;
 * @return {!Array<!proto.MsgBattlegroundsStatusInfoBean>}
 */
proto.MsgBattlegroundsPlayerInfoBean.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.MsgBattlegroundsStatusInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgBattlegroundsStatusInfoBean, 2));
};


/** @param {!Array<!proto.MsgBattlegroundsStatusInfoBean>} value */
proto.MsgBattlegroundsPlayerInfoBean.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgBattlegroundsStatusInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgBattlegroundsStatusInfoBean}
 */
proto.MsgBattlegroundsPlayerInfoBean.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgBattlegroundsStatusInfoBean, opt_index);
};


proto.MsgBattlegroundsPlayerInfoBean.prototype.clearInfoList = function() {
  this.setInfoList([]);
};


/**
 * repeated MsgBattlegroundsStatusInfoBean item = 3;
 * @return {!Array<!proto.MsgBattlegroundsStatusInfoBean>}
 */
proto.MsgBattlegroundsPlayerInfoBean.prototype.getItemList = function() {
  return /** @type{!Array<!proto.MsgBattlegroundsStatusInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgBattlegroundsStatusInfoBean, 3));
};


/** @param {!Array<!proto.MsgBattlegroundsStatusInfoBean>} value */
proto.MsgBattlegroundsPlayerInfoBean.prototype.setItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.MsgBattlegroundsStatusInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgBattlegroundsStatusInfoBean}
 */
proto.MsgBattlegroundsPlayerInfoBean.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.MsgBattlegroundsStatusInfoBean, opt_index);
};


proto.MsgBattlegroundsPlayerInfoBean.prototype.clearItemList = function() {
  this.setItemList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsAi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBattlegroundsAi.repeatedFields_, null);
};
goog.inherits(proto.MsgBattlegroundsAi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsAi.displayName = 'proto.MsgBattlegroundsAi';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBattlegroundsAi.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsAi.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsAi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsAi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsAi.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: jspb.Message.getField(msg, 1),
    robotList: jspb.Message.toObjectList(msg.getRobotList(),
    proto.MsgBattlegroundsPlayerInfoBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsAi}
 */
proto.MsgBattlegroundsAi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsAi;
  return proto.MsgBattlegroundsAi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsAi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsAi}
 */
proto.MsgBattlegroundsAi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayer(value);
      break;
    case 2:
      var value = new proto.MsgBattlegroundsPlayerInfoBean;
      reader.readMessage(value,proto.MsgBattlegroundsPlayerInfoBean.deserializeBinaryFromReader);
      msg.addRobot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsAi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsAi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsAi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsAi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRobotList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgBattlegroundsPlayerInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 player = 1;
 * @return {number}
 */
proto.MsgBattlegroundsAi.prototype.getPlayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsAi.prototype.setPlayer = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattlegroundsAi.prototype.clearPlayer = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsAi.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated MsgBattlegroundsPlayerInfoBean robot = 2;
 * @return {!Array<!proto.MsgBattlegroundsPlayerInfoBean>}
 */
proto.MsgBattlegroundsAi.prototype.getRobotList = function() {
  return /** @type{!Array<!proto.MsgBattlegroundsPlayerInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgBattlegroundsPlayerInfoBean, 2));
};


/** @param {!Array<!proto.MsgBattlegroundsPlayerInfoBean>} value */
proto.MsgBattlegroundsAi.prototype.setRobotList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgBattlegroundsPlayerInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgBattlegroundsPlayerInfoBean}
 */
proto.MsgBattlegroundsAi.prototype.addRobot = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgBattlegroundsPlayerInfoBean, opt_index);
};


proto.MsgBattlegroundsAi.prototype.clearRobotList = function() {
  this.setRobotList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsStartPosReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBattlegroundsStartPosReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsStartPosReq.displayName = 'proto.MsgBattlegroundsStartPosReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsStartPosReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsStartPosReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsStartPosReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsStartPosReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsStartPosReq}
 */
proto.MsgBattlegroundsStartPosReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsStartPosReq;
  return proto.MsgBattlegroundsStartPosReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsStartPosReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsStartPosReq}
 */
proto.MsgBattlegroundsStartPosReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsStartPosReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsStartPosReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsStartPosReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsStartPosReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 x = 1;
 * @return {number}
 */
proto.MsgBattlegroundsStartPosReq.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsStartPosReq.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattlegroundsStartPosReq.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsStartPosReq.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 y = 2;
 * @return {number}
 */
proto.MsgBattlegroundsStartPosReq.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsStartPosReq.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBattlegroundsStartPosReq.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsStartPosReq.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBattlegroundsStartNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgBattlegroundsStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsStartNtf.displayName = 'proto.MsgBattlegroundsStartNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBattlegroundsStartNtf.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getField(msg, 1),
    startInfoList: jspb.Message.toObjectList(msg.getStartInfoList(),
    proto.MsgBattlegroundsPlayerInfoBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsStartNtf}
 */
proto.MsgBattlegroundsStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsStartNtf;
  return proto.MsgBattlegroundsStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsStartNtf}
 */
proto.MsgBattlegroundsStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.MsgBattlegroundsPlayerInfoBean;
      reader.readMessage(value,proto.MsgBattlegroundsPlayerInfoBean.deserializeBinaryFromReader);
      msg.addStartInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStartInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgBattlegroundsPlayerInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 time = 1;
 * @return {number}
 */
proto.MsgBattlegroundsStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattlegroundsStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated MsgBattlegroundsPlayerInfoBean start_info = 2;
 * @return {!Array<!proto.MsgBattlegroundsPlayerInfoBean>}
 */
proto.MsgBattlegroundsStartNtf.prototype.getStartInfoList = function() {
  return /** @type{!Array<!proto.MsgBattlegroundsPlayerInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgBattlegroundsPlayerInfoBean, 2));
};


/** @param {!Array<!proto.MsgBattlegroundsPlayerInfoBean>} value */
proto.MsgBattlegroundsStartNtf.prototype.setStartInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgBattlegroundsPlayerInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgBattlegroundsPlayerInfoBean}
 */
proto.MsgBattlegroundsStartNtf.prototype.addStartInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgBattlegroundsPlayerInfoBean, opt_index);
};


proto.MsgBattlegroundsStartNtf.prototype.clearStartInfoList = function() {
  this.setStartInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsAiNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBattlegroundsAiNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgBattlegroundsAiNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsAiNtf.displayName = 'proto.MsgBattlegroundsAiNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBattlegroundsAiNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsAiNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsAiNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsAiNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsAiNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    aiList: jspb.Message.toObjectList(msg.getAiList(),
    proto.MsgBattlegroundsAi.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsAiNtf}
 */
proto.MsgBattlegroundsAiNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsAiNtf;
  return proto.MsgBattlegroundsAiNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsAiNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsAiNtf}
 */
proto.MsgBattlegroundsAiNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgBattlegroundsAi;
      reader.readMessage(value,proto.MsgBattlegroundsAi.deserializeBinaryFromReader);
      msg.addAi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsAiNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsAiNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsAiNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsAiNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAiList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MsgBattlegroundsAi.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MsgBattlegroundsAi ai = 1;
 * @return {!Array<!proto.MsgBattlegroundsAi>}
 */
proto.MsgBattlegroundsAiNtf.prototype.getAiList = function() {
  return /** @type{!Array<!proto.MsgBattlegroundsAi>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgBattlegroundsAi, 1));
};


/** @param {!Array<!proto.MsgBattlegroundsAi>} value */
proto.MsgBattlegroundsAiNtf.prototype.setAiList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MsgBattlegroundsAi=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgBattlegroundsAi}
 */
proto.MsgBattlegroundsAiNtf.prototype.addAi = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MsgBattlegroundsAi, opt_index);
};


proto.MsgBattlegroundsAiNtf.prototype.clearAiList = function() {
  this.setAiList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBattlegroundsResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsResultNtf.displayName = 'proto.MsgBattlegroundsResultNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    scoreLevel: jspb.Message.getField(msg, 1),
    ranking: jspb.Message.getField(msg, 2),
    kill: jspb.Message.getField(msg, 3),
    moveDistance: jspb.Message.getField(msg, 4),
    damage: jspb.Message.getField(msg, 5),
    hitRate: jspb.Message.getField(msg, 6),
    exp: jspb.Message.getField(msg, 7),
    gold: jspb.Message.getField(msg, 8),
    supply: jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsResultNtf}
 */
proto.MsgBattlegroundsResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsResultNtf;
  return proto.MsgBattlegroundsResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsResultNtf}
 */
proto.MsgBattlegroundsResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScoreLevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRanking(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKill(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMoveDistance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDamage(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHitRate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGold(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSupply(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * required uint32 score_level = 1;
 * @return {number}
 */
proto.MsgBattlegroundsResultNtf.prototype.getScoreLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsResultNtf.prototype.setScoreLevel = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattlegroundsResultNtf.prototype.clearScoreLevel = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsResultNtf.prototype.hasScoreLevel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 ranking = 2;
 * @return {number}
 */
proto.MsgBattlegroundsResultNtf.prototype.getRanking = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsResultNtf.prototype.setRanking = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBattlegroundsResultNtf.prototype.clearRanking = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsResultNtf.prototype.hasRanking = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 kill = 3;
 * @return {number}
 */
proto.MsgBattlegroundsResultNtf.prototype.getKill = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsResultNtf.prototype.setKill = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBattlegroundsResultNtf.prototype.clearKill = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsResultNtf.prototype.hasKill = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 move_distance = 4;
 * @return {number}
 */
proto.MsgBattlegroundsResultNtf.prototype.getMoveDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsResultNtf.prototype.setMoveDistance = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgBattlegroundsResultNtf.prototype.clearMoveDistance = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsResultNtf.prototype.hasMoveDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 damage = 5;
 * @return {number}
 */
proto.MsgBattlegroundsResultNtf.prototype.getDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsResultNtf.prototype.setDamage = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgBattlegroundsResultNtf.prototype.clearDamage = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsResultNtf.prototype.hasDamage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 hit_rate = 6;
 * @return {number}
 */
proto.MsgBattlegroundsResultNtf.prototype.getHitRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsResultNtf.prototype.setHitRate = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgBattlegroundsResultNtf.prototype.clearHitRate = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsResultNtf.prototype.hasHitRate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 exp = 7;
 * @return {number}
 */
proto.MsgBattlegroundsResultNtf.prototype.getExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsResultNtf.prototype.setExp = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgBattlegroundsResultNtf.prototype.clearExp = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsResultNtf.prototype.hasExp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 gold = 8;
 * @return {number}
 */
proto.MsgBattlegroundsResultNtf.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsResultNtf.prototype.setGold = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgBattlegroundsResultNtf.prototype.clearGold = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsResultNtf.prototype.hasGold = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required uint32 supply = 9;
 * @return {number}
 */
proto.MsgBattlegroundsResultNtf.prototype.getSupply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsResultNtf.prototype.setSupply = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.MsgBattlegroundsResultNtf.prototype.clearSupply = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsResultNtf.prototype.hasSupply = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsPosBean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBattlegroundsPosBean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsPosBean.displayName = 'proto.MsgBattlegroundsPosBean';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsPosBean.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsPosBean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsPosBean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsPosBean.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    posX: jspb.Message.getField(msg, 2),
    posY: jspb.Message.getField(msg, 3),
    movedirX: jspb.Message.getField(msg, 4),
    movedirY: jspb.Message.getField(msg, 5),
    moveSpeed: jspb.Message.getField(msg, 6),
    eulerY: jspb.Message.getField(msg, 7),
    movementType: jspb.Message.getField(msg, 8),
    stateType: jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsPosBean}
 */
proto.MsgBattlegroundsPosBean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsPosBean;
  return proto.MsgBattlegroundsPosBean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsPosBean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsPosBean}
 */
proto.MsgBattlegroundsPosBean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMovedirX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMovedirY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMoveSpeed(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEulerY(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMovementType(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStateType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsPosBean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsPosBean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsPosBean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsPosBean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.MsgBattlegroundsPosBean.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsPosBean.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattlegroundsPosBean.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsPosBean.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 pos_x = 2;
 * @return {number}
 */
proto.MsgBattlegroundsPosBean.prototype.getPosX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsPosBean.prototype.setPosX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBattlegroundsPosBean.prototype.clearPosX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsPosBean.prototype.hasPosX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 pos_y = 3;
 * @return {number}
 */
proto.MsgBattlegroundsPosBean.prototype.getPosY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsPosBean.prototype.setPosY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBattlegroundsPosBean.prototype.clearPosY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsPosBean.prototype.hasPosY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 movedir_x = 4;
 * @return {number}
 */
proto.MsgBattlegroundsPosBean.prototype.getMovedirX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsPosBean.prototype.setMovedirX = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgBattlegroundsPosBean.prototype.clearMovedirX = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsPosBean.prototype.hasMovedirX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 movedir_y = 5;
 * @return {number}
 */
proto.MsgBattlegroundsPosBean.prototype.getMovedirY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsPosBean.prototype.setMovedirY = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgBattlegroundsPosBean.prototype.clearMovedirY = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsPosBean.prototype.hasMovedirY = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 move_speed = 6;
 * @return {number}
 */
proto.MsgBattlegroundsPosBean.prototype.getMoveSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsPosBean.prototype.setMoveSpeed = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgBattlegroundsPosBean.prototype.clearMoveSpeed = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsPosBean.prototype.hasMoveSpeed = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 euler_y = 7;
 * @return {number}
 */
proto.MsgBattlegroundsPosBean.prototype.getEulerY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsPosBean.prototype.setEulerY = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgBattlegroundsPosBean.prototype.clearEulerY = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsPosBean.prototype.hasEulerY = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int32 movement_type = 8;
 * @return {number}
 */
proto.MsgBattlegroundsPosBean.prototype.getMovementType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsPosBean.prototype.setMovementType = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgBattlegroundsPosBean.prototype.clearMovementType = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsPosBean.prototype.hasMovementType = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required int32 state_type = 9;
 * @return {number}
 */
proto.MsgBattlegroundsPosBean.prototype.getStateType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsPosBean.prototype.setStateType = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.MsgBattlegroundsPosBean.prototype.clearStateType = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsPosBean.prototype.hasStateType = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsPosReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBattlegroundsPosReq.repeatedFields_, null);
};
goog.inherits(proto.MsgBattlegroundsPosReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsPosReq.displayName = 'proto.MsgBattlegroundsPosReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBattlegroundsPosReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsPosReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsPosReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsPosReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsPosReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    posList: jspb.Message.toObjectList(msg.getPosList(),
    proto.MsgBattlegroundsPosBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsPosReq}
 */
proto.MsgBattlegroundsPosReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsPosReq;
  return proto.MsgBattlegroundsPosReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsPosReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsPosReq}
 */
proto.MsgBattlegroundsPosReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgBattlegroundsPosBean;
      reader.readMessage(value,proto.MsgBattlegroundsPosBean.deserializeBinaryFromReader);
      msg.addPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsPosReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsPosReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsPosReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsPosReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MsgBattlegroundsPosBean.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MsgBattlegroundsPosBean pos = 1;
 * @return {!Array<!proto.MsgBattlegroundsPosBean>}
 */
proto.MsgBattlegroundsPosReq.prototype.getPosList = function() {
  return /** @type{!Array<!proto.MsgBattlegroundsPosBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgBattlegroundsPosBean, 1));
};


/** @param {!Array<!proto.MsgBattlegroundsPosBean>} value */
proto.MsgBattlegroundsPosReq.prototype.setPosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MsgBattlegroundsPosBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgBattlegroundsPosBean}
 */
proto.MsgBattlegroundsPosReq.prototype.addPos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MsgBattlegroundsPosBean, opt_index);
};


proto.MsgBattlegroundsPosReq.prototype.clearPosList = function() {
  this.setPosList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsPosNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBattlegroundsPosNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgBattlegroundsPosNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsPosNtf.displayName = 'proto.MsgBattlegroundsPosNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBattlegroundsPosNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsPosNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsPosNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsPosNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsPosNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    posList: jspb.Message.toObjectList(msg.getPosList(),
    proto.MsgBattlegroundsPosBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsPosNtf}
 */
proto.MsgBattlegroundsPosNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsPosNtf;
  return proto.MsgBattlegroundsPosNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsPosNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsPosNtf}
 */
proto.MsgBattlegroundsPosNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgBattlegroundsPosBean;
      reader.readMessage(value,proto.MsgBattlegroundsPosBean.deserializeBinaryFromReader);
      msg.addPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsPosNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsPosNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsPosNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsPosNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MsgBattlegroundsPosBean.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MsgBattlegroundsPosBean pos = 1;
 * @return {!Array<!proto.MsgBattlegroundsPosBean>}
 */
proto.MsgBattlegroundsPosNtf.prototype.getPosList = function() {
  return /** @type{!Array<!proto.MsgBattlegroundsPosBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgBattlegroundsPosBean, 1));
};


/** @param {!Array<!proto.MsgBattlegroundsPosBean>} value */
proto.MsgBattlegroundsPosNtf.prototype.setPosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MsgBattlegroundsPosBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgBattlegroundsPosBean}
 */
proto.MsgBattlegroundsPosNtf.prototype.addPos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MsgBattlegroundsPosBean, opt_index);
};


proto.MsgBattlegroundsPosNtf.prototype.clearPosList = function() {
  this.setPosList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsPosCorrectionNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBattlegroundsPosCorrectionNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgBattlegroundsPosCorrectionNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsPosCorrectionNtf.displayName = 'proto.MsgBattlegroundsPosCorrectionNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBattlegroundsPosCorrectionNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsPosCorrectionNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsPosCorrectionNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsPosCorrectionNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsPosCorrectionNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    posList: jspb.Message.toObjectList(msg.getPosList(),
    proto.MsgBattlegroundsPosBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsPosCorrectionNtf}
 */
proto.MsgBattlegroundsPosCorrectionNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsPosCorrectionNtf;
  return proto.MsgBattlegroundsPosCorrectionNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsPosCorrectionNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsPosCorrectionNtf}
 */
proto.MsgBattlegroundsPosCorrectionNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgBattlegroundsPosBean;
      reader.readMessage(value,proto.MsgBattlegroundsPosBean.deserializeBinaryFromReader);
      msg.addPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsPosCorrectionNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsPosCorrectionNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsPosCorrectionNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsPosCorrectionNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MsgBattlegroundsPosBean.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MsgBattlegroundsPosBean pos = 1;
 * @return {!Array<!proto.MsgBattlegroundsPosBean>}
 */
proto.MsgBattlegroundsPosCorrectionNtf.prototype.getPosList = function() {
  return /** @type{!Array<!proto.MsgBattlegroundsPosBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgBattlegroundsPosBean, 1));
};


/** @param {!Array<!proto.MsgBattlegroundsPosBean>} value */
proto.MsgBattlegroundsPosCorrectionNtf.prototype.setPosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MsgBattlegroundsPosBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgBattlegroundsPosBean}
 */
proto.MsgBattlegroundsPosCorrectionNtf.prototype.addPos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MsgBattlegroundsPosBean, opt_index);
};


proto.MsgBattlegroundsPosCorrectionNtf.prototype.clearPosList = function() {
  this.setPosList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsAttackReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBattlegroundsAttackReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsAttackReq.displayName = 'proto.MsgBattlegroundsAttackReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsAttackReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsAttackReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsAttackReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsAttackReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    posX: jspb.Message.getField(msg, 2),
    posY: jspb.Message.getField(msg, 3),
    hurtId: jspb.Message.getField(msg, 4),
    hurtPosX: jspb.Message.getField(msg, 5),
    hurtPosY: jspb.Message.getField(msg, 6),
    equipId: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsAttackReq}
 */
proto.MsgBattlegroundsAttackReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsAttackReq;
  return proto.MsgBattlegroundsAttackReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsAttackReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsAttackReq}
 */
proto.MsgBattlegroundsAttackReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHurtId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHurtPosX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHurtPosY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEquipId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsAttackReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsAttackReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsAttackReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsAttackReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.MsgBattlegroundsAttackReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsAttackReq.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattlegroundsAttackReq.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsAttackReq.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 pos_x = 2;
 * @return {number}
 */
proto.MsgBattlegroundsAttackReq.prototype.getPosX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsAttackReq.prototype.setPosX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBattlegroundsAttackReq.prototype.clearPosX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsAttackReq.prototype.hasPosX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 pos_y = 3;
 * @return {number}
 */
proto.MsgBattlegroundsAttackReq.prototype.getPosY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsAttackReq.prototype.setPosY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBattlegroundsAttackReq.prototype.clearPosY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsAttackReq.prototype.hasPosY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 hurt_id = 4;
 * @return {number}
 */
proto.MsgBattlegroundsAttackReq.prototype.getHurtId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsAttackReq.prototype.setHurtId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgBattlegroundsAttackReq.prototype.clearHurtId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsAttackReq.prototype.hasHurtId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 hurt_pos_x = 5;
 * @return {number}
 */
proto.MsgBattlegroundsAttackReq.prototype.getHurtPosX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsAttackReq.prototype.setHurtPosX = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgBattlegroundsAttackReq.prototype.clearHurtPosX = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsAttackReq.prototype.hasHurtPosX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 hurt_pos_y = 6;
 * @return {number}
 */
proto.MsgBattlegroundsAttackReq.prototype.getHurtPosY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsAttackReq.prototype.setHurtPosY = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgBattlegroundsAttackReq.prototype.clearHurtPosY = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsAttackReq.prototype.hasHurtPosY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 equip_id = 7;
 * @return {number}
 */
proto.MsgBattlegroundsAttackReq.prototype.getEquipId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsAttackReq.prototype.setEquipId = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgBattlegroundsAttackReq.prototype.clearEquipId = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsAttackReq.prototype.hasEquipId = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsDiedInfoBean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBattlegroundsDiedInfoBean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsDiedInfoBean.displayName = 'proto.MsgBattlegroundsDiedInfoBean';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsDiedInfoBean.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsDiedInfoBean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsDiedInfoBean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsDiedInfoBean.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    attackId: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsDiedInfoBean}
 */
proto.MsgBattlegroundsDiedInfoBean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsDiedInfoBean;
  return proto.MsgBattlegroundsDiedInfoBean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsDiedInfoBean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsDiedInfoBean}
 */
proto.MsgBattlegroundsDiedInfoBean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAttackId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsDiedInfoBean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsDiedInfoBean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsDiedInfoBean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsDiedInfoBean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.MsgBattlegroundsDiedInfoBean.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsDiedInfoBean.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattlegroundsDiedInfoBean.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsDiedInfoBean.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 attack_id = 2;
 * @return {number}
 */
proto.MsgBattlegroundsDiedInfoBean.prototype.getAttackId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsDiedInfoBean.prototype.setAttackId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBattlegroundsDiedInfoBean.prototype.clearAttackId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsDiedInfoBean.prototype.hasAttackId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsDiedNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBattlegroundsDiedNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgBattlegroundsDiedNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsDiedNtf.displayName = 'proto.MsgBattlegroundsDiedNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBattlegroundsDiedNtf.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsDiedNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsDiedNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsDiedNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsDiedNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    aliveNum: jspb.Message.getField(msg, 1),
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.MsgBattlegroundsDiedInfoBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsDiedNtf}
 */
proto.MsgBattlegroundsDiedNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsDiedNtf;
  return proto.MsgBattlegroundsDiedNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsDiedNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsDiedNtf}
 */
proto.MsgBattlegroundsDiedNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAliveNum(value);
      break;
    case 2:
      var value = new proto.MsgBattlegroundsDiedInfoBean;
      reader.readMessage(value,proto.MsgBattlegroundsDiedInfoBean.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsDiedNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsDiedNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsDiedNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsDiedNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MsgBattlegroundsDiedInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 alive_num = 1;
 * @return {number}
 */
proto.MsgBattlegroundsDiedNtf.prototype.getAliveNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsDiedNtf.prototype.setAliveNum = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattlegroundsDiedNtf.prototype.clearAliveNum = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsDiedNtf.prototype.hasAliveNum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated MsgBattlegroundsDiedInfoBean info = 2;
 * @return {!Array<!proto.MsgBattlegroundsDiedInfoBean>}
 */
proto.MsgBattlegroundsDiedNtf.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.MsgBattlegroundsDiedInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgBattlegroundsDiedInfoBean, 2));
};


/** @param {!Array<!proto.MsgBattlegroundsDiedInfoBean>} value */
proto.MsgBattlegroundsDiedNtf.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MsgBattlegroundsDiedInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgBattlegroundsDiedInfoBean}
 */
proto.MsgBattlegroundsDiedNtf.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MsgBattlegroundsDiedInfoBean, opt_index);
};


proto.MsgBattlegroundsDiedNtf.prototype.clearInfoList = function() {
  this.setInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsPlayerInfoNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgBattlegroundsPlayerInfoNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgBattlegroundsPlayerInfoNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsPlayerInfoNtf.displayName = 'proto.MsgBattlegroundsPlayerInfoNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgBattlegroundsPlayerInfoNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsPlayerInfoNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsPlayerInfoNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsPlayerInfoNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsPlayerInfoNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.MsgBattlegroundsPlayerInfoBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsPlayerInfoNtf}
 */
proto.MsgBattlegroundsPlayerInfoNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsPlayerInfoNtf;
  return proto.MsgBattlegroundsPlayerInfoNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsPlayerInfoNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsPlayerInfoNtf}
 */
proto.MsgBattlegroundsPlayerInfoNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgBattlegroundsPlayerInfoBean;
      reader.readMessage(value,proto.MsgBattlegroundsPlayerInfoBean.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsPlayerInfoNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsPlayerInfoNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsPlayerInfoNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsPlayerInfoNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MsgBattlegroundsPlayerInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MsgBattlegroundsPlayerInfoBean info = 1;
 * @return {!Array<!proto.MsgBattlegroundsPlayerInfoBean>}
 */
proto.MsgBattlegroundsPlayerInfoNtf.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.MsgBattlegroundsPlayerInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgBattlegroundsPlayerInfoBean, 1));
};


/** @param {!Array<!proto.MsgBattlegroundsPlayerInfoBean>} value */
proto.MsgBattlegroundsPlayerInfoNtf.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MsgBattlegroundsPlayerInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgBattlegroundsPlayerInfoBean}
 */
proto.MsgBattlegroundsPlayerInfoNtf.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MsgBattlegroundsPlayerInfoBean, opt_index);
};


proto.MsgBattlegroundsPlayerInfoNtf.prototype.clearInfoList = function() {
  this.setInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgMapItemInfoBean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgMapItemInfoBean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgMapItemInfoBean.displayName = 'proto.MsgMapItemInfoBean';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgMapItemInfoBean.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgMapItemInfoBean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgMapItemInfoBean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemInfoBean.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    belongTable: jspb.Message.getField(msg, 2),
    itemId: jspb.Message.getField(msg, 3),
    posX: jspb.Message.getField(msg, 4),
    posY: jspb.Message.getField(msg, 5),
    posZ: jspb.Message.getField(msg, 6),
    leftover: jspb.Message.getField(msg, 7),
    bulletId: jspb.Message.getField(msg, 8),
    bulletCount: jspb.Message.getField(msg, 9),
    name: jspb.Message.getField(msg, 10),
    assetName: jspb.Message.getField(msg, 11),
    desc: jspb.Message.getField(msg, 12),
    isRot: jspb.Message.getField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgMapItemInfoBean}
 */
proto.MsgMapItemInfoBean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgMapItemInfoBean;
  return proto.MsgMapItemInfoBean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgMapItemInfoBean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgMapItemInfoBean}
 */
proto.MsgMapItemInfoBean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBelongTable(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setItemId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosZ(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftover(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBulletId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBulletCount(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetName(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIsRot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgMapItemInfoBean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgMapItemInfoBean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgMapItemInfoBean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemInfoBean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.MsgMapItemInfoBean.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgMapItemInfoBean.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgMapItemInfoBean.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemInfoBean.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 belong_table = 2;
 * @return {number}
 */
proto.MsgMapItemInfoBean.prototype.getBelongTable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgMapItemInfoBean.prototype.setBelongTable = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgMapItemInfoBean.prototype.clearBelongTable = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemInfoBean.prototype.hasBelongTable = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 item_id = 3;
 * @return {number}
 */
proto.MsgMapItemInfoBean.prototype.getItemId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgMapItemInfoBean.prototype.setItemId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgMapItemInfoBean.prototype.clearItemId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemInfoBean.prototype.hasItemId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 pos_x = 4;
 * @return {number}
 */
proto.MsgMapItemInfoBean.prototype.getPosX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgMapItemInfoBean.prototype.setPosX = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgMapItemInfoBean.prototype.clearPosX = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemInfoBean.prototype.hasPosX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 pos_y = 5;
 * @return {number}
 */
proto.MsgMapItemInfoBean.prototype.getPosY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgMapItemInfoBean.prototype.setPosY = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgMapItemInfoBean.prototype.clearPosY = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemInfoBean.prototype.hasPosY = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 pos_z = 6;
 * @return {number}
 */
proto.MsgMapItemInfoBean.prototype.getPosZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgMapItemInfoBean.prototype.setPosZ = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgMapItemInfoBean.prototype.clearPosZ = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemInfoBean.prototype.hasPosZ = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 leftover = 7;
 * @return {number}
 */
proto.MsgMapItemInfoBean.prototype.getLeftover = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgMapItemInfoBean.prototype.setLeftover = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgMapItemInfoBean.prototype.clearLeftover = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemInfoBean.prototype.hasLeftover = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 bullet_id = 8;
 * @return {number}
 */
proto.MsgMapItemInfoBean.prototype.getBulletId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.MsgMapItemInfoBean.prototype.setBulletId = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgMapItemInfoBean.prototype.clearBulletId = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemInfoBean.prototype.hasBulletId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 bullet_count = 9;
 * @return {number}
 */
proto.MsgMapItemInfoBean.prototype.getBulletCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.MsgMapItemInfoBean.prototype.setBulletCount = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.MsgMapItemInfoBean.prototype.clearBulletCount = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemInfoBean.prototype.hasBulletCount = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required string name = 10;
 * @return {string}
 */
proto.MsgMapItemInfoBean.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.MsgMapItemInfoBean.prototype.setName = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.MsgMapItemInfoBean.prototype.clearName = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemInfoBean.prototype.hasName = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required string asset_name = 11;
 * @return {string}
 */
proto.MsgMapItemInfoBean.prototype.getAssetName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.MsgMapItemInfoBean.prototype.setAssetName = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.MsgMapItemInfoBean.prototype.clearAssetName = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemInfoBean.prototype.hasAssetName = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required string desc = 12;
 * @return {string}
 */
proto.MsgMapItemInfoBean.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.MsgMapItemInfoBean.prototype.setDesc = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.MsgMapItemInfoBean.prototype.clearDesc = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemInfoBean.prototype.hasDesc = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required uint32 is_rot = 13;
 * @return {number}
 */
proto.MsgMapItemInfoBean.prototype.getIsRot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.MsgMapItemInfoBean.prototype.setIsRot = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.MsgMapItemInfoBean.prototype.clearIsRot = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemInfoBean.prototype.hasIsRot = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgMapItemInitNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgMapItemInitNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgMapItemInitNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgMapItemInitNtf.displayName = 'proto.MsgMapItemInitNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgMapItemInitNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgMapItemInitNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgMapItemInitNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgMapItemInitNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemInitNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.MsgMapItemInfoBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgMapItemInitNtf}
 */
proto.MsgMapItemInitNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgMapItemInitNtf;
  return proto.MsgMapItemInitNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgMapItemInitNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgMapItemInitNtf}
 */
proto.MsgMapItemInitNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgMapItemInfoBean;
      reader.readMessage(value,proto.MsgMapItemInfoBean.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgMapItemInitNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgMapItemInitNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgMapItemInitNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemInitNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MsgMapItemInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MsgMapItemInfoBean infos = 1;
 * @return {!Array<!proto.MsgMapItemInfoBean>}
 */
proto.MsgMapItemInitNtf.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.MsgMapItemInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgMapItemInfoBean, 1));
};


/** @param {!Array<!proto.MsgMapItemInfoBean>} value */
proto.MsgMapItemInitNtf.prototype.setInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MsgMapItemInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgMapItemInfoBean}
 */
proto.MsgMapItemInitNtf.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MsgMapItemInfoBean, opt_index);
};


proto.MsgMapItemInitNtf.prototype.clearInfosList = function() {
  this.setInfosList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgMapItemRemoveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgMapItemRemoveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgMapItemRemoveReq.displayName = 'proto.MsgMapItemRemoveReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgMapItemRemoveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgMapItemRemoveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgMapItemRemoveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemRemoveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    id: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgMapItemRemoveReq}
 */
proto.MsgMapItemRemoveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgMapItemRemoveReq;
  return proto.MsgMapItemRemoveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgMapItemRemoveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgMapItemRemoveReq}
 */
proto.MsgMapItemRemoveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgMapItemRemoveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgMapItemRemoveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgMapItemRemoveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemRemoveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgMapItemRemoveReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgMapItemRemoveReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgMapItemRemoveReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemRemoveReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.MsgMapItemRemoveReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgMapItemRemoveReq.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgMapItemRemoveReq.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemRemoveReq.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgMapItemRemoveRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgMapItemRemoveRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgMapItemRemoveRep.displayName = 'proto.MsgMapItemRemoveRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgMapItemRemoveRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgMapItemRemoveRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgMapItemRemoveRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemRemoveRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgMapItemRemoveRep}
 */
proto.MsgMapItemRemoveRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgMapItemRemoveRep;
  return proto.MsgMapItemRemoveRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgMapItemRemoveRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgMapItemRemoveRep}
 */
proto.MsgMapItemRemoveRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgMapItemRemoveRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgMapItemRemoveRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgMapItemRemoveRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemRemoveRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgMapItemRemoveRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgMapItemRemoveRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgMapItemRemoveRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemRemoveRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgMapItemRemoveNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgMapItemRemoveNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgMapItemRemoveNtf.displayName = 'proto.MsgMapItemRemoveNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgMapItemRemoveNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgMapItemRemoveNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgMapItemRemoveNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemRemoveNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    id: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgMapItemRemoveNtf}
 */
proto.MsgMapItemRemoveNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgMapItemRemoveNtf;
  return proto.MsgMapItemRemoveNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgMapItemRemoveNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgMapItemRemoveNtf}
 */
proto.MsgMapItemRemoveNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgMapItemRemoveNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgMapItemRemoveNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgMapItemRemoveNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemRemoveNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgMapItemRemoveNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgMapItemRemoveNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgMapItemRemoveNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemRemoveNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.MsgMapItemRemoveNtf.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgMapItemRemoveNtf.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgMapItemRemoveNtf.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemRemoveNtf.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgMapItemAddReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgMapItemAddReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgMapItemAddReq.displayName = 'proto.MsgMapItemAddReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgMapItemAddReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgMapItemAddReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgMapItemAddReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemAddReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    info: (f = msg.getInfo()) && proto.MsgMapItemInfoBean.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgMapItemAddReq}
 */
proto.MsgMapItemAddReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgMapItemAddReq;
  return proto.MsgMapItemAddReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgMapItemAddReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgMapItemAddReq}
 */
proto.MsgMapItemAddReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.MsgMapItemInfoBean;
      reader.readMessage(value,proto.MsgMapItemInfoBean.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgMapItemAddReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgMapItemAddReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgMapItemAddReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemAddReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MsgMapItemInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgMapItemAddReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgMapItemAddReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgMapItemAddReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemAddReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required MsgMapItemInfoBean info = 2;
 * @return {!proto.MsgMapItemInfoBean}
 */
proto.MsgMapItemAddReq.prototype.getInfo = function() {
  return /** @type{!proto.MsgMapItemInfoBean} */ (
    jspb.Message.getWrapperField(this, proto.MsgMapItemInfoBean, 2, 1));
};


/** @param {!proto.MsgMapItemInfoBean} value */
proto.MsgMapItemAddReq.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MsgMapItemAddReq.prototype.clearInfo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemAddReq.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgMapItemAddRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgMapItemAddRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgMapItemAddRep.displayName = 'proto.MsgMapItemAddRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgMapItemAddRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgMapItemAddRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgMapItemAddRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemAddRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgMapItemAddRep}
 */
proto.MsgMapItemAddRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgMapItemAddRep;
  return proto.MsgMapItemAddRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgMapItemAddRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgMapItemAddRep}
 */
proto.MsgMapItemAddRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgMapItemAddRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgMapItemAddRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgMapItemAddRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemAddRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 rcode = 1;
 * @return {number}
 */
proto.MsgMapItemAddRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgMapItemAddRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgMapItemAddRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemAddRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgMapItemAddNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgMapItemAddNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgMapItemAddNtf.displayName = 'proto.MsgMapItemAddNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgMapItemAddNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgMapItemAddNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgMapItemAddNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemAddNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    info: (f = msg.getInfo()) && proto.MsgMapItemInfoBean.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgMapItemAddNtf}
 */
proto.MsgMapItemAddNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgMapItemAddNtf;
  return proto.MsgMapItemAddNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgMapItemAddNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgMapItemAddNtf}
 */
proto.MsgMapItemAddNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.MsgMapItemInfoBean;
      reader.readMessage(value,proto.MsgMapItemInfoBean.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgMapItemAddNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgMapItemAddNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgMapItemAddNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgMapItemAddNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MsgMapItemInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgMapItemAddNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgMapItemAddNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgMapItemAddNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemAddNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required MsgMapItemInfoBean info = 2;
 * @return {!proto.MsgMapItemInfoBean}
 */
proto.MsgMapItemAddNtf.prototype.getInfo = function() {
  return /** @type{!proto.MsgMapItemInfoBean} */ (
    jspb.Message.getWrapperField(this, proto.MsgMapItemInfoBean, 2, 1));
};


/** @param {!proto.MsgMapItemInfoBean} value */
proto.MsgMapItemAddNtf.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MsgMapItemAddNtf.prototype.clearInfo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgMapItemAddNtf.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBattlegroundsSafetyZoneNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBattlegroundsSafetyZoneNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgBattlegroundsSafetyZoneNtf.displayName = 'proto.MsgBattlegroundsSafetyZoneNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBattlegroundsSafetyZoneNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBattlegroundsSafetyZoneNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsSafetyZoneNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    diameter: jspb.Message.getField(msg, 1),
    curPosX: jspb.Message.getField(msg, 2),
    curPosY: jspb.Message.getField(msg, 3),
    nextDiameter: jspb.Message.getField(msg, 4),
    nextPosX: jspb.Message.getField(msg, 5),
    nextPosY: jspb.Message.getField(msg, 6),
    countdown: jspb.Message.getField(msg, 7),
    time: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBattlegroundsSafetyZoneNtf}
 */
proto.MsgBattlegroundsSafetyZoneNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBattlegroundsSafetyZoneNtf;
  return proto.MsgBattlegroundsSafetyZoneNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBattlegroundsSafetyZoneNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBattlegroundsSafetyZoneNtf}
 */
proto.MsgBattlegroundsSafetyZoneNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiameter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurPosX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurPosY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNextDiameter(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNextPosX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNextPosY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCountdown(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBattlegroundsSafetyZoneNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBattlegroundsSafetyZoneNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBattlegroundsSafetyZoneNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * required uint32 diameter = 1;
 * @return {number}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.getDiameter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.setDiameter = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgBattlegroundsSafetyZoneNtf.prototype.clearDiameter = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.hasDiameter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 cur_pos_x = 2;
 * @return {number}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.getCurPosX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.setCurPosX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgBattlegroundsSafetyZoneNtf.prototype.clearCurPosX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.hasCurPosX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 cur_pos_y = 3;
 * @return {number}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.getCurPosY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.setCurPosY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgBattlegroundsSafetyZoneNtf.prototype.clearCurPosY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.hasCurPosY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 next_diameter = 4;
 * @return {number}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.getNextDiameter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.setNextDiameter = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgBattlegroundsSafetyZoneNtf.prototype.clearNextDiameter = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.hasNextDiameter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 next_pos_x = 5;
 * @return {number}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.getNextPosX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.setNextPosX = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgBattlegroundsSafetyZoneNtf.prototype.clearNextPosX = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.hasNextPosX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 next_pos_y = 6;
 * @return {number}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.getNextPosY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.setNextPosY = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgBattlegroundsSafetyZoneNtf.prototype.clearNextPosY = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.hasNextPosY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 countdown = 7;
 * @return {number}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.getCountdown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.setCountdown = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgBattlegroundsSafetyZoneNtf.prototype.clearCountdown = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.hasCountdown = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 time = 8;
 * @return {number}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgBattlegroundsSafetyZoneNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgBattlegroundsSafetyZoneNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTapBlackStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTapBlackStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTapBlackStartNtf.displayName = 'proto.MsgTapBlackStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTapBlackStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTapBlackStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTapBlackStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTapBlackStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3),
    seed: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTapBlackStartNtf}
 */
proto.MsgTapBlackStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTapBlackStartNtf;
  return proto.MsgTapBlackStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTapBlackStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTapBlackStartNtf}
 */
proto.MsgTapBlackStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTapBlackStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTapBlackStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTapBlackStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTapBlackStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgTapBlackStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTapBlackStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTapBlackStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgTapBlackStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgTapBlackStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgTapBlackStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgTapBlackStartNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgTapBlackStartNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgTapBlackStartNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackStartNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 seed = 4;
 * @return {number}
 */
proto.MsgTapBlackStartNtf.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgTapBlackStartNtf.prototype.setSeed = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgTapBlackStartNtf.prototype.clearSeed = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackStartNtf.prototype.hasSeed = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTapBlackScoreSyncReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTapBlackScoreSyncReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTapBlackScoreSyncReq.displayName = 'proto.MsgTapBlackScoreSyncReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTapBlackScoreSyncReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTapBlackScoreSyncReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTapBlackScoreSyncReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTapBlackScoreSyncReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTapBlackScoreSyncReq}
 */
proto.MsgTapBlackScoreSyncReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTapBlackScoreSyncReq;
  return proto.MsgTapBlackScoreSyncReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTapBlackScoreSyncReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTapBlackScoreSyncReq}
 */
proto.MsgTapBlackScoreSyncReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTapBlackScoreSyncReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTapBlackScoreSyncReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTapBlackScoreSyncReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTapBlackScoreSyncReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgTapBlackScoreSyncReq.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTapBlackScoreSyncReq.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTapBlackScoreSyncReq.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackScoreSyncReq.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 score = 2;
 * @return {number}
 */
proto.MsgTapBlackScoreSyncReq.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgTapBlackScoreSyncReq.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgTapBlackScoreSyncReq.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackScoreSyncReq.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTapBlackScoreSyncNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTapBlackScoreSyncNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTapBlackScoreSyncNtf.displayName = 'proto.MsgTapBlackScoreSyncNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTapBlackScoreSyncNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTapBlackScoreSyncNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTapBlackScoreSyncNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTapBlackScoreSyncNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTapBlackScoreSyncNtf}
 */
proto.MsgTapBlackScoreSyncNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTapBlackScoreSyncNtf;
  return proto.MsgTapBlackScoreSyncNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTapBlackScoreSyncNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTapBlackScoreSyncNtf}
 */
proto.MsgTapBlackScoreSyncNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTapBlackScoreSyncNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTapBlackScoreSyncNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTapBlackScoreSyncNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTapBlackScoreSyncNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgTapBlackScoreSyncNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTapBlackScoreSyncNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTapBlackScoreSyncNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackScoreSyncNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 score = 2;
 * @return {number}
 */
proto.MsgTapBlackScoreSyncNtf.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgTapBlackScoreSyncNtf.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgTapBlackScoreSyncNtf.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackScoreSyncNtf.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTapBlackOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTapBlackOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTapBlackOverNtf.displayName = 'proto.MsgTapBlackOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTapBlackOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTapBlackOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTapBlackOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTapBlackOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTapBlackOverNtf}
 */
proto.MsgTapBlackOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTapBlackOverNtf;
  return proto.MsgTapBlackOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTapBlackOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTapBlackOverNtf}
 */
proto.MsgTapBlackOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTapBlackOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTapBlackOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTapBlackOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTapBlackOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgTapBlackOverNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTapBlackOverNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTapBlackOverNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackOverNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgTapBlackOverNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgTapBlackOverNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgTapBlackOverNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackOverNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgTapBlackRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgTapBlackRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgTapBlackRecoveryNtf.displayName = 'proto.MsgTapBlackRecoveryNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgTapBlackRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgTapBlackRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgTapBlackRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTapBlackRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    redUid: jspb.Message.getField(msg, 1),
    redScore: jspb.Message.getField(msg, 2),
    blueUid: jspb.Message.getField(msg, 3),
    blueScore: jspb.Message.getField(msg, 4),
    leftTime: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgTapBlackRecoveryNtf}
 */
proto.MsgTapBlackRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgTapBlackRecoveryNtf;
  return proto.MsgTapBlackRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgTapBlackRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgTapBlackRecoveryNtf}
 */
proto.MsgTapBlackRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueUid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlueScore(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgTapBlackRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgTapBlackRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgTapBlackRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgTapBlackRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required uint32 red_uid = 1;
 * @return {number}
 */
proto.MsgTapBlackRecoveryNtf.prototype.getRedUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgTapBlackRecoveryNtf.prototype.setRedUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgTapBlackRecoveryNtf.prototype.clearRedUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackRecoveryNtf.prototype.hasRedUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 red_score = 2;
 * @return {number}
 */
proto.MsgTapBlackRecoveryNtf.prototype.getRedScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgTapBlackRecoveryNtf.prototype.setRedScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgTapBlackRecoveryNtf.prototype.clearRedScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackRecoveryNtf.prototype.hasRedScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 blue_uid = 3;
 * @return {number}
 */
proto.MsgTapBlackRecoveryNtf.prototype.getBlueUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgTapBlackRecoveryNtf.prototype.setBlueUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgTapBlackRecoveryNtf.prototype.clearBlueUid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackRecoveryNtf.prototype.hasBlueUid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 blue_score = 4;
 * @return {number}
 */
proto.MsgTapBlackRecoveryNtf.prototype.getBlueScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgTapBlackRecoveryNtf.prototype.setBlueScore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgTapBlackRecoveryNtf.prototype.clearBlueScore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackRecoveryNtf.prototype.hasBlueScore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 left_time = 5;
 * @return {number}
 */
proto.MsgTapBlackRecoveryNtf.prototype.getLeftTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgTapBlackRecoveryNtf.prototype.setLeftTime = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgTapBlackRecoveryNtf.prototype.clearLeftTime = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgTapBlackRecoveryNtf.prototype.hasLeftTime = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCatchFishStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishStartNtf.displayName = 'proto.MsgCatchFishStartNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    addrIp: jspb.Message.getField(msg, 1),
    addrPort: jspb.Message.getField(msg, 2),
    gameTime: jspb.Message.getField(msg, 3),
    sessionId: jspb.Message.getField(msg, 4),
    uid: jspb.Message.getField(msg, 5),
    userType: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishStartNtf}
 */
proto.MsgCatchFishStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishStartNtf;
  return proto.MsgCatchFishStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishStartNtf}
 */
proto.MsgCatchFishStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddrIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAddrPort(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSessionId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * required string addr_ip = 1;
 * @return {string}
 */
proto.MsgCatchFishStartNtf.prototype.getAddrIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MsgCatchFishStartNtf.prototype.setAddrIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCatchFishStartNtf.prototype.clearAddrIp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishStartNtf.prototype.hasAddrIp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 addr_port = 2;
 * @return {number}
 */
proto.MsgCatchFishStartNtf.prototype.getAddrPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgCatchFishStartNtf.prototype.setAddrPort = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCatchFishStartNtf.prototype.clearAddrPort = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishStartNtf.prototype.hasAddrPort = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 game_time = 3;
 * @return {number}
 */
proto.MsgCatchFishStartNtf.prototype.getGameTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgCatchFishStartNtf.prototype.setGameTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgCatchFishStartNtf.prototype.clearGameTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishStartNtf.prototype.hasGameTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 session_id = 4;
 * @return {number}
 */
proto.MsgCatchFishStartNtf.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgCatchFishStartNtf.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgCatchFishStartNtf.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishStartNtf.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 uid = 5;
 * @return {number}
 */
proto.MsgCatchFishStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgCatchFishStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgCatchFishStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 user_type = 6;
 * @return {number}
 */
proto.MsgCatchFishStartNtf.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgCatchFishStartNtf.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgCatchFishStartNtf.prototype.clearUserType = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishStartNtf.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishPosFrameData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCatchFishPosFrameData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishPosFrameData.displayName = 'proto.MsgCatchFishPosFrameData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishPosFrameData.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishPosFrameData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishPosFrameData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishPosFrameData.toObject = function(includeInstance, msg) {
  var f, obj = {
    fishId: jspb.Message.getField(msg, 1),
    fishType: jspb.Message.getField(msg, 2),
    fishScore: jspb.Message.getField(msg, 3),
    fishX: jspb.Message.getField(msg, 4),
    fishY: jspb.Message.getField(msg, 5),
    fishDirec: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishPosFrameData}
 */
proto.MsgCatchFishPosFrameData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishPosFrameData;
  return proto.MsgCatchFishPosFrameData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishPosFrameData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishPosFrameData}
 */
proto.MsgCatchFishPosFrameData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFishId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFishType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFishScore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFishX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFishY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFishDirec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishPosFrameData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishPosFrameData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishPosFrameData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishPosFrameData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * required uint32 fish_id = 1;
 * @return {number}
 */
proto.MsgCatchFishPosFrameData.prototype.getFishId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgCatchFishPosFrameData.prototype.setFishId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCatchFishPosFrameData.prototype.clearFishId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishPosFrameData.prototype.hasFishId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 fish_type = 2;
 * @return {number}
 */
proto.MsgCatchFishPosFrameData.prototype.getFishType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgCatchFishPosFrameData.prototype.setFishType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCatchFishPosFrameData.prototype.clearFishType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishPosFrameData.prototype.hasFishType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 fish_score = 3;
 * @return {number}
 */
proto.MsgCatchFishPosFrameData.prototype.getFishScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgCatchFishPosFrameData.prototype.setFishScore = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgCatchFishPosFrameData.prototype.clearFishScore = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishPosFrameData.prototype.hasFishScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 fish_x = 4;
 * @return {number}
 */
proto.MsgCatchFishPosFrameData.prototype.getFishX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgCatchFishPosFrameData.prototype.setFishX = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgCatchFishPosFrameData.prototype.clearFishX = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishPosFrameData.prototype.hasFishX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 fish_y = 5;
 * @return {number}
 */
proto.MsgCatchFishPosFrameData.prototype.getFishY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgCatchFishPosFrameData.prototype.setFishY = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgCatchFishPosFrameData.prototype.clearFishY = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishPosFrameData.prototype.hasFishY = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 fish_direc = 6;
 * @return {number}
 */
proto.MsgCatchFishPosFrameData.prototype.getFishDirec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.MsgCatchFishPosFrameData.prototype.setFishDirec = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgCatchFishPosFrameData.prototype.clearFishDirec = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishPosFrameData.prototype.hasFishDirec = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishPosNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgCatchFishPosNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgCatchFishPosNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishPosNtf.displayName = 'proto.MsgCatchFishPosNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgCatchFishPosNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishPosNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishPosNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishPosNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishPosNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    fishInfoList: jspb.Message.toObjectList(msg.getFishInfoList(),
    proto.MsgCatchFishPosFrameData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishPosNtf}
 */
proto.MsgCatchFishPosNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishPosNtf;
  return proto.MsgCatchFishPosNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishPosNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishPosNtf}
 */
proto.MsgCatchFishPosNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgCatchFishPosFrameData;
      reader.readMessage(value,proto.MsgCatchFishPosFrameData.deserializeBinaryFromReader);
      msg.addFishInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishPosNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishPosNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishPosNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishPosNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFishInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MsgCatchFishPosFrameData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MsgCatchFishPosFrameData fish_info = 1;
 * @return {!Array<!proto.MsgCatchFishPosFrameData>}
 */
proto.MsgCatchFishPosNtf.prototype.getFishInfoList = function() {
  return /** @type{!Array<!proto.MsgCatchFishPosFrameData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgCatchFishPosFrameData, 1));
};


/** @param {!Array<!proto.MsgCatchFishPosFrameData>} value */
proto.MsgCatchFishPosNtf.prototype.setFishInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MsgCatchFishPosFrameData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgCatchFishPosFrameData}
 */
proto.MsgCatchFishPosNtf.prototype.addFishInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MsgCatchFishPosFrameData, opt_index);
};


proto.MsgCatchFishPosNtf.prototype.clearFishInfoList = function() {
  this.setFishInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishPropData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCatchFishPropData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishPropData.displayName = 'proto.MsgCatchFishPropData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishPropData.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishPropData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishPropData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishPropData.toObject = function(includeInstance, msg) {
  var f, obj = {
    propType: jspb.Message.getField(msg, 1),
    propX: jspb.Message.getField(msg, 2),
    propY: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishPropData}
 */
proto.MsgCatchFishPropData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishPropData;
  return proto.MsgCatchFishPropData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishPropData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishPropData}
 */
proto.MsgCatchFishPropData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPropType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPropX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPropY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishPropData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishPropData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishPropData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishPropData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 prop_type = 1;
 * @return {number}
 */
proto.MsgCatchFishPropData.prototype.getPropType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgCatchFishPropData.prototype.setPropType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCatchFishPropData.prototype.clearPropType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishPropData.prototype.hasPropType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 prop_x = 2;
 * @return {number}
 */
proto.MsgCatchFishPropData.prototype.getPropX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgCatchFishPropData.prototype.setPropX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCatchFishPropData.prototype.clearPropX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishPropData.prototype.hasPropX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 prop_y = 3;
 * @return {number}
 */
proto.MsgCatchFishPropData.prototype.getPropY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgCatchFishPropData.prototype.setPropY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgCatchFishPropData.prototype.clearPropY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishPropData.prototype.hasPropY = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishPropNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgCatchFishPropNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgCatchFishPropNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishPropNtf.displayName = 'proto.MsgCatchFishPropNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgCatchFishPropNtf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishPropNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishPropNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishPropNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishPropNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    propInfoList: jspb.Message.toObjectList(msg.getPropInfoList(),
    proto.MsgCatchFishPropData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishPropNtf}
 */
proto.MsgCatchFishPropNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishPropNtf;
  return proto.MsgCatchFishPropNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishPropNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishPropNtf}
 */
proto.MsgCatchFishPropNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgCatchFishPropData;
      reader.readMessage(value,proto.MsgCatchFishPropData.deserializeBinaryFromReader);
      msg.addPropInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishPropNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishPropNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishPropNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishPropNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MsgCatchFishPropData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MsgCatchFishPropData prop_info = 1;
 * @return {!Array<!proto.MsgCatchFishPropData>}
 */
proto.MsgCatchFishPropNtf.prototype.getPropInfoList = function() {
  return /** @type{!Array<!proto.MsgCatchFishPropData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgCatchFishPropData, 1));
};


/** @param {!Array<!proto.MsgCatchFishPropData>} value */
proto.MsgCatchFishPropNtf.prototype.setPropInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MsgCatchFishPropData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgCatchFishPropData}
 */
proto.MsgCatchFishPropNtf.prototype.addPropInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MsgCatchFishPropData, opt_index);
};


proto.MsgCatchFishPropNtf.prototype.clearPropInfoList = function() {
  this.setPropInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishUsePropReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCatchFishUsePropReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishUsePropReq.displayName = 'proto.MsgCatchFishUsePropReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishUsePropReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishUsePropReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishUsePropReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishUsePropReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    propType: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishUsePropReq}
 */
proto.MsgCatchFishUsePropReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishUsePropReq;
  return proto.MsgCatchFishUsePropReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishUsePropReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishUsePropReq}
 */
proto.MsgCatchFishUsePropReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPropType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishUsePropReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishUsePropReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishUsePropReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishUsePropReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgCatchFishUsePropReq.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgCatchFishUsePropReq.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCatchFishUsePropReq.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishUsePropReq.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 prop_type = 2;
 * @return {number}
 */
proto.MsgCatchFishUsePropReq.prototype.getPropType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgCatchFishUsePropReq.prototype.setPropType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCatchFishUsePropReq.prototype.clearPropType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishUsePropReq.prototype.hasPropType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishUsePropNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCatchFishUsePropNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishUsePropNtf.displayName = 'proto.MsgCatchFishUsePropNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishUsePropNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishUsePropNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishUsePropNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishUsePropNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    propType: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishUsePropNtf}
 */
proto.MsgCatchFishUsePropNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishUsePropNtf;
  return proto.MsgCatchFishUsePropNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishUsePropNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishUsePropNtf}
 */
proto.MsgCatchFishUsePropNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPropType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishUsePropNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishUsePropNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishUsePropNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishUsePropNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgCatchFishUsePropNtf.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgCatchFishUsePropNtf.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCatchFishUsePropNtf.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishUsePropNtf.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 prop_type = 2;
 * @return {number}
 */
proto.MsgCatchFishUsePropNtf.prototype.getPropType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgCatchFishUsePropNtf.prototype.setPropType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCatchFishUsePropNtf.prototype.clearPropType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishUsePropNtf.prototype.hasPropType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishRotateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCatchFishRotateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishRotateReq.displayName = 'proto.MsgCatchFishRotateReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishRotateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishRotateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishRotateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishRotateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    rotateAngle: +jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishRotateReq}
 */
proto.MsgCatchFishRotateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishRotateReq;
  return proto.MsgCatchFishRotateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishRotateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishRotateReq}
 */
proto.MsgCatchFishRotateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotateAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishRotateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishRotateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishRotateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishRotateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgCatchFishRotateReq.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgCatchFishRotateReq.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCatchFishRotateReq.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishRotateReq.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float rotate_angle = 2;
 * @return {number}
 */
proto.MsgCatchFishRotateReq.prototype.getRotateAngle = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MsgCatchFishRotateReq.prototype.setRotateAngle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCatchFishRotateReq.prototype.clearRotateAngle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishRotateReq.prototype.hasRotateAngle = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishRotateNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCatchFishRotateNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishRotateNtf.displayName = 'proto.MsgCatchFishRotateNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishRotateNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishRotateNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishRotateNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishRotateNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    rotateAngle: +jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishRotateNtf}
 */
proto.MsgCatchFishRotateNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishRotateNtf;
  return proto.MsgCatchFishRotateNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishRotateNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishRotateNtf}
 */
proto.MsgCatchFishRotateNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotateAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishRotateNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishRotateNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishRotateNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishRotateNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgCatchFishRotateNtf.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgCatchFishRotateNtf.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCatchFishRotateNtf.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishRotateNtf.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float rotate_angle = 2;
 * @return {number}
 */
proto.MsgCatchFishRotateNtf.prototype.getRotateAngle = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MsgCatchFishRotateNtf.prototype.setRotateAngle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCatchFishRotateNtf.prototype.clearRotateAngle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishRotateNtf.prototype.hasRotateAngle = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishFlingReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCatchFishFlingReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishFlingReq.displayName = 'proto.MsgCatchFishFlingReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishFlingReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishFlingReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishFlingReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishFlingReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    flingAngle: +jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishFlingReq}
 */
proto.MsgCatchFishFlingReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishFlingReq;
  return proto.MsgCatchFishFlingReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishFlingReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishFlingReq}
 */
proto.MsgCatchFishFlingReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFlingAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishFlingReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishFlingReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishFlingReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishFlingReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgCatchFishFlingReq.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgCatchFishFlingReq.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCatchFishFlingReq.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishFlingReq.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float fling_angle = 2;
 * @return {number}
 */
proto.MsgCatchFishFlingReq.prototype.getFlingAngle = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MsgCatchFishFlingReq.prototype.setFlingAngle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCatchFishFlingReq.prototype.clearFlingAngle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishFlingReq.prototype.hasFlingAngle = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishFlingNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCatchFishFlingNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishFlingNtf.displayName = 'proto.MsgCatchFishFlingNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishFlingNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishFlingNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishFlingNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishFlingNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    flingAngle: +jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishFlingNtf}
 */
proto.MsgCatchFishFlingNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishFlingNtf;
  return proto.MsgCatchFishFlingNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishFlingNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishFlingNtf}
 */
proto.MsgCatchFishFlingNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFlingAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishFlingNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishFlingNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishFlingNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishFlingNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgCatchFishFlingNtf.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgCatchFishFlingNtf.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCatchFishFlingNtf.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishFlingNtf.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float fling_angle = 2;
 * @return {number}
 */
proto.MsgCatchFishFlingNtf.prototype.getFlingAngle = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MsgCatchFishFlingNtf.prototype.setFlingAngle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCatchFishFlingNtf.prototype.clearFlingAngle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishFlingNtf.prototype.hasFlingAngle = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishHitReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCatchFishHitReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishHitReq.displayName = 'proto.MsgCatchFishHitReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishHitReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishHitReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishHitReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishHitReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    fishId: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishHitReq}
 */
proto.MsgCatchFishHitReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishHitReq;
  return proto.MsgCatchFishHitReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishHitReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishHitReq}
 */
proto.MsgCatchFishHitReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFishId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishHitReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishHitReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishHitReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishHitReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgCatchFishHitReq.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgCatchFishHitReq.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCatchFishHitReq.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishHitReq.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 fish_id = 2;
 * @return {number}
 */
proto.MsgCatchFishHitReq.prototype.getFishId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgCatchFishHitReq.prototype.setFishId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCatchFishHitReq.prototype.clearFishId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishHitReq.prototype.hasFishId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishHitNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCatchFishHitNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishHitNtf.displayName = 'proto.MsgCatchFishHitNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishHitNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishHitNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishHitNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishHitNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    fishId: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishHitNtf}
 */
proto.MsgCatchFishHitNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishHitNtf;
  return proto.MsgCatchFishHitNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishHitNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishHitNtf}
 */
proto.MsgCatchFishHitNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFishId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishHitNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishHitNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishHitNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishHitNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgCatchFishHitNtf.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgCatchFishHitNtf.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCatchFishHitNtf.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishHitNtf.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 fish_id = 2;
 * @return {number}
 */
proto.MsgCatchFishHitNtf.prototype.getFishId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgCatchFishHitNtf.prototype.setFishId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCatchFishHitNtf.prototype.clearFishId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishHitNtf.prototype.hasFishId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgCatchFishOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgCatchFishOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgCatchFishOverNtf.displayName = 'proto.MsgCatchFishOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgCatchFishOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgCatchFishOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgCatchFishOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    overFlag: jspb.Message.getField(msg, 1),
    winUid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgCatchFishOverNtf}
 */
proto.MsgCatchFishOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgCatchFishOverNtf;
  return proto.MsgCatchFishOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgCatchFishOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgCatchFishOverNtf}
 */
proto.MsgCatchFishOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOverFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWinUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgCatchFishOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgCatchFishOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgCatchFishOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgCatchFishOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 over_flag = 1;
 * @return {number}
 */
proto.MsgCatchFishOverNtf.prototype.getOverFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgCatchFishOverNtf.prototype.setOverFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgCatchFishOverNtf.prototype.clearOverFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishOverNtf.prototype.hasOverFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 win_uid = 2;
 * @return {number}
 */
proto.MsgCatchFishOverNtf.prototype.getWinUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgCatchFishOverNtf.prototype.setWinUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgCatchFishOverNtf.prototype.clearWinUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgCatchFishOverNtf.prototype.hasWinUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerSwing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGoldMinerSwing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerSwing.displayName = 'proto.MsgGoldMinerSwing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerSwing.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerSwing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerSwing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerSwing.toObject = function(includeInstance, msg) {
  var f, obj = {
    face: jspb.Message.getField(msg, 1),
    angle: +jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerSwing}
 */
proto.MsgGoldMinerSwing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerSwing;
  return proto.MsgGoldMinerSwing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerSwing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerSwing}
 */
proto.MsgGoldMinerSwing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFace(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerSwing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerSwing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerSwing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerSwing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * required uint32 face = 1;
 * @return {number}
 */
proto.MsgGoldMinerSwing.prototype.getFace = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerSwing.prototype.setFace = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerSwing.prototype.clearFace = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerSwing.prototype.hasFace = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float angle = 2;
 * @return {number}
 */
proto.MsgGoldMinerSwing.prototype.getAngle = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MsgGoldMinerSwing.prototype.setAngle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerSwing.prototype.clearAngle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerSwing.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGoldMinerObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerObject.displayName = 'proto.MsgGoldMinerObject';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerObject.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    objIndex: jspb.Message.getField(msg, 1),
    objType: jspb.Message.getField(msg, 2),
    posRow: jspb.Message.getField(msg, 3),
    posCol: jspb.Message.getField(msg, 4),
    weight: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerObject}
 */
proto.MsgGoldMinerObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerObject;
  return proto.MsgGoldMinerObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerObject}
 */
proto.MsgGoldMinerObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosRow(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosCol(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required uint32 obj_index = 1;
 * @return {number}
 */
proto.MsgGoldMinerObject.prototype.getObjIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerObject.prototype.setObjIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerObject.prototype.clearObjIndex = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerObject.prototype.hasObjIndex = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 obj_type = 2;
 * @return {number}
 */
proto.MsgGoldMinerObject.prototype.getObjType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGoldMinerObject.prototype.setObjType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerObject.prototype.clearObjType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerObject.prototype.hasObjType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 pos_row = 3;
 * @return {number}
 */
proto.MsgGoldMinerObject.prototype.getPosRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGoldMinerObject.prototype.setPosRow = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGoldMinerObject.prototype.clearPosRow = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerObject.prototype.hasPosRow = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 pos_col = 4;
 * @return {number}
 */
proto.MsgGoldMinerObject.prototype.getPosCol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgGoldMinerObject.prototype.setPosCol = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgGoldMinerObject.prototype.clearPosCol = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerObject.prototype.hasPosCol = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 weight = 5;
 * @return {number}
 */
proto.MsgGoldMinerObject.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgGoldMinerObject.prototype.setWeight = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgGoldMinerObject.prototype.clearWeight = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerObject.prototype.hasWeight = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgGoldMinerStartNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgGoldMinerStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerStartNtf.displayName = 'proto.MsgGoldMinerStartNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgGoldMinerStartNtf.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    userType: jspb.Message.getField(msg, 2),
    gameTime: jspb.Message.getField(msg, 3),
    objList: jspb.Message.toObjectList(msg.getObjList(),
    proto.MsgGoldMinerObject.toObject, includeInstance),
    redSwing: (f = msg.getRedSwing()) && proto.MsgGoldMinerSwing.toObject(includeInstance, f),
    blueSwing: (f = msg.getBlueSwing()) && proto.MsgGoldMinerSwing.toObject(includeInstance, f),
    seed: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerStartNtf}
 */
proto.MsgGoldMinerStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerStartNtf;
  return proto.MsgGoldMinerStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerStartNtf}
 */
proto.MsgGoldMinerStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameTime(value);
      break;
    case 4:
      var value = new proto.MsgGoldMinerObject;
      reader.readMessage(value,proto.MsgGoldMinerObject.deserializeBinaryFromReader);
      msg.addObj(value);
      break;
    case 5:
      var value = new proto.MsgGoldMinerSwing;
      reader.readMessage(value,proto.MsgGoldMinerSwing.deserializeBinaryFromReader);
      msg.setRedSwing(value);
      break;
    case 6:
      var value = new proto.MsgGoldMinerSwing;
      reader.readMessage(value,proto.MsgGoldMinerSwing.deserializeBinaryFromReader);
      msg.setBlueSwing(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getObjList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.MsgGoldMinerObject.serializeBinaryToWriter
    );
  }
  f = message.getRedSwing();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.MsgGoldMinerSwing.serializeBinaryToWriter
    );
  }
  f = message.getBlueSwing();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.MsgGoldMinerSwing.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgGoldMinerStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 user_type = 2;
 * @return {number}
 */
proto.MsgGoldMinerStartNtf.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGoldMinerStartNtf.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerStartNtf.prototype.clearUserType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerStartNtf.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 game_time = 3;
 * @return {number}
 */
proto.MsgGoldMinerStartNtf.prototype.getGameTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGoldMinerStartNtf.prototype.setGameTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGoldMinerStartNtf.prototype.clearGameTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerStartNtf.prototype.hasGameTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated MsgGoldMinerObject obj = 4;
 * @return {!Array<!proto.MsgGoldMinerObject>}
 */
proto.MsgGoldMinerStartNtf.prototype.getObjList = function() {
  return /** @type{!Array<!proto.MsgGoldMinerObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgGoldMinerObject, 4));
};


/** @param {!Array<!proto.MsgGoldMinerObject>} value */
proto.MsgGoldMinerStartNtf.prototype.setObjList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.MsgGoldMinerObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgGoldMinerObject}
 */
proto.MsgGoldMinerStartNtf.prototype.addObj = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.MsgGoldMinerObject, opt_index);
};


proto.MsgGoldMinerStartNtf.prototype.clearObjList = function() {
  this.setObjList([]);
};


/**
 * required MsgGoldMinerSwing red_swing = 5;
 * @return {!proto.MsgGoldMinerSwing}
 */
proto.MsgGoldMinerStartNtf.prototype.getRedSwing = function() {
  return /** @type{!proto.MsgGoldMinerSwing} */ (
    jspb.Message.getWrapperField(this, proto.MsgGoldMinerSwing, 5, 1));
};


/** @param {!proto.MsgGoldMinerSwing} value */
proto.MsgGoldMinerStartNtf.prototype.setRedSwing = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.MsgGoldMinerStartNtf.prototype.clearRedSwing = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerStartNtf.prototype.hasRedSwing = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required MsgGoldMinerSwing blue_swing = 6;
 * @return {!proto.MsgGoldMinerSwing}
 */
proto.MsgGoldMinerStartNtf.prototype.getBlueSwing = function() {
  return /** @type{!proto.MsgGoldMinerSwing} */ (
    jspb.Message.getWrapperField(this, proto.MsgGoldMinerSwing, 6, 1));
};


/** @param {!proto.MsgGoldMinerSwing} value */
proto.MsgGoldMinerStartNtf.prototype.setBlueSwing = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.MsgGoldMinerStartNtf.prototype.clearBlueSwing = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerStartNtf.prototype.hasBlueSwing = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 seed = 7;
 * @return {number}
 */
proto.MsgGoldMinerStartNtf.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgGoldMinerStartNtf.prototype.setSeed = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgGoldMinerStartNtf.prototype.clearSeed = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerStartNtf.prototype.hasSeed = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerPropNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGoldMinerPropNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerPropNtf.displayName = 'proto.MsgGoldMinerPropNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerPropNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerPropNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerPropNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerPropNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    obj: (f = msg.getObj()) && proto.MsgGoldMinerObject.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerPropNtf}
 */
proto.MsgGoldMinerPropNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerPropNtf;
  return proto.MsgGoldMinerPropNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerPropNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerPropNtf}
 */
proto.MsgGoldMinerPropNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgGoldMinerObject;
      reader.readMessage(value,proto.MsgGoldMinerObject.deserializeBinaryFromReader);
      msg.setObj(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerPropNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerPropNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerPropNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerPropNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObj();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MsgGoldMinerObject.serializeBinaryToWriter
    );
  }
};


/**
 * required MsgGoldMinerObject obj = 1;
 * @return {!proto.MsgGoldMinerObject}
 */
proto.MsgGoldMinerPropNtf.prototype.getObj = function() {
  return /** @type{!proto.MsgGoldMinerObject} */ (
    jspb.Message.getWrapperField(this, proto.MsgGoldMinerObject, 1, 1));
};


/** @param {!proto.MsgGoldMinerObject} value */
proto.MsgGoldMinerPropNtf.prototype.setObj = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MsgGoldMinerPropNtf.prototype.clearObj = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerPropNtf.prototype.hasObj = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerSuperPropNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGoldMinerSuperPropNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerSuperPropNtf.displayName = 'proto.MsgGoldMinerSuperPropNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerSuperPropNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerSuperPropNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerSuperPropNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerSuperPropNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    face: jspb.Message.getField(msg, 1),
    index: jspb.Message.getField(msg, 2),
    weight: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerSuperPropNtf}
 */
proto.MsgGoldMinerSuperPropNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerSuperPropNtf;
  return proto.MsgGoldMinerSuperPropNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerSuperPropNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerSuperPropNtf}
 */
proto.MsgGoldMinerSuperPropNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFace(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerSuperPropNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerSuperPropNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerSuperPropNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerSuperPropNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 face = 1;
 * @return {number}
 */
proto.MsgGoldMinerSuperPropNtf.prototype.getFace = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerSuperPropNtf.prototype.setFace = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerSuperPropNtf.prototype.clearFace = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerSuperPropNtf.prototype.hasFace = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 index = 2;
 * @return {number}
 */
proto.MsgGoldMinerSuperPropNtf.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGoldMinerSuperPropNtf.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerSuperPropNtf.prototype.clearIndex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerSuperPropNtf.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 weight = 3;
 * @return {number}
 */
proto.MsgGoldMinerSuperPropNtf.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGoldMinerSuperPropNtf.prototype.setWeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGoldMinerSuperPropNtf.prototype.clearWeight = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerSuperPropNtf.prototype.hasWeight = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerSniperReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGoldMinerSniperReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerSniperReq.displayName = 'proto.MsgGoldMinerSniperReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerSniperReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerSniperReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerSniperReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerSniperReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    speed: jspb.Message.getField(msg, 2),
    swing: (f = msg.getSwing()) && proto.MsgGoldMinerSwing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerSniperReq}
 */
proto.MsgGoldMinerSniperReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerSniperReq;
  return proto.MsgGoldMinerSniperReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerSniperReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerSniperReq}
 */
proto.MsgGoldMinerSniperReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    case 3:
      var value = new proto.MsgGoldMinerSwing;
      reader.readMessage(value,proto.MsgGoldMinerSwing.deserializeBinaryFromReader);
      msg.setSwing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerSniperReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerSniperReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerSniperReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerSniperReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSwing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MsgGoldMinerSwing.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgGoldMinerSniperReq.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerSniperReq.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerSniperReq.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerSniperReq.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 speed = 2;
 * @return {number}
 */
proto.MsgGoldMinerSniperReq.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGoldMinerSniperReq.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerSniperReq.prototype.clearSpeed = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerSniperReq.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required MsgGoldMinerSwing swing = 3;
 * @return {!proto.MsgGoldMinerSwing}
 */
proto.MsgGoldMinerSniperReq.prototype.getSwing = function() {
  return /** @type{!proto.MsgGoldMinerSwing} */ (
    jspb.Message.getWrapperField(this, proto.MsgGoldMinerSwing, 3, 1));
};


/** @param {!proto.MsgGoldMinerSwing} value */
proto.MsgGoldMinerSniperReq.prototype.setSwing = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.MsgGoldMinerSniperReq.prototype.clearSwing = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerSniperReq.prototype.hasSwing = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerSniperNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGoldMinerSniperNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerSniperNtf.displayName = 'proto.MsgGoldMinerSniperNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerSniperNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerSniperNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerSniperNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerSniperNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    speed: jspb.Message.getField(msg, 2),
    swing: (f = msg.getSwing()) && proto.MsgGoldMinerSwing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerSniperNtf}
 */
proto.MsgGoldMinerSniperNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerSniperNtf;
  return proto.MsgGoldMinerSniperNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerSniperNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerSniperNtf}
 */
proto.MsgGoldMinerSniperNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    case 3:
      var value = new proto.MsgGoldMinerSwing;
      reader.readMessage(value,proto.MsgGoldMinerSwing.deserializeBinaryFromReader);
      msg.setSwing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerSniperNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerSniperNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerSniperNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerSniperNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSwing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MsgGoldMinerSwing.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgGoldMinerSniperNtf.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerSniperNtf.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerSniperNtf.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerSniperNtf.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 speed = 2;
 * @return {number}
 */
proto.MsgGoldMinerSniperNtf.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGoldMinerSniperNtf.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerSniperNtf.prototype.clearSpeed = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerSniperNtf.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required MsgGoldMinerSwing swing = 3;
 * @return {!proto.MsgGoldMinerSwing}
 */
proto.MsgGoldMinerSniperNtf.prototype.getSwing = function() {
  return /** @type{!proto.MsgGoldMinerSwing} */ (
    jspb.Message.getWrapperField(this, proto.MsgGoldMinerSwing, 3, 1));
};


/** @param {!proto.MsgGoldMinerSwing} value */
proto.MsgGoldMinerSniperNtf.prototype.setSwing = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.MsgGoldMinerSniperNtf.prototype.clearSwing = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerSniperNtf.prototype.hasSwing = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerBackReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGoldMinerBackReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerBackReq.displayName = 'proto.MsgGoldMinerBackReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerBackReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerBackReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerBackReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerBackReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    speed: jspb.Message.getField(msg, 2),
    swing: (f = msg.getSwing()) && proto.MsgGoldMinerSwing.toObject(includeInstance, f),
    index: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerBackReq}
 */
proto.MsgGoldMinerBackReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerBackReq;
  return proto.MsgGoldMinerBackReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerBackReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerBackReq}
 */
proto.MsgGoldMinerBackReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    case 3:
      var value = new proto.MsgGoldMinerSwing;
      reader.readMessage(value,proto.MsgGoldMinerSwing.deserializeBinaryFromReader);
      msg.setSwing(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerBackReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerBackReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerBackReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerBackReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSwing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MsgGoldMinerSwing.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgGoldMinerBackReq.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerBackReq.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerBackReq.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerBackReq.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 speed = 2;
 * @return {number}
 */
proto.MsgGoldMinerBackReq.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGoldMinerBackReq.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerBackReq.prototype.clearSpeed = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerBackReq.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required MsgGoldMinerSwing swing = 3;
 * @return {!proto.MsgGoldMinerSwing}
 */
proto.MsgGoldMinerBackReq.prototype.getSwing = function() {
  return /** @type{!proto.MsgGoldMinerSwing} */ (
    jspb.Message.getWrapperField(this, proto.MsgGoldMinerSwing, 3, 1));
};


/** @param {!proto.MsgGoldMinerSwing} value */
proto.MsgGoldMinerBackReq.prototype.setSwing = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.MsgGoldMinerBackReq.prototype.clearSwing = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerBackReq.prototype.hasSwing = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 index = 4;
 * @return {number}
 */
proto.MsgGoldMinerBackReq.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgGoldMinerBackReq.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgGoldMinerBackReq.prototype.clearIndex = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerBackReq.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerBackNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGoldMinerBackNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerBackNtf.displayName = 'proto.MsgGoldMinerBackNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerBackNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerBackNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerBackNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerBackNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    speed: jspb.Message.getField(msg, 2),
    index: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerBackNtf}
 */
proto.MsgGoldMinerBackNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerBackNtf;
  return proto.MsgGoldMinerBackNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerBackNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerBackNtf}
 */
proto.MsgGoldMinerBackNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerBackNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerBackNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerBackNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerBackNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgGoldMinerBackNtf.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerBackNtf.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerBackNtf.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerBackNtf.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 speed = 2;
 * @return {number}
 */
proto.MsgGoldMinerBackNtf.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGoldMinerBackNtf.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerBackNtf.prototype.clearSpeed = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerBackNtf.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 index = 3;
 * @return {number}
 */
proto.MsgGoldMinerBackNtf.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGoldMinerBackNtf.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGoldMinerBackNtf.prototype.clearIndex = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerBackNtf.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerGainReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGoldMinerGainReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerGainReq.displayName = 'proto.MsgGoldMinerGainReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerGainReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerGainReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerGainReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerGainReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    objIndex: jspb.Message.getField(msg, 2),
    swing: (f = msg.getSwing()) && proto.MsgGoldMinerSwing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerGainReq}
 */
proto.MsgGoldMinerGainReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerGainReq;
  return proto.MsgGoldMinerGainReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerGainReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerGainReq}
 */
proto.MsgGoldMinerGainReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjIndex(value);
      break;
    case 3:
      var value = new proto.MsgGoldMinerSwing;
      reader.readMessage(value,proto.MsgGoldMinerSwing.deserializeBinaryFromReader);
      msg.setSwing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerGainReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerGainReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerGainReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerGainReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSwing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MsgGoldMinerSwing.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgGoldMinerGainReq.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerGainReq.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerGainReq.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerGainReq.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 obj_index = 2;
 * @return {number}
 */
proto.MsgGoldMinerGainReq.prototype.getObjIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGoldMinerGainReq.prototype.setObjIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerGainReq.prototype.clearObjIndex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerGainReq.prototype.hasObjIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required MsgGoldMinerSwing swing = 3;
 * @return {!proto.MsgGoldMinerSwing}
 */
proto.MsgGoldMinerGainReq.prototype.getSwing = function() {
  return /** @type{!proto.MsgGoldMinerSwing} */ (
    jspb.Message.getWrapperField(this, proto.MsgGoldMinerSwing, 3, 1));
};


/** @param {!proto.MsgGoldMinerSwing} value */
proto.MsgGoldMinerGainReq.prototype.setSwing = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.MsgGoldMinerGainReq.prototype.clearSwing = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerGainReq.prototype.hasSwing = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerGainNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGoldMinerGainNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerGainNtf.displayName = 'proto.MsgGoldMinerGainNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerGainNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerGainNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerGainNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerGainNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2),
    objType: jspb.Message.getField(msg, 3),
    multi: jspb.Message.getField(msg, 4),
    objIndex: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerGainNtf}
 */
proto.MsgGoldMinerGainNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerGainNtf;
  return proto.MsgGoldMinerGainNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerGainNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerGainNtf}
 */
proto.MsgGoldMinerGainNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMulti(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerGainNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerGainNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerGainNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerGainNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgGoldMinerGainNtf.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerGainNtf.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerGainNtf.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerGainNtf.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 score = 2;
 * @return {number}
 */
proto.MsgGoldMinerGainNtf.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGoldMinerGainNtf.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerGainNtf.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerGainNtf.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 obj_type = 3;
 * @return {number}
 */
proto.MsgGoldMinerGainNtf.prototype.getObjType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgGoldMinerGainNtf.prototype.setObjType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgGoldMinerGainNtf.prototype.clearObjType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerGainNtf.prototype.hasObjType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 multi = 4;
 * @return {number}
 */
proto.MsgGoldMinerGainNtf.prototype.getMulti = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgGoldMinerGainNtf.prototype.setMulti = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgGoldMinerGainNtf.prototype.clearMulti = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerGainNtf.prototype.hasMulti = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 obj_index = 5;
 * @return {number}
 */
proto.MsgGoldMinerGainNtf.prototype.getObjIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgGoldMinerGainNtf.prototype.setObjIndex = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgGoldMinerGainNtf.prototype.clearObjIndex = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerGainNtf.prototype.hasObjIndex = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerPropUseReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGoldMinerPropUseReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerPropUseReq.displayName = 'proto.MsgGoldMinerPropUseReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerPropUseReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerPropUseReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerPropUseReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerPropUseReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    propType: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerPropUseReq}
 */
proto.MsgGoldMinerPropUseReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerPropUseReq;
  return proto.MsgGoldMinerPropUseReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerPropUseReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerPropUseReq}
 */
proto.MsgGoldMinerPropUseReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPropType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerPropUseReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerPropUseReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerPropUseReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerPropUseReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgGoldMinerPropUseReq.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerPropUseReq.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerPropUseReq.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerPropUseReq.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 prop_type = 2;
 * @return {number}
 */
proto.MsgGoldMinerPropUseReq.prototype.getPropType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGoldMinerPropUseReq.prototype.setPropType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerPropUseReq.prototype.clearPropType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerPropUseReq.prototype.hasPropType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerPropUseNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGoldMinerPropUseNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerPropUseNtf.displayName = 'proto.MsgGoldMinerPropUseNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerPropUseNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerPropUseNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerPropUseNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerPropUseNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    userType: jspb.Message.getField(msg, 1),
    propType: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerPropUseNtf}
 */
proto.MsgGoldMinerPropUseNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerPropUseNtf;
  return proto.MsgGoldMinerPropUseNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerPropUseNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerPropUseNtf}
 */
proto.MsgGoldMinerPropUseNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPropType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerPropUseNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerPropUseNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerPropUseNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerPropUseNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 user_type = 1;
 * @return {number}
 */
proto.MsgGoldMinerPropUseNtf.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerPropUseNtf.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerPropUseNtf.prototype.clearUserType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerPropUseNtf.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 prop_type = 2;
 * @return {number}
 */
proto.MsgGoldMinerPropUseNtf.prototype.getPropType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGoldMinerPropUseNtf.prototype.setPropType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerPropUseNtf.prototype.clearPropType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerPropUseNtf.prototype.hasPropType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgGoldMinerOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerOverNtf.displayName = 'proto.MsgGoldMinerOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    overFlag: jspb.Message.getField(msg, 1),
    winUid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerOverNtf}
 */
proto.MsgGoldMinerOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerOverNtf;
  return proto.MsgGoldMinerOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerOverNtf}
 */
proto.MsgGoldMinerOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOverFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWinUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 over_flag = 1;
 * @return {number}
 */
proto.MsgGoldMinerOverNtf.prototype.getOverFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerOverNtf.prototype.setOverFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerOverNtf.prototype.clearOverFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerOverNtf.prototype.hasOverFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 win_uid = 2;
 * @return {number}
 */
proto.MsgGoldMinerOverNtf.prototype.getWinUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGoldMinerOverNtf.prototype.setWinUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerOverNtf.prototype.clearWinUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerOverNtf.prototype.hasWinUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgGoldMinerRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgGoldMinerRecoveryNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgGoldMinerRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgGoldMinerRecoveryNtf.displayName = 'proto.MsgGoldMinerRecoveryNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgGoldMinerRecoveryNtf.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgGoldMinerRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgGoldMinerRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgGoldMinerRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    leftTime: jspb.Message.getField(msg, 1),
    rivalScore: jspb.Message.getField(msg, 2),
    redSwing: (f = msg.getRedSwing()) && proto.MsgGoldMinerSwing.toObject(includeInstance, f),
    blueSwing: (f = msg.getBlueSwing()) && proto.MsgGoldMinerSwing.toObject(includeInstance, f),
    objTypeList: jspb.Message.getRepeatedField(msg, 5),
    objList: jspb.Message.toObjectList(msg.getObjList(),
    proto.MsgGoldMinerObject.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgGoldMinerRecoveryNtf}
 */
proto.MsgGoldMinerRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgGoldMinerRecoveryNtf;
  return proto.MsgGoldMinerRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgGoldMinerRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgGoldMinerRecoveryNtf}
 */
proto.MsgGoldMinerRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRivalScore(value);
      break;
    case 3:
      var value = new proto.MsgGoldMinerSwing;
      reader.readMessage(value,proto.MsgGoldMinerSwing.deserializeBinaryFromReader);
      msg.setRedSwing(value);
      break;
    case 4:
      var value = new proto.MsgGoldMinerSwing;
      reader.readMessage(value,proto.MsgGoldMinerSwing.deserializeBinaryFromReader);
      msg.setBlueSwing(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addObjType(value);
      break;
    case 6:
      var value = new proto.MsgGoldMinerObject;
      reader.readMessage(value,proto.MsgGoldMinerObject.deserializeBinaryFromReader);
      msg.addObj(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgGoldMinerRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgGoldMinerRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgGoldMinerRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgGoldMinerRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRedSwing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MsgGoldMinerSwing.serializeBinaryToWriter
    );
  }
  f = message.getBlueSwing();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.MsgGoldMinerSwing.serializeBinaryToWriter
    );
  }
  f = message.getObjTypeList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      5,
      f
    );
  }
  f = message.getObjList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.MsgGoldMinerObject.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 left_time = 1;
 * @return {number}
 */
proto.MsgGoldMinerRecoveryNtf.prototype.getLeftTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgGoldMinerRecoveryNtf.prototype.setLeftTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgGoldMinerRecoveryNtf.prototype.clearLeftTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerRecoveryNtf.prototype.hasLeftTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 rival_score = 2;
 * @return {number}
 */
proto.MsgGoldMinerRecoveryNtf.prototype.getRivalScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgGoldMinerRecoveryNtf.prototype.setRivalScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgGoldMinerRecoveryNtf.prototype.clearRivalScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerRecoveryNtf.prototype.hasRivalScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required MsgGoldMinerSwing red_swing = 3;
 * @return {!proto.MsgGoldMinerSwing}
 */
proto.MsgGoldMinerRecoveryNtf.prototype.getRedSwing = function() {
  return /** @type{!proto.MsgGoldMinerSwing} */ (
    jspb.Message.getWrapperField(this, proto.MsgGoldMinerSwing, 3, 1));
};


/** @param {!proto.MsgGoldMinerSwing} value */
proto.MsgGoldMinerRecoveryNtf.prototype.setRedSwing = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.MsgGoldMinerRecoveryNtf.prototype.clearRedSwing = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerRecoveryNtf.prototype.hasRedSwing = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required MsgGoldMinerSwing blue_swing = 4;
 * @return {!proto.MsgGoldMinerSwing}
 */
proto.MsgGoldMinerRecoveryNtf.prototype.getBlueSwing = function() {
  return /** @type{!proto.MsgGoldMinerSwing} */ (
    jspb.Message.getWrapperField(this, proto.MsgGoldMinerSwing, 4, 1));
};


/** @param {!proto.MsgGoldMinerSwing} value */
proto.MsgGoldMinerRecoveryNtf.prototype.setBlueSwing = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.MsgGoldMinerRecoveryNtf.prototype.clearBlueSwing = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgGoldMinerRecoveryNtf.prototype.hasBlueSwing = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated uint32 obj_type = 5;
 * @return {!Array<number>}
 */
proto.MsgGoldMinerRecoveryNtf.prototype.getObjTypeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<number>} value */
proto.MsgGoldMinerRecoveryNtf.prototype.setObjTypeList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.MsgGoldMinerRecoveryNtf.prototype.addObjType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.MsgGoldMinerRecoveryNtf.prototype.clearObjTypeList = function() {
  this.setObjTypeList([]);
};


/**
 * repeated MsgGoldMinerObject obj = 6;
 * @return {!Array<!proto.MsgGoldMinerObject>}
 */
proto.MsgGoldMinerRecoveryNtf.prototype.getObjList = function() {
  return /** @type{!Array<!proto.MsgGoldMinerObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgGoldMinerObject, 6));
};


/** @param {!Array<!proto.MsgGoldMinerObject>} value */
proto.MsgGoldMinerRecoveryNtf.prototype.setObjList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.MsgGoldMinerObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgGoldMinerObject}
 */
proto.MsgGoldMinerRecoveryNtf.prototype.addObj = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.MsgGoldMinerObject, opt_index);
};


proto.MsgGoldMinerRecoveryNtf.prototype.clearObjList = function() {
  this.setObjList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSoccerStartNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgSoccerStartNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgSoccerStartNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSoccerStartNtf.displayName = 'proto.MsgSoccerStartNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgSoccerStartNtf.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSoccerStartNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSoccerStartNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSoccerStartNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerStartNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    redBallsList: jspb.Message.toObjectList(msg.getRedBallsList(),
    proto.SoccersInfoBean.toObject, includeInstance),
    blueBallsList: jspb.Message.toObjectList(msg.getBlueBallsList(),
    proto.SoccersInfoBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSoccerStartNtf}
 */
proto.MsgSoccerStartNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSoccerStartNtf;
  return proto.MsgSoccerStartNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSoccerStartNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSoccerStartNtf}
 */
proto.MsgSoccerStartNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 4:
      var value = new proto.SoccersInfoBean;
      reader.readMessage(value,proto.SoccersInfoBean.deserializeBinaryFromReader);
      msg.addRedBalls(value);
      break;
    case 5:
      var value = new proto.SoccersInfoBean;
      reader.readMessage(value,proto.SoccersInfoBean.deserializeBinaryFromReader);
      msg.addBlueBalls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSoccerStartNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSoccerStartNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSoccerStartNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerStartNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRedBallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.SoccersInfoBean.serializeBinaryToWriter
    );
  }
  f = message.getBlueBallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.SoccersInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.MsgSoccerStartNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSoccerStartNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSoccerStartNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerStartNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgSoccerStartNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSoccerStartNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSoccerStartNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerStartNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated SoccersInfoBean red_balls = 4;
 * @return {!Array<!proto.SoccersInfoBean>}
 */
proto.MsgSoccerStartNtf.prototype.getRedBallsList = function() {
  return /** @type{!Array<!proto.SoccersInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SoccersInfoBean, 4));
};


/** @param {!Array<!proto.SoccersInfoBean>} value */
proto.MsgSoccerStartNtf.prototype.setRedBallsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.SoccersInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SoccersInfoBean}
 */
proto.MsgSoccerStartNtf.prototype.addRedBalls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.SoccersInfoBean, opt_index);
};


proto.MsgSoccerStartNtf.prototype.clearRedBallsList = function() {
  this.setRedBallsList([]);
};


/**
 * repeated SoccersInfoBean blue_balls = 5;
 * @return {!Array<!proto.SoccersInfoBean>}
 */
proto.MsgSoccerStartNtf.prototype.getBlueBallsList = function() {
  return /** @type{!Array<!proto.SoccersInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SoccersInfoBean, 5));
};


/** @param {!Array<!proto.SoccersInfoBean>} value */
proto.MsgSoccerStartNtf.prototype.setBlueBallsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.SoccersInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SoccersInfoBean}
 */
proto.MsgSoccerStartNtf.prototype.addBlueBalls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.SoccersInfoBean, opt_index);
};


proto.MsgSoccerStartNtf.prototype.clearBlueBallsList = function() {
  this.setBlueBallsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSoccerRoundNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSoccerRoundNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSoccerRoundNtf.displayName = 'proto.MsgSoccerRoundNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSoccerRoundNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSoccerRoundNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSoccerRoundNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerRoundNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getField(msg, 1),
    pkType: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSoccerRoundNtf}
 */
proto.MsgSoccerRoundNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSoccerRoundNtf;
  return proto.MsgSoccerRoundNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSoccerRoundNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSoccerRoundNtf}
 */
proto.MsgSoccerRoundNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSoccerRoundNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSoccerRoundNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSoccerRoundNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerRoundNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 round = 1;
 * @return {number}
 */
proto.MsgSoccerRoundNtf.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSoccerRoundNtf.prototype.setRound = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSoccerRoundNtf.prototype.clearRound = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerRoundNtf.prototype.hasRound = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 pk_type = 2;
 * @return {number}
 */
proto.MsgSoccerRoundNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSoccerRoundNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSoccerRoundNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerRoundNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.MsgSoccerRoundNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgSoccerRoundNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgSoccerRoundNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerRoundNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SoccersInfoBean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SoccersInfoBean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SoccersInfoBean.displayName = 'proto.SoccersInfoBean';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SoccersInfoBean.prototype.toObject = function(opt_includeInstance) {
  return proto.SoccersInfoBean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SoccersInfoBean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SoccersInfoBean.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    posX: jspb.Message.getField(msg, 2),
    posY: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SoccersInfoBean}
 */
proto.SoccersInfoBean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SoccersInfoBean;
  return proto.SoccersInfoBean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SoccersInfoBean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SoccersInfoBean}
 */
proto.SoccersInfoBean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SoccersInfoBean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SoccersInfoBean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SoccersInfoBean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SoccersInfoBean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.SoccersInfoBean.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SoccersInfoBean.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SoccersInfoBean.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SoccersInfoBean.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 pos_x = 2;
 * @return {number}
 */
proto.SoccersInfoBean.prototype.getPosX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SoccersInfoBean.prototype.setPosX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SoccersInfoBean.prototype.clearPosX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SoccersInfoBean.prototype.hasPosX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 pos_y = 3;
 * @return {number}
 */
proto.SoccersInfoBean.prototype.getPosY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SoccersInfoBean.prototype.setPosY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SoccersInfoBean.prototype.clearPosY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SoccersInfoBean.prototype.hasPosY = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSoccerPosSyncReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgSoccerPosSyncReq.repeatedFields_, null);
};
goog.inherits(proto.MsgSoccerPosSyncReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSoccerPosSyncReq.displayName = 'proto.MsgSoccerPosSyncReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgSoccerPosSyncReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSoccerPosSyncReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSoccerPosSyncReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSoccerPosSyncReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerPosSyncReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    ballList: jspb.Message.toObjectList(msg.getBallList(),
    proto.SoccersInfoBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSoccerPosSyncReq}
 */
proto.MsgSoccerPosSyncReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSoccerPosSyncReq;
  return proto.MsgSoccerPosSyncReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSoccerPosSyncReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSoccerPosSyncReq}
 */
proto.MsgSoccerPosSyncReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = new proto.SoccersInfoBean;
      reader.readMessage(value,proto.SoccersInfoBean.deserializeBinaryFromReader);
      msg.addBall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSoccerPosSyncReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSoccerPosSyncReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSoccerPosSyncReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerPosSyncReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBallList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.SoccersInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgSoccerPosSyncReq.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSoccerPosSyncReq.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSoccerPosSyncReq.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerPosSyncReq.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SoccersInfoBean ball = 2;
 * @return {!Array<!proto.SoccersInfoBean>}
 */
proto.MsgSoccerPosSyncReq.prototype.getBallList = function() {
  return /** @type{!Array<!proto.SoccersInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SoccersInfoBean, 2));
};


/** @param {!Array<!proto.SoccersInfoBean>} value */
proto.MsgSoccerPosSyncReq.prototype.setBallList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SoccersInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SoccersInfoBean}
 */
proto.MsgSoccerPosSyncReq.prototype.addBall = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SoccersInfoBean, opt_index);
};


proto.MsgSoccerPosSyncReq.prototype.clearBallList = function() {
  this.setBallList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSoccerPosSyncNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgSoccerPosSyncNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgSoccerPosSyncNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSoccerPosSyncNtf.displayName = 'proto.MsgSoccerPosSyncNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgSoccerPosSyncNtf.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSoccerPosSyncNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSoccerPosSyncNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSoccerPosSyncNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerPosSyncNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    ballList: jspb.Message.toObjectList(msg.getBallList(),
    proto.SoccersInfoBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSoccerPosSyncNtf}
 */
proto.MsgSoccerPosSyncNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSoccerPosSyncNtf;
  return proto.MsgSoccerPosSyncNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSoccerPosSyncNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSoccerPosSyncNtf}
 */
proto.MsgSoccerPosSyncNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = new proto.SoccersInfoBean;
      reader.readMessage(value,proto.SoccersInfoBean.deserializeBinaryFromReader);
      msg.addBall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSoccerPosSyncNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSoccerPosSyncNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSoccerPosSyncNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerPosSyncNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBallList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.SoccersInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgSoccerPosSyncNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSoccerPosSyncNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSoccerPosSyncNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerPosSyncNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SoccersInfoBean ball = 2;
 * @return {!Array<!proto.SoccersInfoBean>}
 */
proto.MsgSoccerPosSyncNtf.prototype.getBallList = function() {
  return /** @type{!Array<!proto.SoccersInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SoccersInfoBean, 2));
};


/** @param {!Array<!proto.SoccersInfoBean>} value */
proto.MsgSoccerPosSyncNtf.prototype.setBallList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SoccersInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SoccersInfoBean}
 */
proto.MsgSoccerPosSyncNtf.prototype.addBall = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SoccersInfoBean, opt_index);
};


proto.MsgSoccerPosSyncNtf.prototype.clearBallList = function() {
  this.setBallList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSoccerAimReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSoccerAimReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSoccerAimReq.displayName = 'proto.MsgSoccerAimReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSoccerAimReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSoccerAimReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSoccerAimReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerAimReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    id: jspb.Message.getField(msg, 2),
    power: jspb.Message.getField(msg, 3),
    startAngle: jspb.Message.getField(msg, 4),
    endAngle: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSoccerAimReq}
 */
proto.MsgSoccerAimReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSoccerAimReq;
  return proto.MsgSoccerAimReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSoccerAimReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSoccerAimReq}
 */
proto.MsgSoccerAimReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPower(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartAngle(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSoccerAimReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSoccerAimReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSoccerAimReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerAimReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgSoccerAimReq.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSoccerAimReq.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSoccerAimReq.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerAimReq.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.MsgSoccerAimReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSoccerAimReq.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSoccerAimReq.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerAimReq.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 power = 3;
 * @return {number}
 */
proto.MsgSoccerAimReq.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgSoccerAimReq.prototype.setPower = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgSoccerAimReq.prototype.clearPower = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerAimReq.prototype.hasPower = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 start_angle = 4;
 * @return {number}
 */
proto.MsgSoccerAimReq.prototype.getStartAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgSoccerAimReq.prototype.setStartAngle = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgSoccerAimReq.prototype.clearStartAngle = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerAimReq.prototype.hasStartAngle = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 end_angle = 5;
 * @return {number}
 */
proto.MsgSoccerAimReq.prototype.getEndAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgSoccerAimReq.prototype.setEndAngle = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgSoccerAimReq.prototype.clearEndAngle = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerAimReq.prototype.hasEndAngle = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSoccerAimNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSoccerAimNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSoccerAimNtf.displayName = 'proto.MsgSoccerAimNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSoccerAimNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSoccerAimNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSoccerAimNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerAimNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    id: jspb.Message.getField(msg, 2),
    power: jspb.Message.getField(msg, 3),
    startAngle: jspb.Message.getField(msg, 4),
    endAngle: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSoccerAimNtf}
 */
proto.MsgSoccerAimNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSoccerAimNtf;
  return proto.MsgSoccerAimNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSoccerAimNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSoccerAimNtf}
 */
proto.MsgSoccerAimNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPower(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartAngle(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSoccerAimNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSoccerAimNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSoccerAimNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerAimNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgSoccerAimNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSoccerAimNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSoccerAimNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerAimNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.MsgSoccerAimNtf.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSoccerAimNtf.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSoccerAimNtf.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerAimNtf.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 power = 3;
 * @return {number}
 */
proto.MsgSoccerAimNtf.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgSoccerAimNtf.prototype.setPower = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgSoccerAimNtf.prototype.clearPower = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerAimNtf.prototype.hasPower = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 start_angle = 4;
 * @return {number}
 */
proto.MsgSoccerAimNtf.prototype.getStartAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgSoccerAimNtf.prototype.setStartAngle = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgSoccerAimNtf.prototype.clearStartAngle = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerAimNtf.prototype.hasStartAngle = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 end_angle = 5;
 * @return {number}
 */
proto.MsgSoccerAimNtf.prototype.getEndAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MsgSoccerAimNtf.prototype.setEndAngle = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgSoccerAimNtf.prototype.clearEndAngle = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerAimNtf.prototype.hasEndAngle = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSoccerHitReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSoccerHitReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSoccerHitReq.displayName = 'proto.MsgSoccerHitReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSoccerHitReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSoccerHitReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSoccerHitReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerHitReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    id: jspb.Message.getField(msg, 2),
    power: jspb.Message.getField(msg, 3),
    angle: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSoccerHitReq}
 */
proto.MsgSoccerHitReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSoccerHitReq;
  return proto.MsgSoccerHitReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSoccerHitReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSoccerHitReq}
 */
proto.MsgSoccerHitReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPower(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSoccerHitReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSoccerHitReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSoccerHitReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerHitReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgSoccerHitReq.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSoccerHitReq.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSoccerHitReq.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerHitReq.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.MsgSoccerHitReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSoccerHitReq.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSoccerHitReq.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerHitReq.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 power = 3;
 * @return {number}
 */
proto.MsgSoccerHitReq.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgSoccerHitReq.prototype.setPower = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgSoccerHitReq.prototype.clearPower = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerHitReq.prototype.hasPower = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 angle = 4;
 * @return {number}
 */
proto.MsgSoccerHitReq.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgSoccerHitReq.prototype.setAngle = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgSoccerHitReq.prototype.clearAngle = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerHitReq.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSoccerHitNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSoccerHitNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSoccerHitNtf.displayName = 'proto.MsgSoccerHitNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSoccerHitNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSoccerHitNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSoccerHitNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerHitNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    id: jspb.Message.getField(msg, 2),
    power: jspb.Message.getField(msg, 3),
    angle: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSoccerHitNtf}
 */
proto.MsgSoccerHitNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSoccerHitNtf;
  return proto.MsgSoccerHitNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSoccerHitNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSoccerHitNtf}
 */
proto.MsgSoccerHitNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPower(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSoccerHitNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSoccerHitNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSoccerHitNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerHitNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgSoccerHitNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSoccerHitNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSoccerHitNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerHitNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.MsgSoccerHitNtf.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSoccerHitNtf.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSoccerHitNtf.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerHitNtf.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 power = 3;
 * @return {number}
 */
proto.MsgSoccerHitNtf.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgSoccerHitNtf.prototype.setPower = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgSoccerHitNtf.prototype.clearPower = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerHitNtf.prototype.hasPower = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 angle = 4;
 * @return {number}
 */
proto.MsgSoccerHitNtf.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgSoccerHitNtf.prototype.setAngle = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgSoccerHitNtf.prototype.clearAngle = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerHitNtf.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSoccerResultReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSoccerResultReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSoccerResultReq.displayName = 'proto.MsgSoccerResultReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSoccerResultReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSoccerResultReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSoccerResultReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerResultReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    effect: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSoccerResultReq}
 */
proto.MsgSoccerResultReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSoccerResultReq;
  return proto.MsgSoccerResultReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSoccerResultReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSoccerResultReq}
 */
proto.MsgSoccerResultReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEffect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSoccerResultReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSoccerResultReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSoccerResultReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerResultReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgSoccerResultReq.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSoccerResultReq.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSoccerResultReq.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerResultReq.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 effect = 2;
 * @return {number}
 */
proto.MsgSoccerResultReq.prototype.getEffect = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSoccerResultReq.prototype.setEffect = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSoccerResultReq.prototype.clearEffect = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerResultReq.prototype.hasEffect = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSoccerResultNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSoccerResultNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSoccerResultNtf.displayName = 'proto.MsgSoccerResultNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSoccerResultNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSoccerResultNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSoccerResultNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerResultNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkType: jspb.Message.getField(msg, 1),
    effect: jspb.Message.getField(msg, 2),
    winType: jspb.Message.getField(msg, 3),
    score: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSoccerResultNtf}
 */
proto.MsgSoccerResultNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSoccerResultNtf;
  return proto.MsgSoccerResultNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSoccerResultNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSoccerResultNtf}
 */
proto.MsgSoccerResultNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEffect(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWinType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSoccerResultNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSoccerResultNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSoccerResultNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerResultNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 pk_type = 1;
 * @return {number}
 */
proto.MsgSoccerResultNtf.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSoccerResultNtf.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSoccerResultNtf.prototype.clearPkType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerResultNtf.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 effect = 2;
 * @return {number}
 */
proto.MsgSoccerResultNtf.prototype.getEffect = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSoccerResultNtf.prototype.setEffect = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSoccerResultNtf.prototype.clearEffect = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerResultNtf.prototype.hasEffect = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 win_type = 3;
 * @return {number}
 */
proto.MsgSoccerResultNtf.prototype.getWinType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgSoccerResultNtf.prototype.setWinType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgSoccerResultNtf.prototype.clearWinType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerResultNtf.prototype.hasWinType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 score = 4;
 * @return {number}
 */
proto.MsgSoccerResultNtf.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgSoccerResultNtf.prototype.setScore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgSoccerResultNtf.prototype.clearScore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerResultNtf.prototype.hasScore = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSoccerOverNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgSoccerOverNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSoccerOverNtf.displayName = 'proto.MsgSoccerOverNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSoccerOverNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSoccerOverNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSoccerOverNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerOverNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSoccerOverNtf}
 */
proto.MsgSoccerOverNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSoccerOverNtf;
  return proto.MsgSoccerOverNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSoccerOverNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSoccerOverNtf}
 */
proto.MsgSoccerOverNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSoccerOverNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSoccerOverNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSoccerOverNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerOverNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 flag = 1;
 * @return {number}
 */
proto.MsgSoccerOverNtf.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSoccerOverNtf.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSoccerOverNtf.prototype.clearFlag = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerOverNtf.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 uid = 2;
 * @return {number}
 */
proto.MsgSoccerOverNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSoccerOverNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSoccerOverNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerOverNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgSoccerRecoveryNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgSoccerRecoveryNtf.repeatedFields_, null);
};
goog.inherits(proto.MsgSoccerRecoveryNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgSoccerRecoveryNtf.displayName = 'proto.MsgSoccerRecoveryNtf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgSoccerRecoveryNtf.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgSoccerRecoveryNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgSoccerRecoveryNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgSoccerRecoveryNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerRecoveryNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    curUid: jspb.Message.getField(msg, 1),
    leftTime: jspb.Message.getField(msg, 2),
    rivalScore: jspb.Message.getField(msg, 3),
    ballList: jspb.Message.toObjectList(msg.getBallList(),
    proto.SoccersInfoBean.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgSoccerRecoveryNtf}
 */
proto.MsgSoccerRecoveryNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgSoccerRecoveryNtf;
  return proto.MsgSoccerRecoveryNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgSoccerRecoveryNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgSoccerRecoveryNtf}
 */
proto.MsgSoccerRecoveryNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRivalScore(value);
      break;
    case 4:
      var value = new proto.SoccersInfoBean;
      reader.readMessage(value,proto.SoccersInfoBean.deserializeBinaryFromReader);
      msg.addBall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgSoccerRecoveryNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgSoccerRecoveryNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgSoccerRecoveryNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgSoccerRecoveryNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getBallList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.SoccersInfoBean.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 cur_uid = 1;
 * @return {number}
 */
proto.MsgSoccerRecoveryNtf.prototype.getCurUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgSoccerRecoveryNtf.prototype.setCurUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgSoccerRecoveryNtf.prototype.clearCurUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerRecoveryNtf.prototype.hasCurUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 left_time = 2;
 * @return {number}
 */
proto.MsgSoccerRecoveryNtf.prototype.getLeftTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgSoccerRecoveryNtf.prototype.setLeftTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgSoccerRecoveryNtf.prototype.clearLeftTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerRecoveryNtf.prototype.hasLeftTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 rival_score = 3;
 * @return {number}
 */
proto.MsgSoccerRecoveryNtf.prototype.getRivalScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgSoccerRecoveryNtf.prototype.setRivalScore = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgSoccerRecoveryNtf.prototype.clearRivalScore = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgSoccerRecoveryNtf.prototype.hasRivalScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated SoccersInfoBean ball = 4;
 * @return {!Array<!proto.SoccersInfoBean>}
 */
proto.MsgSoccerRecoveryNtf.prototype.getBallList = function() {
  return /** @type{!Array<!proto.SoccersInfoBean>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SoccersInfoBean, 4));
};


/** @param {!Array<!proto.SoccersInfoBean>} value */
proto.MsgSoccerRecoveryNtf.prototype.setBallList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.SoccersInfoBean=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SoccersInfoBean}
 */
proto.MsgSoccerRecoveryNtf.prototype.addBall = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.SoccersInfoBean, opt_index);
};


proto.MsgSoccerRecoveryNtf.prototype.clearBallList = function() {
  this.setBallList([]);
};


/**
 * @enum {number}
 */
proto.BATTLEGROUNDS_GOODS_TYPE = {
  TYPE_HP: 100,
  TYPE_POSITION: 101,
  TYPE_ROTATION: 102,
  TYPE_WEAPON_ONE: 200,
  TYPE_WEAPON_SECOND: 201,
  TYPE_WEAPON_MELEE: 202,
  TYPE_WEAPON_GRENADE: 203,
  TYPE_WEAPON_MEDICAL: 204,
  TYPE_CUR_EQUIP_WEAPON: 205,
  TYPE_CLOTHES_BODYARRMOR: 300,
  TYPE_CLOTHES_SHOES: 301,
  TYPE_CLOTHES_SUIT: 302,
  TYPE_CLOTHES_HEAD: 303,
  TYPE_CLOTHES_JACKET: 304,
  TYPE_CLOTHES_TROUSERS: 305,
  TYPE_CLOTHES_HAND: 306,
  TYPE_ITEM: 400,
  TYPE_KILL: 500
};

goog.object.extend(exports, proto);
