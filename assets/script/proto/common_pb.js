/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspbcomp = require('google-protobuf');
var COMPILED = jspbcomp.COMPILED;
var jspb = jspbcomp.jspb;
var goog = jspbcomp.goog;
var global = Function('return this')();

goog.exportSymbol('proto.BlockInfo', null, global);
goog.exportSymbol('proto.ChessInfo', null, global);
goog.exportSymbol('proto.GAMES_CMD', null, global);
goog.exportSymbol('proto.LinkInfo', null, global);
goog.exportSymbol('proto.PLATFORM_CMD', null, global);
goog.exportSymbol('proto.PkPlayerInfo', null, global);
goog.exportSymbol('proto.PointInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PkPlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PkPlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PkPlayerInfo.displayName = 'proto.PkPlayerInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PkPlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PkPlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PkPlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PkPlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    mid: jspb.Message.getField(msg, 2),
    sex: jspb.Message.getField(msg, 3),
    name: jspb.Message.getField(msg, 4),
    score: jspb.Message.getField(msg, 5),
    headImage: jspb.Message.getField(msg, 6),
    localtion: jspb.Message.getField(msg, 7),
    constellation: jspb.Message.getField(msg, 8),
    position: jspb.Message.getField(msg, 9),
    ready: jspb.Message.getField(msg, 10),
    age: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PkPlayerInfo}
 */
proto.PkPlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PkPlayerInfo;
  return proto.PkPlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PkPlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PkPlayerInfo}
 */
proto.PkPlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadImage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocaltion(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setConstellation(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReady(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PkPlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PkPlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PkPlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PkPlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * required uint32 uid = 1;
 * @return {number}
 */
proto.PkPlayerInfo.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PkPlayerInfo.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.PkPlayerInfo.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PkPlayerInfo.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 mid = 2;
 * @return {number}
 */
proto.PkPlayerInfo.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PkPlayerInfo.prototype.setMid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.PkPlayerInfo.prototype.clearMid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PkPlayerInfo.prototype.hasMid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 sex = 3;
 * @return {number}
 */
proto.PkPlayerInfo.prototype.getSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.PkPlayerInfo.prototype.setSex = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.PkPlayerInfo.prototype.clearSex = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PkPlayerInfo.prototype.hasSex = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.PkPlayerInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.PkPlayerInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.PkPlayerInfo.prototype.clearName = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PkPlayerInfo.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 score = 5;
 * @return {number}
 */
proto.PkPlayerInfo.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.PkPlayerInfo.prototype.setScore = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.PkPlayerInfo.prototype.clearScore = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PkPlayerInfo.prototype.hasScore = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string head_image = 6;
 * @return {string}
 */
proto.PkPlayerInfo.prototype.getHeadImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.PkPlayerInfo.prototype.setHeadImage = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.PkPlayerInfo.prototype.clearHeadImage = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PkPlayerInfo.prototype.hasHeadImage = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string localtion = 7;
 * @return {string}
 */
proto.PkPlayerInfo.prototype.getLocaltion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.PkPlayerInfo.prototype.setLocaltion = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.PkPlayerInfo.prototype.clearLocaltion = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PkPlayerInfo.prototype.hasLocaltion = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string constellation = 8;
 * @return {string}
 */
proto.PkPlayerInfo.prototype.getConstellation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.PkPlayerInfo.prototype.setConstellation = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.PkPlayerInfo.prototype.clearConstellation = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PkPlayerInfo.prototype.hasConstellation = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 position = 9;
 * @return {number}
 */
proto.PkPlayerInfo.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.PkPlayerInfo.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.PkPlayerInfo.prototype.clearPosition = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PkPlayerInfo.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 ready = 10;
 * @return {number}
 */
proto.PkPlayerInfo.prototype.getReady = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.PkPlayerInfo.prototype.setReady = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.PkPlayerInfo.prototype.clearReady = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PkPlayerInfo.prototype.hasReady = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 age = 11;
 * @return {number}
 */
proto.PkPlayerInfo.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.PkPlayerInfo.prototype.setAge = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.PkPlayerInfo.prototype.clearAge = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PkPlayerInfo.prototype.hasAge = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PointInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PointInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PointInfo.displayName = 'proto.PointInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PointInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PointInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PointInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PointInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PointInfo}
 */
proto.PointInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PointInfo;
  return proto.PointInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PointInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PointInfo}
 */
proto.PointInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PointInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PointInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PointInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PointInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.PointInfo.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PointInfo.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.PointInfo.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PointInfo.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.PointInfo.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PointInfo.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.PointInfo.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PointInfo.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LinkInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LinkInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LinkInfo.displayName = 'proto.LinkInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LinkInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.LinkInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LinkInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LinkInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2),
    goodsType: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LinkInfo}
 */
proto.LinkInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LinkInfo;
  return proto.LinkInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LinkInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LinkInfo}
 */
proto.LinkInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGoodsType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LinkInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LinkInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LinkInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LinkInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.LinkInfo.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LinkInfo.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.LinkInfo.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LinkInfo.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.LinkInfo.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LinkInfo.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.LinkInfo.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LinkInfo.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 goods_type = 3;
 * @return {number}
 */
proto.LinkInfo.prototype.getGoodsType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.LinkInfo.prototype.setGoodsType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.LinkInfo.prototype.clearGoodsType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LinkInfo.prototype.hasGoodsType = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BlockInfo.displayName = 'proto.BlockInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2),
    type: jspb.Message.getField(msg, 3),
    angle: jspb.Message.getField(msg, 4),
    speed: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockInfo}
 */
proto.BlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockInfo;
  return proto.BlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockInfo}
 */
proto.BlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAngle(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.BlockInfo.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BlockInfo.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BlockInfo.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BlockInfo.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.BlockInfo.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BlockInfo.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BlockInfo.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BlockInfo.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 type = 3;
 * @return {number}
 */
proto.BlockInfo.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BlockInfo.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BlockInfo.prototype.clearType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BlockInfo.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 angle = 4;
 * @return {number}
 */
proto.BlockInfo.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BlockInfo.prototype.setAngle = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BlockInfo.prototype.clearAngle = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BlockInfo.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 speed = 5;
 * @return {number}
 */
proto.BlockInfo.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BlockInfo.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BlockInfo.prototype.clearSpeed = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BlockInfo.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChessInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChessInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChessInfo.displayName = 'proto.ChessInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChessInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ChessInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChessInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChessInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2),
    gridType: jspb.Message.getField(msg, 3),
    chessType: jspb.Message.getField(msg, 4),
    pkType: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChessInfo}
 */
proto.ChessInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChessInfo;
  return proto.ChessInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChessInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChessInfo}
 */
proto.ChessInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGridType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChessType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPkType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChessInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChessInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChessInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChessInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required uint32 x = 1;
 * @return {number}
 */
proto.ChessInfo.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ChessInfo.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ChessInfo.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChessInfo.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 y = 2;
 * @return {number}
 */
proto.ChessInfo.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ChessInfo.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ChessInfo.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChessInfo.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 grid_type = 3;
 * @return {number}
 */
proto.ChessInfo.prototype.getGridType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ChessInfo.prototype.setGridType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ChessInfo.prototype.clearGridType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChessInfo.prototype.hasGridType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 chess_type = 4;
 * @return {number}
 */
proto.ChessInfo.prototype.getChessType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ChessInfo.prototype.setChessType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ChessInfo.prototype.clearChessType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChessInfo.prototype.hasChessType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 pk_type = 5;
 * @return {number}
 */
proto.ChessInfo.prototype.getPkType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ChessInfo.prototype.setPkType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ChessInfo.prototype.clearPkType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChessInfo.prototype.hasPkType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.PLATFORM_CMD = {
  CMD_PLF_LOGIN_REQ: 8192,
  CMD_PLF_LOGIN_REP: 8193,
  CMD_PLF_LOGOUT_REQ: 8194,
  CMD_PLF_LOGOUT_REP: 8195,
  CMD_PLF_HEARTBEST_REQ: 8196,
  CMD_PLF_HEARTBEST_REP: 8197,
  CMD_PLF_PK_MATCH_REQ: 8198,
  CMD_PLF_PK_MATCH_REP: 8199,
  CMD_PLF_PK_MATCH_NTF: 8200,
  CMD_PLF_PK_EXIT_REQ: 8201,
  CMD_PLF_PK_EXIT_NTF: 8202,
  CMD_PLF_PK_READY_REQ: 8203,
  CMD_PLF_PK_READY_NTF: 8204,
  CMD_PLF_CHAT_REQ: 8205,
  CMD_PLF_CHAT_REP: 8206,
  CMD_PLF_CHAT_NTF: 8207,
  CMD_PLF_MIKE_INVITE_REQ: 8208,
  CMD_PLF_MIKE_INVITE_NTF: 8209,
  CMD_PLF_MIKE_ACCEPT_REQ: 8210,
  CMD_PLF_MIKE_ACCEPT_NTF: 8211,
  CMD_PLF_MIKE_REP: 8212,
  CMD_PLF_MIKE_QUIT_REQ: 8213,
  CMD_PLF_MIKE_QUIT_NTF: 8214,
  CMD_PLF_CHAT_STATE_REQ: 8215,
  CMD_PLF_PK_INVITE_REQ: 8216,
  CMD_PLF_PK_INVITE_REP: 8217,
  CMD_PLF_PK_INVITE_NTF: 8218,
  CMD_PLF_PK_ACCEPT_REQ: 8219,
  CMD_PLF_PK_ACCEPT_REP: 8220,
  CMD_PLF_PK_ACCEPT_NTF: 8221,
  CMD_PLF_FOLLOW_NTF: 8222,
  CMD_PLF_CHAT_STATE_REP: 8223,
  CMD_PLF_PK_ENTER_REQ: 8224,
  CMD_PLF_PK_ENTER_REP: 8225,
  CMD_PLF_PK_ENTER_NTF: 8226,
  CMD_PLF_PK_CANCEL_REQ: 8227,
  CMD_PLF_PK_CANCEL_REP: 8228,
  CMD_PLF_PK_GROUP_NTF: 8229,
  CMD_PLF_PK_RESULT_NTF: 8230,
  CMD_PLF_SYS_NOTICE_NTF: 8231,
  CMD_PLF_FOLLOW2_NTF: 8232,
  CMD_PLF_INTERACT_REQ: 8233,
  CMD_PLF_INTERACT_REP: 8234,
  CMD_PLF_INTERACT_NTF: 8235,
  CMD_PLF_AC_CREATE_REQ: 8236,
  CMD_PLF_AC_CREATE_REP: 8237,
  CMD_PLF_AC_CREATE_NTF: 8238,
  CMD_PLF_AC_DESTORY_REQ: 8239,
  CMD_PLF_AC_DESTORY_REP: 8240,
  CMD_PLF_AC_DESTORY_NTF: 8241,
  CMD_PLF_AC_LIST_REQ: 8242,
  CMD_PLF_AC_LIST_REP: 8243,
  CMD_PLF_AC_ENTER_REQ: 8244,
  CMD_PLF_AC_ENTER_REP: 8245,
  CMD_PLF_AC_ENTER_NTF: 8246,
  CMD_PLF_AC_EXIT_REQ: 8247,
  CMD_PLF_AC_EXIT_NTF: 8248,
  CMD_PLF_AC_CHAT_REQ: 8249,
  CMD_PLF_AC_CHAT_REP: 8250,
  CMD_PLF_AC_CHAT_NTF: 8251,
  CMD_PLF_AC_OWNER_CHANGE_NTF: 8252,
  CMD_PLF_AC_TYPE_CHANGE_NTF: 8253,
  CMD_PLF_AC_BACKGROUND_CHANGE_NTF: 8254,
  CMD_PLF_AC_MIKE_REQ: 8255,
  CMD_PLF_AC_MIKE_REP: 8256,
  CMD_PLF_AC_MIKE_NTF: 8257,
  CMD_PLF_AC_MIKE_INVITE_REQ: 8258,
  CMD_PLF_AC_MIKE_INVITE_NTF: 8259,
  CMD_PLF_AC_MIKE_ACCEPT_REQ: 8260,
  CMD_PLF_AC_MIKE_ACCEPT_NTF: 8261,
  CMD_PLF_AC_MIKE_SUCCESS_NTF: 8262,
  CMD_PLF_AC_MIKE_OPT_REQ: 8263,
  CMD_PLF_AC_MIKE_OPT_NTF: 8264,
  CMD_PLF_AC_PRIVATE_CHANGE_NTF: 8265,
  CMD_PLF_AC_ROOMNAME_CHANGE_NTF: 8266,
  CMD_PLF_AC_GAME_READY_REQ: 8267,
  CMD_PLF_AC_GAME_READY_NTF: 8268,
  CMD_PLF_AC_GAME_START_REQ: 8269,
  CMD_PLF_AC_GAME_START_NTF: 8270,
  CMD_PLF_AC_GAME_ENTER_NTF: 8271,
  CMD_PLF_AC_MATCH_REQ: 8272,
  CMD_PLF_AC_MATCH_REP: 8273,
  CMD_PLF_AC_MATCH_NTF: 8274,
  CMD_PLF_AC_CANCEL_REQ: 8275,
  CMD_PLF_AC_CANCEL_REP: 8276,
  CMD_PLF_AC_KILLED_REQ: 8277,
  CMD_PLF_AC_KILLED_NTF: 8278,
  CMD_PLF_AC_ONLINE_NTF: 8279,
  CMD_PLF_AC_CONFIG_REQ: 8280,
  CMD_PLF_AC_CONFIG_NTF: 8281,
  CMD_PLF_AC_CHAT_LOG_REQ: 8282,
  CMD_PLF_AC_RECOVERY_REQ: 8283,
  CMD_PLF_AC_RECOVERY_REP: 8284,
  CMD_PLF_PK_CHAT_REQ: 8285,
  CMD_PLF_PK_CHAT_REP: 8286,
  CMD_PLF_PK_CHAT_NTF: 8287,
  CMD_PLF_AC_STATE_REQ: 8288,
  CMD_PLF_AC_STATE_NTF: 8289,
  CMD_PLF_GP_CREATE_REQ: 8290,
  CMD_PLF_GP_CREATE_REP: 8291,
  CMD_PLF_GP_ENTER_REQ: 8292,
  CMD_PLF_GP_ENTER_REP: 8293,
  CMD_PLF_GP_ENTER_NTF: 8294,
  CMD_PLF_GP_EXIT_REQ: 8295,
  CMD_PLF_GP_EXIT_NTF: 8296,
  CMD_PLF_GP_START_REQ: 8297,
  CMD_PLF_GP_START_NTF: 8298,
  CMD_PLF_GP_MODE_CHANGE_REQ: 8299,
  CMD_PLF_GP_MODE_CHANGE_REP: 8300,
  CMD_PLF_GP_MODE_CHANGE_NTF: 8301,
  CMD_PLF_GP_LEADER_CHANGE_NTF: 8302,
  CMD_PLF_AC_TYPE_CHANGE_REQ: 8303,
  CMD_PLF_AC_TYPE_CHANGE_REP: 8304
};

/**
 * @enum {number}
 */
proto.GAMES_CMD = {
  CMD_GAMES_GIVEUP_REQ: 10240,
  CMD_GAMES_GIVEUP_NTF: 10241,
  CMD_GAMES_AGREE_REQ: 10242,
  CMD_GAMES_AGREE_NTF: 10243,
  CMD_GAMES_START_REQ: 10244,
  CMD_GAMES_END_REQ: 10245,
  CMD_GAMES_READY_REQ: 10246,
  CMD_GAMES_READY_NTF: 10247,
  CMD_GAMES_RECOVERY_REQ: 10248,
  CMD_GAMES_RECOVERY_REP: 10249,
  CMD_GAMES_EXCEPTION_NTF: 10250,
  CMD_GAMES_START_REP: 10251,
  CMD_GAMES_END_REP: 10252,
  CMD_GAMES_USERLIST_NTF: 10253,
  CMD_GAMES_DISCONNECT_NTF: 10254,
  CMD_GAMES_OPTIONS_REQ: 10255,
  CMD_GAMES_OPTIONS_NTF: 10256,
  CMD_ANIMAL_START_NTF: 12288,
  CMD_ANIMAL_OPEN_REQ: 12289,
  CMD_ANIMAL_OPEN_REP: 12290,
  CMD_ANIMAL_OPEN_NTF: 12291,
  CMD_ANIMAL_MOVE_REQ: 12292,
  CMD_ANIMAL_MOVE_REP: 12293,
  CMD_ANIMAL_MOVE_NTF: 12294,
  CMD_ANIMAL_RESULT_NTF: 12295,
  CMD_ANIMAL_RECOVERY_NTF: 12296,
  CMD_LINK_START_NTF: 12304,
  CMD_LINK_LINE_REQ: 12305,
  CMD_LINK_LINE_REP: 12306,
  CMD_LINK_LINE_NTF: 12307,
  CMD_LINK_RESULT_NTF: 12308,
  CMD_LINK_SYNC_REQ: 12309,
  CMD_LINK_SYNC_NTF: 12310,
  CMD_LINK_RECOVERY_NTF: 12311,
  CMD_TETRIS_START_NTF: 12320,
  CMD_TETRIS_MOVE_REQ: 12321,
  CMD_TETRIS_MOVE_REP: 12322,
  CMD_TETRIS_MOVE_NTF: 12323,
  CMD_TETRIS_CLEAR_NTF: 12324,
  CMD_TETRIS_CHANGE_REQ: 12325,
  CMD_TETRIS_CHANGE_REP: 12326,
  CMD_TETRIS_SPEED_REQ: 12327,
  CMD_TETRIS_SPEED_REP: 12328,
  CMD_TETRIS_RESULT_NTF: 12329,
  CMD_TETRIS_SYNC_REQ: 12330,
  CMD_TETRIS_SYNC_NTF: 12331,
  CMD_TETRIS_RECOVERY_NTF: 12332,
  CMD_JUMP_START_NTF: 12336,
  CMD_JUMP_RESULT_NTF: 12337,
  CMD_JUMP_SYNC_REQ: 12338,
  CMD_JUMP_SYNC_NTF: 12339,
  CMD_JUMP_CELLINDEXUPDATE_REQ: 12340,
  CMD_JUMP_CELLINDEXUPDATE_NTF: 12341,
  CMD_JUMP_BATTLEINFO_REQ: 12342,
  CMD_JUMP_OBJECTINFO_REQ: 12343,
  CMD_JUMP_BATTLEINFO_NTF: 12344,
  CMD_JUMP_OBJECTINFO_NTF: 12345,
  CMD_JUMP_JUMPINFO_REQ: 12346,
  CMD_JUMP_JUMPINFO_NTF: 12347,
  CMD_JUMP_FLASHBACK_REQ: 12348,
  CMD_JUMP_FLASHBACK_NTF: 12349,
  CMD_JUMP_RECOVERY_NTF: 12350,
  CMD_GOBANG_START_NTF: 12352,
  CMD_GOBANG_PLAY_REQ: 12353,
  CMD_GOBANG_PLAY_REP: 12354,
  CMD_GOBANG_PLAY_NTF: 12355,
  CMD_GOBANG_BACK_NTF: 12356,
  CMD_GOBANG_RESULT_NTF: 12357,
  CMD_GOBANG_RECOVERY_NTF: 12358,
  CMD_BLACK_HOLE_START_NTF: 12368,
  CMD_BLACK_HOLE_REG_REQ: 12369,
  CMD_BLACK_HOLE_REG_REP: 12370,
  CMD_BLACK_HOLE_POS_REQ: 12371,
  CMD_BLACK_HOLE_POS_NTF: 12372,
  CMD_BLACK_HOLE_RESULT_NTF: 12373,
  CMD_BLACK_HOLE_ATTACK_REQ: 12374,
  CMD_BLACK_HOLE_ATTACK_NTF: 12375,
  CMD_BLACK_HOLE_GET_REQ: 12376,
  CMD_BLACK_HOLE_GET_REP: 12377,
  CMD_LUDO_START_NTF: 12384,
  CMD_LUDO_ROLL_DICE_REQ: 12385,
  CMD_LUDO_ROLL_DICE_REP: 12386,
  CMD_LUDO_ROLL_DICE_NTF: 12387,
  CMD_LUDO_FLY_REQ: 12388,
  CMD_LUDO_FLY_REP: 12389,
  CMD_LUDO_FLY_NTF: 12390,
  CMD_LUDO_RESULT_NTF: 12391,
  CMD_LUDO_RECOVERY_NTF: 12392,
  CMD_ARCHERY_START_NTF: 12400,
  CMD_ARCHERY_PLAY_REQ: 12401,
  CMD_ARCHERY_PLAY_REP: 12402,
  CMD_ARCHERY_PLAY_NTF: 12403,
  CMD_ARCHERY_PLAY_END_REQ: 12404,
  CMD_ARCHERY_PLAY_END_NTF: 12405,
  CMD_ARCHERY_PLAY_STATE_REQ: 12406,
  CMD_ARCHERY_PLAY_STATE_NTF: 12407,
  CMD_ARCHERY_RESULT_NTF: 12408,
  CMD_ARCHERY_RECOVERY_NTF: 12409,
  CMD_BASKETBALL_START_NTF: 12416,
  CMD_BASKETBALL_SYNC_REQ: 12417,
  CMD_BASKETBALL_SYNC_NTF: 12418,
  CMD_BASKETBALL_RESULT_NTF: 12419,
  CMD_BASKETBALL_FINISH_REQ: 12420,
  CMD_BASKETBALL_RECOVERY_NTF: 12421,
  CMD_WHOSPY_START_NTF: 12432,
  CMD_WHOSPY_START_DESC_NTF: 12433,
  CMD_WHOSPY_DESC_REQ: 12434,
  CMD_WHOSPY_DESC_NTF: 12435,
  CMD_WHOSPY_START_VOTE_NTF: 12436,
  CMD_WHOSPY_VOTE_REQ: 12437,
  CMD_WHOSPY_VOTE_NTF: 12438,
  CMD_WHOSPY_VOTE_RESULT_NTF: 12439,
  CMD_WHOSPY_START_GUESS_NTF: 12440,
  CMD_WHOSPY_GUESS_REQ: 12441,
  CMD_WHOSPY_GUESS_NTF: 12442,
  CMD_WHOSPY_OVER_NTF: 12443,
  CMD_WHOSPY_CHAT_REQ: 12444,
  CMD_WHOSPY_CHAT_NTF: 12445,
  CMD_WHOSPY_RECOVERY_NTF: 12446,
  CMD_SOLITAIRE_START_NTF: 12544,
  CMD_SOLITAIRE_SYNC_REQ: 12545,
  CMD_SOLITAIRE_SYNC_NTF: 12546,
  CMD_SOLITAIRE_RESULT_NTF: 12547,
  CMD_SOLITAIRE_RECOVERY_NTF: 12548,
  CMD_BILLIARDS_START_NTF: 12560,
  CMD_BILLIARDS_BALL_SYNC_REQ: 12561,
  CMD_BILLIARDS_BALL_SYNC_NTF: 12562,
  CMD_BILLIARDS_CUE_REQ: 12563,
  CMD_BILLIARDS_CUE_NTF: 12564,
  CMD_BILLIARDS_HIT_REQ: 12565,
  CMD_BILLIARDS_HIT_NTF: 12566,
  CMD_BILLIARDS_OVER_REQ: 12567,
  CMD_BILLIARDS_OVER_NTF: 12568,
  CMD_BILLIARDS_TURN_REQ: 12569,
  CMD_BILLIARDS_TURN_NTF: 12570,
  CMD_BILLIARDS_WHITE_BALL_ACTION_REQ: 12571,
  CMD_BILLIARDS_WHITE_BALL_ACTION_NTF: 12572,
  CMD_BILLIARDS_RECOVERY_NTF: 12573,
  CMD_BILLIARDS_SOLID_REQ: 12574,
  CMD_BILLIARDS_SOLID_NTF: 12575,
  CMD_CHESS_START_NTF: 12576,
  CMD_CHESS_MOVE_REQ: 12577,
  CMD_CHESS_MOVE_REP: 12578,
  CMD_CHESS_MOVE_NTF: 12579,
  CMD_CHESS_BACK_NTF: 12580,
  CMD_CHESS_RESULT_NTF: 12581,
  CMD_CHESS_RECOVERY_NTF: 12582,
  CMD_BALLTOWER_START_NTF: 12592,
  CMD_BALLTOWER_SCORE_SYNC_REQ: 12593,
  CMD_BALLTOWER_SCORE_SYNC_NTF: 12594,
  CMD_BALLTOWER_INFO_REQ: 12595,
  CMD_BALLTOWER_INFO_NTF: 12596,
  CMD_BALLTOWER_OVER_NTF: 12597,
  CMD_BALLTOWER_RECOVERY_NTF: 12598,
  CMD_ARMYCHESS_START_NTF: 12624,
  CMD_ARMYCHESS_OPERATE_NTF: 12625,
  CMD_ARMYCHESS_OPEN_REQ: 12626,
  CMD_ARMYCHESS_OPEN_REP: 12627,
  CMD_ARMYCHESS_OPEN_NTF: 12628,
  CMD_ARMYCHESS_MOVE_REQ: 12629,
  CMD_ARMYCHESS_MOVE_REP: 12630,
  CMD_ARMYCHESS_MOVE_NTF: 12631,
  CMD_ARMYCHESS_OVER_NTF: 12632,
  CMD_ARMYCHESS_RECOVERY_NTF: 12633,
  CMD_NITPICK_START_NTF: 12656,
  CMD_NITPICK_ROUND_START_NTF: 12657,
  CMD_NITPICK_PICK_REQ: 12659,
  CMD_NITPICK_PICK_NTF: 12660,
  CMD_NITPICK_ROUND_OVER_NTF: 12661,
  CMD_NITPICK_OVER_NTF: 12662,
  CMD_NITPICK_RECOVERY_NTF: 12663,
  CMD_CLEARBRICK_START_NTF: 12688,
  CMD_CLEARBRICK_SYNC_POS_REQ: 12689,
  CMD_CLEARBRICK_SYNC_POS_NTF: 12690,
  CMD_CLEARBRICK_ADD_ROW_REQ: 12691,
  CMD_CLEARBRICK_ADD_ROW_NTF: 12692,
  CMD_CLEARBRICK_BOTTOM_REQ: 12693,
  CMD_CLEARBRICK_OVER_NTF: 12694,
  CMD_CLEARBRICK_RECOVERY_NTF: 12695,
  CMD_CLEARPOINT_START_NTF: 12720,
  CMD_CLEARPOINT_SYNC_REQ: 12721,
  CMD_CLEARPOINT_SYNC_NTF: 12722,
  CMD_CLEARPOINT_RESULT_NTF: 12723,
  CMD_CLEARPOINT_RECOVERY_NTF: 12724,
  CMD_GUESSDRAW_START_NTF: 12752,
  CMD_GUESSDRAW_KEYS_REQ: 12753,
  CMD_GUESSDRAW_KEYS_NTF: 12754,
  CMD_GUESSDRAW_CHOICE_REQ: 12755,
  CMD_GUESSDRAW_CHOICE_NTF: 12756,
  CMD_GUESSDRAW_SYNCLINE_REQ: 12757,
  CMD_GUESSDRAW_SYNCLINE_NTF: 12758,
  CMD_GUESSDRAW_GUESS_REQ: 12759,
  CMD_GUESSDRAW_GUESS_NTF: 12760,
  CMD_GUESSDRAW_DISPLAY_NTF: 12761,
  CMD_GUESSDRAW_EVALUATE_REQ: 12762,
  CMD_GUESSDRAW_EVALUATE_NTF: 12763,
  CMD_GUESSDRAW_OVER_NTF: 12764,
  CMD_GUESSDRAW_RECOVERY_NTF: 12765,
  CMD_PILEHERO_START_NTF: 12784,
  CMD_PILEHERO_SHOOT_REQ: 12785,
  CMD_PILEHERO_SHOOT_REP: 12786,
  CMD_PILEHERO_SHOOT_NTF: 12787,
  CMD_PILEHERO_PLAY_REQ: 12788,
  CMD_PILEHERO_PLAY_NTF: 12789,
  CMD_PILEHERO_PROPS_NTF: 12790,
  CMD_PILEHERO_OVER_NTF: 12791,
  CMD_PILEHERO_RECOVERY_NTF: 12792,
  CMD_JOYCLEAR_START_NTF: 12832,
  CMD_JOYCLEAR_SYNCMP_REQ: 12833,
  CMD_JOYCLEAR_SYNCMP_NTF: 12834,
  CMD_JOYCLEAR_SYNCHP_REQ: 12835,
  CMD_JOYCLEAR_SYNCHP_NTF: 12836,
  CMD_JOYCLEAR_OVER_NTF: 12837,
  CMD_JOYCLEAR_RECOVERY_NTF: 12838,
  CMD_FLYCHICKEN_START_NTF: 12864,
  CMD_FLYCHICKEN_ROUND_START_NTF: 12865,
  CMD_FLYCHICKEN_SHOOT_REQ: 12866,
  CMD_FLYCHICKEN_SHOOT_NTF: 12867,
  CMD_FLYCHICKEN_HIT_REQ: 12868,
  CMD_FLYCHICKEN_HIT_NTF: 12869,
  CMD_FLYCHICKEN_PROP_NTF: 12870,
  CMD_FLYCHICKEN_ROUND_OVER_NTF: 12871,
  CMD_FLYCHICKEN_OVER_NTF: 12872,
  CMD_FLYCHICKEN_RECOVERY_NTF: 12873,
  CMD_BATTLEGROUNDS_START_NTF: 12896,
  CMD_BATTLEGROUNDS_REG_REQ: 12897,
  CMD_BATTLEGROUNDS_REG_REP: 12898,
  CMD_BATTLEGROUNDS_POS_REQ: 12899,
  CMD_BATTLEGROUNDS_POS_NTF: 12900,
  CMD_BATTLEGROUNDS_RESULT_NTF: 12901,
  CMD_BATTLEGROUNDS_START_POS_REQ: 12902,
  CMD_BATTLEGROUNDS_AI_NTF: 12903,
  CMD_BATTLEGROUNDS_POS_CORRECTION_NTF: 12904,
  CMD_BATTLEGROUNDS_ATTACK_REQ: 12905,
  CMD_BATTLEGROUNDS_DIED_NTF: 12906,
  CMD_BATTLEGROUNDS_PLAYERINFO_NTF: 12907,
  CMD_BATTLEGROUNDS_MAP_ITEM_INIT_NTF: 12908,
  CMD_BATTLEGROUNDS_MAP_ITEM_REMOVE_REQ: 12909,
  CMD_BATTLEGROUNDS_MAP_ITEM_REMOVE_REP: 12910,
  CMD_BATTLEGROUNDS_MAP_ITEM_REMOVE_NTF: 12911,
  CMD_BATTLEGROUNDS_MAP_ITEM_ADD_REQ: 12912,
  CMD_BATTLEGROUNDS_MAP_ITEM_ADD_REP: 12913,
  CMD_BATTLEGROUNDS_MAP_ITEM_ADD_NTF: 12914,
  CMD_BATTLEGROUNDS_SAFETYZONE_NTF: 12915,
  CMD_TAPBLACK_START_NTF: 12928,
  CMD_TAPBLACK_SCORESYNC_REQ: 12929,
  CMD_TAPBLACK_SCORESYNC_NTF: 12930,
  CMD_TAPBLACK_OVER_NTF: 12931,
  CMD_TAPBLACK_RECOVERY_NTF: 12932,
  CMD_SOCCER_START_NTF: 12960,
  CMD_SOCCER_ROUND_NTF: 12961,
  CMD_SOCCER_REG_REQ: 12962,
  CMD_SOCCER_REG_REP: 12963,
  CMD_SOCCER_SYNC_REQ: 12964,
  CMD_SOCCER_SYNC_NTF: 12965,
  CMD_SOCCER_AIM_REQ: 12966,
  CMD_SOCCER_AIM_NTF: 12967,
  CMD_SOCCER_HIT_REQ: 12968,
  CMD_SOCCER_HIT_NTF: 12969,
  CMD_SOCCER_RESULT_REQ: 12970,
  CMD_SOCCER_RESULT_NTF: 12971,
  CMD_SOCCER_OVER_NTF: 12972,
  CMD_SOCCER_RECOVERY_NTF: 12973,
  CMD_CATCHFISH_START_NTF: 12992,
  CMD_CATCHFISH_REG_REQ: 12993,
  CMD_CATCHFISH_REG_REP: 12994,
  CMD_CATCHFISH_POS_NTF: 12995,
  CMD_CATCHFISH_PROP_NTF: 12996,
  CMD_CATCHFISH_USEPROP_REQ: 12997,
  CMD_CATCHFISH_USEPROP_NTF: 12998,
  CMD_CATCHFISH_ROTATE_REQ: 12999,
  CMD_CATCHFISH_ROTATE_NTF: 13000,
  CMD_CATCHFISH_FLING_REQ: 13001,
  CMD_CATCHFISH_FLING_NTF: 13002,
  CMD_CATCHFISH_HIT_REQ: 13003,
  CMD_CATCHFISH_HIT_NTF: 13004,
  CMD_CATCHFISH_OVER_NTF: 13005,
  CMD_GOLDMINER_START_NTF: 13024,
  CMD_GOLDMINER_PROP_NTF: 13025,
  CMD_GOLDMINER_SUPERPROP_NTF: 13026,
  CMD_GOLDMINER_SNIPER_REQ: 13027,
  CMD_GOLDMINER_SNIPER_NTF: 13028,
  CMD_GOLDMINER_BACK_REQ: 13029,
  CMD_GOLDMINER_BACK_NTF: 13030,
  CMD_GOLDMINER_GAIN_REQ: 13031,
  CMD_GOLDMINER_GAIN_NTF: 13032,
  CMD_GOLDMINER_PROPUSE_REQ: 13033,
  CMD_GOLDMINER_PROPUSE_NTF: 13034,
  CMD_GOLDMINER_OVER_NTF: 13035,
  CMD_GOLDMINER_RECOVERY_NTF: 13036
};

goog.object.extend(exports, proto);
