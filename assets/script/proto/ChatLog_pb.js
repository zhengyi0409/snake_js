/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspbcomp = require('google-protobuf');
var COMPILED = jspbcomp.COMPILED;
var jspb = jspbcomp.jspb;
var goog = jspbcomp.goog;
var global = Function('return this')();


goog.exportSymbol('proto.ChatItem', null, global);
goog.exportSymbol('proto.ChatStatusItem', null, global);
goog.exportSymbol('proto.Emoj', null, global);
goog.exportSymbol('proto.Game', null, global);
goog.exportSymbol('proto.GraphicMsg', null, global);
goog.exportSymbol('proto.MsgChatLog', null, global);
goog.exportSymbol('proto.MsgChatStatusRep', null, global);
goog.exportSymbol('proto.MsgChatStatusReq', null, global);
goog.exportSymbol('proto.MsgChatUnreadItem', null, global);
goog.exportSymbol('proto.MsgChatUnreadLog', null, global);
goog.exportSymbol('proto.MsgFollowNotify', null, global);
goog.exportSymbol('proto.MsgFromPhpNotify', null, global);
goog.exportSymbol('proto.MsgStatus', null, global);
goog.exportSymbol('proto.MsgType', null, global);
goog.exportSymbol('proto.User', null, global);
goog.exportSymbol('proto.VoiceRoomShare', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Emoj = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Emoj, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Emoj.displayName = 'proto.Emoj';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Emoj.prototype.toObject = function(opt_includeInstance) {
  return proto.Emoj.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Emoj} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emoj.toObject = function(includeInstance, msg) {
  var f, obj = {
    emojId: jspb.Message.getField(msg, 1),
    emojUrl: jspb.Message.getField(msg, 2),
    isGif: jspb.Message.getField(msg, 3),
    width: jspb.Message.getOptionalFloatingPointField(msg, 4),
    height: jspb.Message.getOptionalFloatingPointField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Emoj}
 */
proto.Emoj.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Emoj;
  return proto.Emoj.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Emoj} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Emoj}
 */
proto.Emoj.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEmojId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmojUrl(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsGif(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Emoj.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Emoj.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Emoj} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Emoj.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional int64 emoj_id = 1;
 * @return {number}
 */
proto.Emoj.prototype.getEmojId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Emoj.prototype.setEmojId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Emoj.prototype.clearEmojId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emoj.prototype.hasEmojId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string emoj_url = 2;
 * @return {string}
 */
proto.Emoj.prototype.getEmojUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Emoj.prototype.setEmojUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Emoj.prototype.clearEmojUrl = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emoj.prototype.hasEmojUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_gif = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Emoj.prototype.getIsGif = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Emoj.prototype.setIsGif = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Emoj.prototype.clearIsGif = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emoj.prototype.hasIsGif = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float width = 4;
 * @return {number}
 */
proto.Emoj.prototype.getWidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Emoj.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Emoj.prototype.clearWidth = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emoj.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float height = 5;
 * @return {number}
 */
proto.Emoj.prototype.getHeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.Emoj.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Emoj.prototype.clearHeight = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Emoj.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.User.displayName = 'proto.User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.prototype.toObject = function(opt_includeInstance) {
  return proto.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    avatar: jspb.Message.getField(msg, 2),
    name: jspb.Message.getField(msg, 3),
    gender: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User}
 */
proto.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User;
  return proto.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User}
 */
proto.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 uid = 1;
 * @return {number}
 */
proto.User.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.User.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.User.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.User.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string avatar = 2;
 * @return {string}
 */
proto.User.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.User.prototype.setAvatar = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.User.prototype.clearAvatar = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.User.prototype.hasAvatar = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.User.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.User.prototype.clearName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.User.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string gender = 4;
 * @return {string}
 */
proto.User.prototype.getGender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.User.prototype.setGender = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.User.prototype.clearGender = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.User.prototype.hasGender = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Game, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Game.displayName = 'proto.Game';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Game.prototype.toObject = function(opt_includeInstance) {
  return proto.Game.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Game} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getField(msg, 1),
    gameImage: jspb.Message.getField(msg, 2),
    gameName: jspb.Message.getField(msg, 3),
    roomId: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game}
 */
proto.Game.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Game;
  return proto.Game.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game}
 */
proto.Game.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameImage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Game.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 game_id = 1;
 * @return {number}
 */
proto.Game.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Game.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Game.prototype.clearGameId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Game.prototype.hasGameId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string game_image = 2;
 * @return {string}
 */
proto.Game.prototype.getGameImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Game.prototype.setGameImage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Game.prototype.clearGameImage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Game.prototype.hasGameImage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string game_name = 3;
 * @return {string}
 */
proto.Game.prototype.getGameName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Game.prototype.setGameName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Game.prototype.clearGameName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Game.prototype.hasGameName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string room_id = 4;
 * @return {string}
 */
proto.Game.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Game.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Game.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Game.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GraphicMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GraphicMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GraphicMsg.displayName = 'proto.GraphicMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GraphicMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.GraphicMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GraphicMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GraphicMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getField(msg, 1),
    pic: jspb.Message.getField(msg, 2),
    desc: jspb.Message.getField(msg, 3),
    link: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GraphicMsg}
 */
proto.GraphicMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GraphicMsg;
  return proto.GraphicMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GraphicMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GraphicMsg}
 */
proto.GraphicMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GraphicMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GraphicMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GraphicMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GraphicMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.GraphicMsg.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GraphicMsg.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GraphicMsg.prototype.clearTitle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GraphicMsg.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string pic = 2;
 * @return {string}
 */
proto.GraphicMsg.prototype.getPic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.GraphicMsg.prototype.setPic = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GraphicMsg.prototype.clearPic = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GraphicMsg.prototype.hasPic = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.GraphicMsg.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.GraphicMsg.prototype.setDesc = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GraphicMsg.prototype.clearDesc = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GraphicMsg.prototype.hasDesc = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string link = 4;
 * @return {string}
 */
proto.GraphicMsg.prototype.getLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.GraphicMsg.prototype.setLink = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GraphicMsg.prototype.clearLink = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GraphicMsg.prototype.hasLink = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VoiceRoomShare = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VoiceRoomShare, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VoiceRoomShare.displayName = 'proto.VoiceRoomShare';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VoiceRoomShare.prototype.toObject = function(opt_includeInstance) {
  return proto.VoiceRoomShare.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VoiceRoomShare} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VoiceRoomShare.toObject = function(includeInstance, msg) {
  var f, obj = {
    shareTitle: jspb.Message.getField(msg, 1),
    sharePic: jspb.Message.getField(msg, 2),
    shareDesc: jspb.Message.getField(msg, 3),
    roomId: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VoiceRoomShare}
 */
proto.VoiceRoomShare.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VoiceRoomShare;
  return proto.VoiceRoomShare.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VoiceRoomShare} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VoiceRoomShare}
 */
proto.VoiceRoomShare.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShareTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSharePic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShareDesc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VoiceRoomShare.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VoiceRoomShare.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VoiceRoomShare} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VoiceRoomShare.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string share_title = 1;
 * @return {string}
 */
proto.VoiceRoomShare.prototype.getShareTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VoiceRoomShare.prototype.setShareTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.VoiceRoomShare.prototype.clearShareTitle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.VoiceRoomShare.prototype.hasShareTitle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string share_pic = 2;
 * @return {string}
 */
proto.VoiceRoomShare.prototype.getSharePic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VoiceRoomShare.prototype.setSharePic = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.VoiceRoomShare.prototype.clearSharePic = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.VoiceRoomShare.prototype.hasSharePic = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string share_desc = 3;
 * @return {string}
 */
proto.VoiceRoomShare.prototype.getShareDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.VoiceRoomShare.prototype.setShareDesc = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.VoiceRoomShare.prototype.clearShareDesc = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.VoiceRoomShare.prototype.hasShareDesc = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string room_id = 4;
 * @return {string}
 */
proto.VoiceRoomShare.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.VoiceRoomShare.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.VoiceRoomShare.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.VoiceRoomShare.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatItem.displayName = 'proto.ChatItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatItem.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgId: jspb.Message.getField(msg, 1),
    send: (f = msg.getSend()) && proto.User.toObject(includeInstance, f),
    targetId: jspb.Message.getField(msg, 3),
    msgType: jspb.Message.getField(msg, 4),
    game: (f = msg.getGame()) && proto.Game.toObject(includeInstance, f),
    url: jspb.Message.getField(msg, 6),
    content: jspb.Message.getField(msg, 7),
    expires: jspb.Message.getField(msg, 8),
    updateTime: jspb.Message.getField(msg, 9),
    status: jspb.Message.getField(msg, 10),
    chatTime: jspb.Message.getField(msg, 11),
    contentEmoji: jspb.Message.getField(msg, 12),
    fromUser: (f = msg.getFromUser()) && proto.User.toObject(includeInstance, f),
    graphicMsg: (f = msg.getGraphicMsg()) && proto.GraphicMsg.toObject(includeInstance, f),
    interactType: jspb.Message.getField(msg, 15),
    isSysNotice: jspb.Message.getField(msg, 16),
    emoj: (f = msg.getEmoj()) && proto.Emoj.toObject(includeInstance, f),
    share: (f = msg.getShare()) && proto.VoiceRoomShare.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatItem}
 */
proto.ChatItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatItem;
  return proto.ChatItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatItem}
 */
proto.ChatItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMsgId(value);
      break;
    case 2:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setSend(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTargetId(value);
      break;
    case 4:
      var value = /** @type {!proto.MsgType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    case 5:
      var value = new proto.Game;
      reader.readMessage(value,proto.Game.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpires(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpdateTime(value);
      break;
    case 10:
      var value = /** @type {!proto.MsgStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChatTime(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentEmoji(value);
      break;
    case 13:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.setFromUser(value);
      break;
    case 14:
      var value = new proto.GraphicMsg;
      reader.readMessage(value,proto.GraphicMsg.deserializeBinaryFromReader);
      msg.setGraphicMsg(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInteractType(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSysNotice(value);
      break;
    case 17:
      var value = new proto.Emoj;
      reader.readMessage(value,proto.Emoj.deserializeBinaryFromReader);
      msg.setEmoj(value);
      break;
    case 18:
      var value = new proto.VoiceRoomShare;
      reader.readMessage(value,proto.VoiceRoomShare.deserializeBinaryFromReader);
      msg.setShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSend();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {!proto.MsgType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Game.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {!proto.MsgStatus} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getFromUser();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getGraphicMsg();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.GraphicMsg.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getEmoj();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.Emoj.serializeBinaryToWriter
    );
  }
  f = message.getShare();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.VoiceRoomShare.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 msg_id = 1;
 * @return {number}
 */
proto.ChatItem.prototype.getMsgId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ChatItem.prototype.setMsgId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ChatItem.prototype.clearMsgId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasMsgId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User send = 2;
 * @return {?proto.User}
 */
proto.ChatItem.prototype.getSend = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 2));
};


/** @param {?proto.User|undefined} value */
proto.ChatItem.prototype.setSend = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ChatItem.prototype.clearSend = function() {
  this.setSend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasSend = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 target_id = 3;
 * @return {number}
 */
proto.ChatItem.prototype.getTargetId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ChatItem.prototype.setTargetId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ChatItem.prototype.clearTargetId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasTargetId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MsgType msg_type = 4;
 * @return {!proto.MsgType}
 */
proto.ChatItem.prototype.getMsgType = function() {
  return /** @type {!proto.MsgType} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/** @param {!proto.MsgType} value */
proto.ChatItem.prototype.setMsgType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ChatItem.prototype.clearMsgType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasMsgType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Game game = 5;
 * @return {?proto.Game}
 */
proto.ChatItem.prototype.getGame = function() {
  return /** @type{?proto.Game} */ (
    jspb.Message.getWrapperField(this, proto.Game, 5));
};


/** @param {?proto.Game|undefined} value */
proto.ChatItem.prototype.setGame = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.ChatItem.prototype.clearGame = function() {
  this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasGame = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string url = 6;
 * @return {string}
 */
proto.ChatItem.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ChatItem.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.ChatItem.prototype.clearUrl = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string content = 7;
 * @return {string}
 */
proto.ChatItem.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.ChatItem.prototype.setContent = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.ChatItem.prototype.clearContent = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasContent = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 expires = 8;
 * @return {number}
 */
proto.ChatItem.prototype.getExpires = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.ChatItem.prototype.setExpires = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.ChatItem.prototype.clearExpires = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasExpires = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 update_time = 9;
 * @return {number}
 */
proto.ChatItem.prototype.getUpdateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.ChatItem.prototype.setUpdateTime = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.ChatItem.prototype.clearUpdateTime = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasUpdateTime = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional MsgStatus status = 10;
 * @return {!proto.MsgStatus}
 */
proto.ChatItem.prototype.getStatus = function() {
  return /** @type {!proto.MsgStatus} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.MsgStatus} value */
proto.ChatItem.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.ChatItem.prototype.clearStatus = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 chat_time = 11;
 * @return {number}
 */
proto.ChatItem.prototype.getChatTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.ChatItem.prototype.setChatTime = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.ChatItem.prototype.clearChatTime = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasChatTime = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string content_emoji = 12;
 * @return {string}
 */
proto.ChatItem.prototype.getContentEmoji = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.ChatItem.prototype.setContentEmoji = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.ChatItem.prototype.clearContentEmoji = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasContentEmoji = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional User from_user = 13;
 * @return {?proto.User}
 */
proto.ChatItem.prototype.getFromUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, proto.User, 13));
};


/** @param {?proto.User|undefined} value */
proto.ChatItem.prototype.setFromUser = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.ChatItem.prototype.clearFromUser = function() {
  this.setFromUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasFromUser = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional GraphicMsg graphic_msg = 14;
 * @return {?proto.GraphicMsg}
 */
proto.ChatItem.prototype.getGraphicMsg = function() {
  return /** @type{?proto.GraphicMsg} */ (
    jspb.Message.getWrapperField(this, proto.GraphicMsg, 14));
};


/** @param {?proto.GraphicMsg|undefined} value */
proto.ChatItem.prototype.setGraphicMsg = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.ChatItem.prototype.clearGraphicMsg = function() {
  this.setGraphicMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasGraphicMsg = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int32 interact_type = 15;
 * @return {number}
 */
proto.ChatItem.prototype.getInteractType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.ChatItem.prototype.setInteractType = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.ChatItem.prototype.clearInteractType = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasInteractType = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool is_sys_notice = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ChatItem.prototype.getIsSysNotice = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.ChatItem.prototype.setIsSysNotice = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.ChatItem.prototype.clearIsSysNotice = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasIsSysNotice = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Emoj emoj = 17;
 * @return {?proto.Emoj}
 */
proto.ChatItem.prototype.getEmoj = function() {
  return /** @type{?proto.Emoj} */ (
    jspb.Message.getWrapperField(this, proto.Emoj, 17));
};


/** @param {?proto.Emoj|undefined} value */
proto.ChatItem.prototype.setEmoj = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.ChatItem.prototype.clearEmoj = function() {
  this.setEmoj(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasEmoj = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional VoiceRoomShare share = 18;
 * @return {?proto.VoiceRoomShare}
 */
proto.ChatItem.prototype.getShare = function() {
  return /** @type{?proto.VoiceRoomShare} */ (
    jspb.Message.getWrapperField(this, proto.VoiceRoomShare, 18));
};


/** @param {?proto.VoiceRoomShare|undefined} value */
proto.ChatItem.prototype.setShare = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.ChatItem.prototype.clearShare = function() {
  this.setShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatItem.prototype.hasShare = function() {
  return jspb.Message.getField(this, 18) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgChatLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgChatLog.repeatedFields_, null);
};
goog.inherits(proto.MsgChatLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgChatLog.displayName = 'proto.MsgChatLog';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgChatLog.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgChatLog.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgChatLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgChatLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChatLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemList: jspb.Message.toObjectList(msg.getItemList(),
    proto.ChatItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgChatLog}
 */
proto.MsgChatLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgChatLog;
  return proto.MsgChatLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgChatLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgChatLog}
 */
proto.MsgChatLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatItem;
      reader.readMessage(value,proto.ChatItem.deserializeBinaryFromReader);
      msg.addItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgChatLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgChatLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgChatLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChatLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ChatItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChatItem item = 1;
 * @return {!Array<!proto.ChatItem>}
 */
proto.MsgChatLog.prototype.getItemList = function() {
  return /** @type{!Array<!proto.ChatItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ChatItem, 1));
};


/** @param {!Array<!proto.ChatItem>} value */
proto.MsgChatLog.prototype.setItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ChatItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChatItem}
 */
proto.MsgChatLog.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ChatItem, opt_index);
};


proto.MsgChatLog.prototype.clearItemList = function() {
  this.setItemList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgChatUnreadItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgChatUnreadItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgChatUnreadItem.displayName = 'proto.MsgChatUnreadItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgChatUnreadItem.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgChatUnreadItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgChatUnreadItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChatUnreadItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2),
    targetUid: jspb.Message.getField(msg, 3),
    targetName: jspb.Message.getField(msg, 4),
    msgType: jspb.Message.getField(msg, 5),
    content: jspb.Message.getField(msg, 6),
    createTime: jspb.Message.getField(msg, 7),
    url: jspb.Message.getField(msg, 8),
    targetImgUrl: jspb.Message.getField(msg, 9),
    gameId: jspb.Message.getField(msg, 10),
    expires: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgChatUnreadItem}
 */
proto.MsgChatUnreadItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgChatUnreadItem;
  return proto.MsgChatUnreadItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgChatUnreadItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgChatUnreadItem}
 */
proto.MsgChatUnreadItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTargetUid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetName(value);
      break;
    case 5:
      var value = /** @type {!proto.MsgType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateTime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetImgUrl(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameId(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpires(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgChatUnreadItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgChatUnreadItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgChatUnreadItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChatUnreadItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {!proto.MsgType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.MsgChatUnreadItem.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgChatUnreadItem.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgChatUnreadItem.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChatUnreadItem.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 uid = 2;
 * @return {number}
 */
proto.MsgChatUnreadItem.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgChatUnreadItem.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgChatUnreadItem.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChatUnreadItem.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 target_uid = 3;
 * @return {number}
 */
proto.MsgChatUnreadItem.prototype.getTargetUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MsgChatUnreadItem.prototype.setTargetUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgChatUnreadItem.prototype.clearTargetUid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChatUnreadItem.prototype.hasTargetUid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string target_name = 4;
 * @return {string}
 */
proto.MsgChatUnreadItem.prototype.getTargetName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.MsgChatUnreadItem.prototype.setTargetName = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgChatUnreadItem.prototype.clearTargetName = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChatUnreadItem.prototype.hasTargetName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MsgType msg_type = 5;
 * @return {!proto.MsgType}
 */
proto.MsgChatUnreadItem.prototype.getMsgType = function() {
  return /** @type {!proto.MsgType} */ (jspb.Message.getFieldWithDefault(this, 5, 1));
};


/** @param {!proto.MsgType} value */
proto.MsgChatUnreadItem.prototype.setMsgType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MsgChatUnreadItem.prototype.clearMsgType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChatUnreadItem.prototype.hasMsgType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string content = 6;
 * @return {string}
 */
proto.MsgChatUnreadItem.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.MsgChatUnreadItem.prototype.setContent = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MsgChatUnreadItem.prototype.clearContent = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChatUnreadItem.prototype.hasContent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 create_time = 7;
 * @return {number}
 */
proto.MsgChatUnreadItem.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.MsgChatUnreadItem.prototype.setCreateTime = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MsgChatUnreadItem.prototype.clearCreateTime = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChatUnreadItem.prototype.hasCreateTime = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string url = 8;
 * @return {string}
 */
proto.MsgChatUnreadItem.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.MsgChatUnreadItem.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.MsgChatUnreadItem.prototype.clearUrl = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChatUnreadItem.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string target_img_url = 9;
 * @return {string}
 */
proto.MsgChatUnreadItem.prototype.getTargetImgUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.MsgChatUnreadItem.prototype.setTargetImgUrl = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.MsgChatUnreadItem.prototype.clearTargetImgUrl = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChatUnreadItem.prototype.hasTargetImgUrl = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 game_id = 10;
 * @return {number}
 */
proto.MsgChatUnreadItem.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.MsgChatUnreadItem.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.MsgChatUnreadItem.prototype.clearGameId = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChatUnreadItem.prototype.hasGameId = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 expires = 11;
 * @return {number}
 */
proto.MsgChatUnreadItem.prototype.getExpires = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.MsgChatUnreadItem.prototype.setExpires = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.MsgChatUnreadItem.prototype.clearExpires = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChatUnreadItem.prototype.hasExpires = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgChatUnreadLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgChatUnreadLog.repeatedFields_, null);
};
goog.inherits(proto.MsgChatUnreadLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgChatUnreadLog.displayName = 'proto.MsgChatUnreadLog';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgChatUnreadLog.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgChatUnreadLog.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgChatUnreadLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgChatUnreadLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChatUnreadLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemList: jspb.Message.toObjectList(msg.getItemList(),
    proto.MsgChatUnreadItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgChatUnreadLog}
 */
proto.MsgChatUnreadLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgChatUnreadLog;
  return proto.MsgChatUnreadLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgChatUnreadLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgChatUnreadLog}
 */
proto.MsgChatUnreadLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MsgChatUnreadItem;
      reader.readMessage(value,proto.MsgChatUnreadItem.deserializeBinaryFromReader);
      msg.addItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgChatUnreadLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgChatUnreadLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgChatUnreadLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChatUnreadLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MsgChatUnreadItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MsgChatUnreadItem item = 1;
 * @return {!Array<!proto.MsgChatUnreadItem>}
 */
proto.MsgChatUnreadLog.prototype.getItemList = function() {
  return /** @type{!Array<!proto.MsgChatUnreadItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MsgChatUnreadItem, 1));
};


/** @param {!Array<!proto.MsgChatUnreadItem>} value */
proto.MsgChatUnreadLog.prototype.setItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MsgChatUnreadItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MsgChatUnreadItem}
 */
proto.MsgChatUnreadLog.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MsgChatUnreadItem, opt_index);
};


proto.MsgChatUnreadLog.prototype.clearItemList = function() {
  this.setItemList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatStatusItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatStatusItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatStatusItem.displayName = 'proto.ChatStatusItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatStatusItem.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatStatusItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatStatusItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatStatusItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgId: jspb.Message.getField(msg, 1),
    targetUid: jspb.Message.getField(msg, 2),
    uid: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatStatusItem}
 */
proto.ChatStatusItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatStatusItem;
  return proto.ChatStatusItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatStatusItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatStatusItem}
 */
proto.ChatStatusItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMsgId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTargetUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatStatusItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatStatusItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatStatusItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatStatusItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 msg_id = 1;
 * @return {number}
 */
proto.ChatStatusItem.prototype.getMsgId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ChatStatusItem.prototype.setMsgId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ChatStatusItem.prototype.clearMsgId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatStatusItem.prototype.hasMsgId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 target_uid = 2;
 * @return {number}
 */
proto.ChatStatusItem.prototype.getTargetUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ChatStatusItem.prototype.setTargetUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ChatStatusItem.prototype.clearTargetUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatStatusItem.prototype.hasTargetUid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 uid = 3;
 * @return {number}
 */
proto.ChatStatusItem.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ChatStatusItem.prototype.setUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ChatStatusItem.prototype.clearUid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatStatusItem.prototype.hasUid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgChatStatusReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MsgChatStatusReq.repeatedFields_, null);
};
goog.inherits(proto.MsgChatStatusReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgChatStatusReq.displayName = 'proto.MsgChatStatusReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MsgChatStatusReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgChatStatusReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgChatStatusReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgChatStatusReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChatStatusReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemList: jspb.Message.toObjectList(msg.getItemList(),
    proto.ChatStatusItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgChatStatusReq}
 */
proto.MsgChatStatusReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgChatStatusReq;
  return proto.MsgChatStatusReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgChatStatusReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgChatStatusReq}
 */
proto.MsgChatStatusReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatStatusItem;
      reader.readMessage(value,proto.ChatStatusItem.deserializeBinaryFromReader);
      msg.addItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgChatStatusReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgChatStatusReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgChatStatusReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChatStatusReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ChatStatusItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChatStatusItem item = 1;
 * @return {!Array<!proto.ChatStatusItem>}
 */
proto.MsgChatStatusReq.prototype.getItemList = function() {
  return /** @type{!Array<!proto.ChatStatusItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ChatStatusItem, 1));
};


/** @param {!Array<!proto.ChatStatusItem>} value */
proto.MsgChatStatusReq.prototype.setItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ChatStatusItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChatStatusItem}
 */
proto.MsgChatStatusReq.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ChatStatusItem, opt_index);
};


proto.MsgChatStatusReq.prototype.clearItemList = function() {
  this.setItemList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgChatStatusRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgChatStatusRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgChatStatusRep.displayName = 'proto.MsgChatStatusRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgChatStatusRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgChatStatusRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgChatStatusRep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChatStatusRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgChatStatusRep}
 */
proto.MsgChatStatusRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgChatStatusRep;
  return proto.MsgChatStatusRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgChatStatusRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgChatStatusRep}
 */
proto.MsgChatStatusRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgChatStatusRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgChatStatusRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgChatStatusRep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgChatStatusRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 rcode = 1;
 * @return {number}
 */
proto.MsgChatStatusRep.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgChatStatusRep.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgChatStatusRep.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgChatStatusRep.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFollowNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgFollowNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFollowNotify.displayName = 'proto.MsgFollowNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFollowNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFollowNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFollowNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFollowNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    followNum: jspb.Message.getField(msg, 2),
    msg: jspb.Message.getField(msg, 3),
    fromUid: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFollowNotify}
 */
proto.MsgFollowNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFollowNotify;
  return proto.MsgFollowNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFollowNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFollowNotify}
 */
proto.MsgFollowNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFollowNum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFromUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFollowNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFollowNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFollowNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFollowNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 uid = 1;
 * @return {number}
 */
proto.MsgFollowNotify.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MsgFollowNotify.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgFollowNotify.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFollowNotify.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 follow_num = 2;
 * @return {number}
 */
proto.MsgFollowNotify.prototype.getFollowNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MsgFollowNotify.prototype.setFollowNum = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgFollowNotify.prototype.clearFollowNum = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFollowNotify.prototype.hasFollowNum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string msg = 3;
 * @return {string}
 */
proto.MsgFollowNotify.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.MsgFollowNotify.prototype.setMsg = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MsgFollowNotify.prototype.clearMsg = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFollowNotify.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 from_uid = 4;
 * @return {number}
 */
proto.MsgFollowNotify.prototype.getFromUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MsgFollowNotify.prototype.setFromUid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MsgFollowNotify.prototype.clearFromUid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFollowNotify.prototype.hasFromUid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgFromPhpNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgFromPhpNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MsgFromPhpNotify.displayName = 'proto.MsgFromPhpNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgFromPhpNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgFromPhpNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgFromPhpNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFromPhpNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getField(msg, 1),
    fromType: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgFromPhpNotify}
 */
proto.MsgFromPhpNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgFromPhpNotify;
  return proto.MsgFromPhpNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgFromPhpNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgFromPhpNotify}
 */
proto.MsgFromPhpNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgFromPhpNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgFromPhpNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgFromPhpNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgFromPhpNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string msg = 1;
 * @return {string}
 */
proto.MsgFromPhpNotify.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MsgFromPhpNotify.prototype.setMsg = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MsgFromPhpNotify.prototype.clearMsg = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFromPhpNotify.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string from_type = 2;
 * @return {string}
 */
proto.MsgFromPhpNotify.prototype.getFromType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MsgFromPhpNotify.prototype.setFromType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MsgFromPhpNotify.prototype.clearFromType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MsgFromPhpNotify.prototype.hasFromType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.MsgType = {
  TEXT: 1,
  INVITE: 2,
  EMOJI: 3,
  AUDIO: 4,
  MIKE: 5,
  PIC: 6,
  ACCEPT: 7,
  REJECT: 8,
  PUSH: 9,
  CANCLE: 10,
  SYS_IMAGE_NOTICE: 11,
  SYS_TEXT_NOTICE: 12,
  INTERACT: 13,
  VOICE_ROOM_SHARE: 14,
  INVITE_TEAM_GAME: 15
};

/**
 * @enum {number}
 */
proto.MsgStatus = {
  UNREAD: 0,
  READ: 1,
  FAILED: 2,
  SENDING: 3,
  SUCCESS: 4,
  DOWNLOADING: 5,
  DOWNLOADFAIL: 6
};

goog.object.extend(exports, proto);
