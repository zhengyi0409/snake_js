/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspbcomp = require('google-protobuf');
var COMPILED = jspbcomp.COMPILED;
var jspb = jspbcomp.jspb;
var goog = jspbcomp.goog;
var global = Function('return this')();

goog.exportSymbol('proto.slither.CS_AdjustTime_Req', null, global);
goog.exportSymbol('proto.slither.CS_AdjustTime_ReqEX', null, global);
goog.exportSymbol('proto.slither.CS_AdjustTime_Response', null, global);
goog.exportSymbol('proto.slither.CS_AdjustTime_ResponseEX', null, global);
goog.exportSymbol('proto.slither.CS_CMD_ID', null, global);
goog.exportSymbol('proto.slither.CS_SessionRestart', null, global);
goog.exportSymbol('proto.slither.CS_Snake', null, global);
goog.exportSymbol('proto.slither.CS_TeamCreate_Req', null, global);
goog.exportSymbol('proto.slither.CS_TeamDestory_Req', null, global);
goog.exportSymbol('proto.slither.CS_TeamExit_Req', null, global);
goog.exportSymbol('proto.slither.CS_TeamInvite_Accept_Req', null, global);
goog.exportSymbol('proto.slither.CS_TeamInvite_Reject_Req', null, global);
goog.exportSymbol('proto.slither.CS_TeamInvite_Req', null, global);
goog.exportSymbol('proto.slither.CS_TeamKick_Req', null, global);
goog.exportSymbol('proto.slither.CS_TeamMatchCancel_Req', null, global);
goog.exportSymbol('proto.slither.CS_TeamMatch_Req', null, global);
goog.exportSymbol('proto.slither.CS_TeamQuickEnter_Req', null, global);
goog.exportSymbol('proto.slither.CS_TeamStart_Req', null, global);
goog.exportSymbol('proto.slither.FrameIdx', null, global);
goog.exportSymbol('proto.slither.SC_DeadInfo', null, global);
goog.exportSymbol('proto.slither.SC_DeadNtf', null, global);
goog.exportSymbol('proto.slither.SC_Eat_Food_Ntf', null, global);
goog.exportSymbol('proto.slither.SC_FlyGoodsInfo', null, global);
goog.exportSymbol('proto.slither.SC_FlyGoodsInfos', null, global);
goog.exportSymbol('proto.slither.SC_FrameInfo', null, global);
goog.exportSymbol('proto.slither.SC_FrameInfos', null, global);
goog.exportSymbol('proto.slither.SC_SessionNtf', null, global);
goog.exportSymbol('proto.slither.SC_Snake', null, global);
goog.exportSymbol('proto.slither.SC_TeamCreate_Res', null, global);
goog.exportSymbol('proto.slither.SC_TeamDestory_NTF', null, global);
goog.exportSymbol('proto.slither.SC_TeamDestory_Res', null, global);
goog.exportSymbol('proto.slither.SC_TeamExit_NTF', null, global);
goog.exportSymbol('proto.slither.SC_TeamInvite_Accept_NTF', null, global);
goog.exportSymbol('proto.slither.SC_TeamInvite_Accept_Res', null, global);
goog.exportSymbol('proto.slither.SC_TeamInvite_NTF', null, global);
goog.exportSymbol('proto.slither.SC_TeamInvite_Reject_NTF', null, global);
goog.exportSymbol('proto.slither.SC_TeamInvite_Res', null, global);
goog.exportSymbol('proto.slither.SC_TeamKick_NTF', null, global);
goog.exportSymbol('proto.slither.SC_TeamMatch_NTF', null, global);
goog.exportSymbol('proto.slither.SC_TeamMemInfo', null, global);
goog.exportSymbol('proto.slither.SC_TeamQuickEnter_Res', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_AdjustTime_Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_AdjustTime_Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_AdjustTime_Req.displayName = 'proto.slither.CS_AdjustTime_Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_AdjustTime_Req.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_AdjustTime_Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_AdjustTime_Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_AdjustTime_Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    time1: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_AdjustTime_Req}
 */
proto.slither.CS_AdjustTime_Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_AdjustTime_Req;
  return proto.slither.CS_AdjustTime_Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_AdjustTime_Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_AdjustTime_Req}
 */
proto.slither.CS_AdjustTime_Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTime1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_AdjustTime_Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_AdjustTime_Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_AdjustTime_Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_AdjustTime_Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFixed64(
      1,
      f
    );
  }
};


/**
 * required fixed64 time1 = 1;
 * @return {number}
 */
proto.slither.CS_AdjustTime_Req.prototype.getTime1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_AdjustTime_Req.prototype.setTime1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_AdjustTime_Req.prototype.clearTime1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_AdjustTime_Req.prototype.hasTime1 = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_AdjustTime_Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_AdjustTime_Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_AdjustTime_Response.displayName = 'proto.slither.CS_AdjustTime_Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_AdjustTime_Response.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_AdjustTime_Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_AdjustTime_Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_AdjustTime_Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    time1: jspb.Message.getField(msg, 1),
    time2: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_AdjustTime_Response}
 */
proto.slither.CS_AdjustTime_Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_AdjustTime_Response;
  return proto.slither.CS_AdjustTime_Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_AdjustTime_Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_AdjustTime_Response}
 */
proto.slither.CS_AdjustTime_Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTime1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTime2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_AdjustTime_Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_AdjustTime_Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_AdjustTime_Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_AdjustTime_Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFixed64(
      2,
      f
    );
  }
};


/**
 * required fixed64 time1 = 1;
 * @return {number}
 */
proto.slither.CS_AdjustTime_Response.prototype.getTime1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_AdjustTime_Response.prototype.setTime1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_AdjustTime_Response.prototype.clearTime1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_AdjustTime_Response.prototype.hasTime1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required fixed64 time2 = 2;
 * @return {number}
 */
proto.slither.CS_AdjustTime_Response.prototype.getTime2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.CS_AdjustTime_Response.prototype.setTime2 = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.CS_AdjustTime_Response.prototype.clearTime2 = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_AdjustTime_Response.prototype.hasTime2 = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_AdjustTime_ReqEX = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_AdjustTime_ReqEX, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_AdjustTime_ReqEX.displayName = 'proto.slither.CS_AdjustTime_ReqEX';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_AdjustTime_ReqEX.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_AdjustTime_ReqEX.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_AdjustTime_ReqEX} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_AdjustTime_ReqEX.toObject = function(includeInstance, msg) {
  var f, obj = {
    time1: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_AdjustTime_ReqEX}
 */
proto.slither.CS_AdjustTime_ReqEX.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_AdjustTime_ReqEX;
  return proto.slither.CS_AdjustTime_ReqEX.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_AdjustTime_ReqEX} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_AdjustTime_ReqEX}
 */
proto.slither.CS_AdjustTime_ReqEX.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTime1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_AdjustTime_ReqEX.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_AdjustTime_ReqEX.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_AdjustTime_ReqEX} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_AdjustTime_ReqEX.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFixed64(
      1,
      f
    );
  }
};


/**
 * required fixed64 time1 = 1;
 * @return {number}
 */
proto.slither.CS_AdjustTime_ReqEX.prototype.getTime1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_AdjustTime_ReqEX.prototype.setTime1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_AdjustTime_ReqEX.prototype.clearTime1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_AdjustTime_ReqEX.prototype.hasTime1 = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_AdjustTime_ResponseEX = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_AdjustTime_ResponseEX, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_AdjustTime_ResponseEX.displayName = 'proto.slither.CS_AdjustTime_ResponseEX';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_AdjustTime_ResponseEX.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_AdjustTime_ResponseEX.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_AdjustTime_ResponseEX} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_AdjustTime_ResponseEX.toObject = function(includeInstance, msg) {
  var f, obj = {
    time1: jspb.Message.getField(msg, 1),
    time2: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_AdjustTime_ResponseEX}
 */
proto.slither.CS_AdjustTime_ResponseEX.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_AdjustTime_ResponseEX;
  return proto.slither.CS_AdjustTime_ResponseEX.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_AdjustTime_ResponseEX} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_AdjustTime_ResponseEX}
 */
proto.slither.CS_AdjustTime_ResponseEX.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTime1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTime2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_AdjustTime_ResponseEX.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_AdjustTime_ResponseEX.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_AdjustTime_ResponseEX} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_AdjustTime_ResponseEX.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFixed64(
      2,
      f
    );
  }
};


/**
 * required fixed64 time1 = 1;
 * @return {number}
 */
proto.slither.CS_AdjustTime_ResponseEX.prototype.getTime1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_AdjustTime_ResponseEX.prototype.setTime1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_AdjustTime_ResponseEX.prototype.clearTime1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_AdjustTime_ResponseEX.prototype.hasTime1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required fixed64 time2 = 2;
 * @return {number}
 */
proto.slither.CS_AdjustTime_ResponseEX.prototype.getTime2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.CS_AdjustTime_ResponseEX.prototype.setTime2 = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.CS_AdjustTime_ResponseEX.prototype.clearTime2 = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_AdjustTime_ResponseEX.prototype.hasTime2 = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_SessionRestart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_SessionRestart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_SessionRestart.displayName = 'proto.slither.CS_SessionRestart';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_SessionRestart.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_SessionRestart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_SessionRestart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_SessionRestart.toObject = function(includeInstance, msg) {
  var f, obj = {
    protect: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_SessionRestart}
 */
proto.slither.CS_SessionRestart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_SessionRestart;
  return proto.slither.CS_SessionRestart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_SessionRestart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_SessionRestart}
 */
proto.slither.CS_SessionRestart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProtect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_SessionRestart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_SessionRestart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_SessionRestart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_SessionRestart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 protect = 1;
 * @return {number}
 */
proto.slither.CS_SessionRestart.prototype.getProtect = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_SessionRestart.prototype.setProtect = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_SessionRestart.prototype.clearProtect = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_SessionRestart.prototype.hasProtect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_TeamMemInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_TeamMemInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_TeamMemInfo.displayName = 'proto.slither.SC_TeamMemInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_TeamMemInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_TeamMemInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_TeamMemInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamMemInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    username: jspb.Message.getField(msg, 2),
    head: jspb.Message.getField(msg, 3),
    headframe: jspb.Message.getField(msg, 4),
    vip: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_TeamMemInfo}
 */
proto.slither.SC_TeamMemInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_TeamMemInfo;
  return proto.slither.SC_TeamMemInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_TeamMemInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_TeamMemInfo}
 */
proto.slither.SC_TeamMemInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHead(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeadframe(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_TeamMemInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_TeamMemInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_TeamMemInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamMemInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required int32 userId = 1;
 * @return {number}
 */
proto.slither.SC_TeamMemInfo.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_TeamMemInfo.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_TeamMemInfo.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamMemInfo.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userName = 2;
 * @return {string}
 */
proto.slither.SC_TeamMemInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.slither.SC_TeamMemInfo.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.SC_TeamMemInfo.prototype.clearUsername = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamMemInfo.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string head = 3;
 * @return {string}
 */
proto.slither.SC_TeamMemInfo.prototype.getHead = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.slither.SC_TeamMemInfo.prototype.setHead = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.slither.SC_TeamMemInfo.prototype.clearHead = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamMemInfo.prototype.hasHead = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 headFrame = 4;
 * @return {number}
 */
proto.slither.SC_TeamMemInfo.prototype.getHeadframe = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.slither.SC_TeamMemInfo.prototype.setHeadframe = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.slither.SC_TeamMemInfo.prototype.clearHeadframe = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamMemInfo.prototype.hasHeadframe = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 vip = 5;
 * @return {number}
 */
proto.slither.SC_TeamMemInfo.prototype.getVip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.slither.SC_TeamMemInfo.prototype.setVip = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.slither.SC_TeamMemInfo.prototype.clearVip = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamMemInfo.prototype.hasVip = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_TeamCreate_Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_TeamCreate_Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_TeamCreate_Req.displayName = 'proto.slither.CS_TeamCreate_Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_TeamCreate_Req.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_TeamCreate_Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_TeamCreate_Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamCreate_Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamname: jspb.Message.getField(msg, 1),
    skinid: jspb.Message.getField(msg, 2),
    dressid: jspb.Message.getField(msg, 3),
    head: jspb.Message.getField(msg, 4),
    headframe: jspb.Message.getField(msg, 5),
    vip: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_TeamCreate_Req}
 */
proto.slither.CS_TeamCreate_Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_TeamCreate_Req;
  return proto.slither.CS_TeamCreate_Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_TeamCreate_Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_TeamCreate_Req}
 */
proto.slither.CS_TeamCreate_Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSkinid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDressid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHead(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeadframe(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_TeamCreate_Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_TeamCreate_Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_TeamCreate_Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamCreate_Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * required string teamName = 1;
 * @return {string}
 */
proto.slither.CS_TeamCreate_Req.prototype.getTeamname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.slither.CS_TeamCreate_Req.prototype.setTeamname = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_TeamCreate_Req.prototype.clearTeamname = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamCreate_Req.prototype.hasTeamname = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 skinId = 2;
 * @return {number}
 */
proto.slither.CS_TeamCreate_Req.prototype.getSkinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.CS_TeamCreate_Req.prototype.setSkinid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.CS_TeamCreate_Req.prototype.clearSkinid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamCreate_Req.prototype.hasSkinid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 dressId = 3;
 * @return {number}
 */
proto.slither.CS_TeamCreate_Req.prototype.getDressid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.slither.CS_TeamCreate_Req.prototype.setDressid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.slither.CS_TeamCreate_Req.prototype.clearDressid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamCreate_Req.prototype.hasDressid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string head = 4;
 * @return {string}
 */
proto.slither.CS_TeamCreate_Req.prototype.getHead = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.slither.CS_TeamCreate_Req.prototype.setHead = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.slither.CS_TeamCreate_Req.prototype.clearHead = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamCreate_Req.prototype.hasHead = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 headFrame = 5;
 * @return {number}
 */
proto.slither.CS_TeamCreate_Req.prototype.getHeadframe = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.slither.CS_TeamCreate_Req.prototype.setHeadframe = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.slither.CS_TeamCreate_Req.prototype.clearHeadframe = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamCreate_Req.prototype.hasHeadframe = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 vip = 6;
 * @return {number}
 */
proto.slither.CS_TeamCreate_Req.prototype.getVip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.slither.CS_TeamCreate_Req.prototype.setVip = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.slither.CS_TeamCreate_Req.prototype.clearVip = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamCreate_Req.prototype.hasVip = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_TeamDestory_Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_TeamDestory_Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_TeamDestory_Req.displayName = 'proto.slither.CS_TeamDestory_Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_TeamDestory_Req.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_TeamDestory_Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_TeamDestory_Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamDestory_Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_TeamDestory_Req}
 */
proto.slither.CS_TeamDestory_Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_TeamDestory_Req;
  return proto.slither.CS_TeamDestory_Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_TeamDestory_Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_TeamDestory_Req}
 */
proto.slither.CS_TeamDestory_Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_TeamDestory_Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_TeamDestory_Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_TeamDestory_Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamDestory_Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 teamId = 1;
 * @return {number}
 */
proto.slither.CS_TeamDestory_Req.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_TeamDestory_Req.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_TeamDestory_Req.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamDestory_Req.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_TeamInvite_Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_TeamInvite_Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_TeamInvite_Req.displayName = 'proto.slither.CS_TeamInvite_Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_TeamInvite_Req.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_TeamInvite_Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_TeamInvite_Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamInvite_Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getField(msg, 1),
    userid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_TeamInvite_Req}
 */
proto.slither.CS_TeamInvite_Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_TeamInvite_Req;
  return proto.slither.CS_TeamInvite_Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_TeamInvite_Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_TeamInvite_Req}
 */
proto.slither.CS_TeamInvite_Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_TeamInvite_Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_TeamInvite_Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_TeamInvite_Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamInvite_Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 teamId = 1;
 * @return {number}
 */
proto.slither.CS_TeamInvite_Req.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_TeamInvite_Req.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_TeamInvite_Req.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamInvite_Req.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 userId = 2;
 * @return {number}
 */
proto.slither.CS_TeamInvite_Req.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.CS_TeamInvite_Req.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.CS_TeamInvite_Req.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamInvite_Req.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_TeamInvite_Accept_Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_TeamInvite_Accept_Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_TeamInvite_Accept_Req.displayName = 'proto.slither.CS_TeamInvite_Accept_Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_TeamInvite_Accept_Req.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_TeamInvite_Accept_Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_TeamInvite_Accept_Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamInvite_Accept_Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getField(msg, 1),
    infos: (f = msg.getInfos()) && proto.slither.SC_TeamMemInfo.toObject(includeInstance, f),
    skinid: jspb.Message.getField(msg, 3),
    dressid: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_TeamInvite_Accept_Req}
 */
proto.slither.CS_TeamInvite_Accept_Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_TeamInvite_Accept_Req;
  return proto.slither.CS_TeamInvite_Accept_Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_TeamInvite_Accept_Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_TeamInvite_Accept_Req}
 */
proto.slither.CS_TeamInvite_Accept_Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    case 2:
      var value = new proto.slither.SC_TeamMemInfo;
      reader.readMessage(value,proto.slither.SC_TeamMemInfo.deserializeBinaryFromReader);
      msg.setInfos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSkinid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDressid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_TeamInvite_Accept_Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_TeamInvite_Accept_Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_TeamInvite_Accept_Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamInvite_Accept_Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfos();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.slither.SC_TeamMemInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 teamId = 1;
 * @return {number}
 */
proto.slither.CS_TeamInvite_Accept_Req.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_TeamInvite_Accept_Req.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_TeamInvite_Accept_Req.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamInvite_Accept_Req.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required SC_TeamMemInfo infos = 2;
 * @return {!proto.slither.SC_TeamMemInfo}
 */
proto.slither.CS_TeamInvite_Accept_Req.prototype.getInfos = function() {
  return /** @type{!proto.slither.SC_TeamMemInfo} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamMemInfo, 2, 1));
};


/** @param {!proto.slither.SC_TeamMemInfo} value */
proto.slither.CS_TeamInvite_Accept_Req.prototype.setInfos = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.slither.CS_TeamInvite_Accept_Req.prototype.clearInfos = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamInvite_Accept_Req.prototype.hasInfos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 skinId = 3;
 * @return {number}
 */
proto.slither.CS_TeamInvite_Accept_Req.prototype.getSkinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.slither.CS_TeamInvite_Accept_Req.prototype.setSkinid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.slither.CS_TeamInvite_Accept_Req.prototype.clearSkinid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamInvite_Accept_Req.prototype.hasSkinid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 dressId = 4;
 * @return {number}
 */
proto.slither.CS_TeamInvite_Accept_Req.prototype.getDressid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.slither.CS_TeamInvite_Accept_Req.prototype.setDressid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.slither.CS_TeamInvite_Accept_Req.prototype.clearDressid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamInvite_Accept_Req.prototype.hasDressid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_TeamInvite_Reject_Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_TeamInvite_Reject_Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_TeamInvite_Reject_Req.displayName = 'proto.slither.CS_TeamInvite_Reject_Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_TeamInvite_Reject_Req.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_TeamInvite_Reject_Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_TeamInvite_Reject_Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamInvite_Reject_Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getField(msg, 1),
    userid: jspb.Message.getField(msg, 2),
    selfid: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_TeamInvite_Reject_Req}
 */
proto.slither.CS_TeamInvite_Reject_Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_TeamInvite_Reject_Req;
  return proto.slither.CS_TeamInvite_Reject_Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_TeamInvite_Reject_Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_TeamInvite_Reject_Req}
 */
proto.slither.CS_TeamInvite_Reject_Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSelfid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_TeamInvite_Reject_Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_TeamInvite_Reject_Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_TeamInvite_Reject_Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamInvite_Reject_Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 teamId = 1;
 * @return {number}
 */
proto.slither.CS_TeamInvite_Reject_Req.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_TeamInvite_Reject_Req.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_TeamInvite_Reject_Req.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamInvite_Reject_Req.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 userId = 2;
 * @return {number}
 */
proto.slither.CS_TeamInvite_Reject_Req.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.CS_TeamInvite_Reject_Req.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.CS_TeamInvite_Reject_Req.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamInvite_Reject_Req.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 selfId = 3;
 * @return {number}
 */
proto.slither.CS_TeamInvite_Reject_Req.prototype.getSelfid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.slither.CS_TeamInvite_Reject_Req.prototype.setSelfid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.slither.CS_TeamInvite_Reject_Req.prototype.clearSelfid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamInvite_Reject_Req.prototype.hasSelfid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_TeamQuickEnter_Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_TeamQuickEnter_Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_TeamQuickEnter_Req.displayName = 'proto.slither.CS_TeamQuickEnter_Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_TeamQuickEnter_Req.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_TeamQuickEnter_Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_TeamQuickEnter_Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamQuickEnter_Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getField(msg, 1),
    infos: (f = msg.getInfos()) && proto.slither.SC_TeamMemInfo.toObject(includeInstance, f),
    skinid: jspb.Message.getField(msg, 3),
    dressid: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_TeamQuickEnter_Req}
 */
proto.slither.CS_TeamQuickEnter_Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_TeamQuickEnter_Req;
  return proto.slither.CS_TeamQuickEnter_Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_TeamQuickEnter_Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_TeamQuickEnter_Req}
 */
proto.slither.CS_TeamQuickEnter_Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    case 2:
      var value = new proto.slither.SC_TeamMemInfo;
      reader.readMessage(value,proto.slither.SC_TeamMemInfo.deserializeBinaryFromReader);
      msg.setInfos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSkinid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDressid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_TeamQuickEnter_Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_TeamQuickEnter_Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_TeamQuickEnter_Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamQuickEnter_Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfos();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.slither.SC_TeamMemInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 teamId = 1;
 * @return {number}
 */
proto.slither.CS_TeamQuickEnter_Req.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_TeamQuickEnter_Req.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_TeamQuickEnter_Req.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamQuickEnter_Req.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required SC_TeamMemInfo infos = 2;
 * @return {!proto.slither.SC_TeamMemInfo}
 */
proto.slither.CS_TeamQuickEnter_Req.prototype.getInfos = function() {
  return /** @type{!proto.slither.SC_TeamMemInfo} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamMemInfo, 2, 1));
};


/** @param {!proto.slither.SC_TeamMemInfo} value */
proto.slither.CS_TeamQuickEnter_Req.prototype.setInfos = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.slither.CS_TeamQuickEnter_Req.prototype.clearInfos = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamQuickEnter_Req.prototype.hasInfos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 skinId = 3;
 * @return {number}
 */
proto.slither.CS_TeamQuickEnter_Req.prototype.getSkinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.slither.CS_TeamQuickEnter_Req.prototype.setSkinid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.slither.CS_TeamQuickEnter_Req.prototype.clearSkinid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamQuickEnter_Req.prototype.hasSkinid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 dressId = 4;
 * @return {number}
 */
proto.slither.CS_TeamQuickEnter_Req.prototype.getDressid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.slither.CS_TeamQuickEnter_Req.prototype.setDressid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.slither.CS_TeamQuickEnter_Req.prototype.clearDressid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamQuickEnter_Req.prototype.hasDressid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_TeamKick_Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_TeamKick_Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_TeamKick_Req.displayName = 'proto.slither.CS_TeamKick_Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_TeamKick_Req.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_TeamKick_Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_TeamKick_Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamKick_Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getField(msg, 1),
    userid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_TeamKick_Req}
 */
proto.slither.CS_TeamKick_Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_TeamKick_Req;
  return proto.slither.CS_TeamKick_Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_TeamKick_Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_TeamKick_Req}
 */
proto.slither.CS_TeamKick_Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_TeamKick_Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_TeamKick_Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_TeamKick_Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamKick_Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 teamId = 1;
 * @return {number}
 */
proto.slither.CS_TeamKick_Req.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_TeamKick_Req.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_TeamKick_Req.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamKick_Req.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 userId = 2;
 * @return {number}
 */
proto.slither.CS_TeamKick_Req.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.CS_TeamKick_Req.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.CS_TeamKick_Req.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamKick_Req.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_TeamExit_Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_TeamExit_Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_TeamExit_Req.displayName = 'proto.slither.CS_TeamExit_Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_TeamExit_Req.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_TeamExit_Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_TeamExit_Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamExit_Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getField(msg, 1),
    userid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_TeamExit_Req}
 */
proto.slither.CS_TeamExit_Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_TeamExit_Req;
  return proto.slither.CS_TeamExit_Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_TeamExit_Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_TeamExit_Req}
 */
proto.slither.CS_TeamExit_Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_TeamExit_Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_TeamExit_Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_TeamExit_Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamExit_Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 teamId = 1;
 * @return {number}
 */
proto.slither.CS_TeamExit_Req.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_TeamExit_Req.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_TeamExit_Req.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamExit_Req.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 userId = 2;
 * @return {number}
 */
proto.slither.CS_TeamExit_Req.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.CS_TeamExit_Req.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.CS_TeamExit_Req.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamExit_Req.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_TeamMatch_Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_TeamMatch_Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_TeamMatch_Req.displayName = 'proto.slither.CS_TeamMatch_Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_TeamMatch_Req.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_TeamMatch_Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_TeamMatch_Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamMatch_Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_TeamMatch_Req}
 */
proto.slither.CS_TeamMatch_Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_TeamMatch_Req;
  return proto.slither.CS_TeamMatch_Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_TeamMatch_Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_TeamMatch_Req}
 */
proto.slither.CS_TeamMatch_Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_TeamMatch_Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_TeamMatch_Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_TeamMatch_Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamMatch_Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 teamId = 1;
 * @return {number}
 */
proto.slither.CS_TeamMatch_Req.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_TeamMatch_Req.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_TeamMatch_Req.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamMatch_Req.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_TeamMatchCancel_Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_TeamMatchCancel_Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_TeamMatchCancel_Req.displayName = 'proto.slither.CS_TeamMatchCancel_Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_TeamMatchCancel_Req.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_TeamMatchCancel_Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_TeamMatchCancel_Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamMatchCancel_Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_TeamMatchCancel_Req}
 */
proto.slither.CS_TeamMatchCancel_Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_TeamMatchCancel_Req;
  return proto.slither.CS_TeamMatchCancel_Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_TeamMatchCancel_Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_TeamMatchCancel_Req}
 */
proto.slither.CS_TeamMatchCancel_Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_TeamMatchCancel_Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_TeamMatchCancel_Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_TeamMatchCancel_Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamMatchCancel_Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 teamId = 1;
 * @return {number}
 */
proto.slither.CS_TeamMatchCancel_Req.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_TeamMatchCancel_Req.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_TeamMatchCancel_Req.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamMatchCancel_Req.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_TeamStart_Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_TeamStart_Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_TeamStart_Req.displayName = 'proto.slither.CS_TeamStart_Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_TeamStart_Req.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_TeamStart_Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_TeamStart_Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamStart_Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_TeamStart_Req}
 */
proto.slither.CS_TeamStart_Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_TeamStart_Req;
  return proto.slither.CS_TeamStart_Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_TeamStart_Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_TeamStart_Req}
 */
proto.slither.CS_TeamStart_Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_TeamStart_Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_TeamStart_Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_TeamStart_Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_TeamStart_Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 teamId = 1;
 * @return {number}
 */
proto.slither.CS_TeamStart_Req.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_TeamStart_Req.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_TeamStart_Req.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_TeamStart_Req.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_TeamCreate_Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_TeamCreate_Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_TeamCreate_Res.displayName = 'proto.slither.SC_TeamCreate_Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_TeamCreate_Res.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_TeamCreate_Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_TeamCreate_Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamCreate_Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1),
    teamid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_TeamCreate_Res}
 */
proto.slither.SC_TeamCreate_Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_TeamCreate_Res;
  return proto.slither.SC_TeamCreate_Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_TeamCreate_Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_TeamCreate_Res}
 */
proto.slither.SC_TeamCreate_Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_TeamCreate_Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_TeamCreate_Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_TeamCreate_Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamCreate_Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 rcode = 1;
 * @return {number}
 */
proto.slither.SC_TeamCreate_Res.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_TeamCreate_Res.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_TeamCreate_Res.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamCreate_Res.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 teamId = 2;
 * @return {number}
 */
proto.slither.SC_TeamCreate_Res.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.SC_TeamCreate_Res.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.SC_TeamCreate_Res.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamCreate_Res.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_TeamDestory_Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_TeamDestory_Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_TeamDestory_Res.displayName = 'proto.slither.SC_TeamDestory_Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_TeamDestory_Res.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_TeamDestory_Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_TeamDestory_Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamDestory_Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_TeamDestory_Res}
 */
proto.slither.SC_TeamDestory_Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_TeamDestory_Res;
  return proto.slither.SC_TeamDestory_Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_TeamDestory_Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_TeamDestory_Res}
 */
proto.slither.SC_TeamDestory_Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_TeamDestory_Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_TeamDestory_Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_TeamDestory_Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamDestory_Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 rcode = 1;
 * @return {number}
 */
proto.slither.SC_TeamDestory_Res.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_TeamDestory_Res.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_TeamDestory_Res.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamDestory_Res.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_TeamDestory_NTF = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_TeamDestory_NTF, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_TeamDestory_NTF.displayName = 'proto.slither.SC_TeamDestory_NTF';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_TeamDestory_NTF.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_TeamDestory_NTF.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_TeamDestory_NTF} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamDestory_NTF.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_TeamDestory_NTF}
 */
proto.slither.SC_TeamDestory_NTF.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_TeamDestory_NTF;
  return proto.slither.SC_TeamDestory_NTF.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_TeamDestory_NTF} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_TeamDestory_NTF}
 */
proto.slither.SC_TeamDestory_NTF.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_TeamDestory_NTF.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_TeamDestory_NTF.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_TeamDestory_NTF} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamDestory_NTF.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_TeamInvite_Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_TeamInvite_Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_TeamInvite_Res.displayName = 'proto.slither.SC_TeamInvite_Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_TeamInvite_Res.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_TeamInvite_Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_TeamInvite_Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamInvite_Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_TeamInvite_Res}
 */
proto.slither.SC_TeamInvite_Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_TeamInvite_Res;
  return proto.slither.SC_TeamInvite_Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_TeamInvite_Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_TeamInvite_Res}
 */
proto.slither.SC_TeamInvite_Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_TeamInvite_Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_TeamInvite_Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_TeamInvite_Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamInvite_Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 rcode = 1;
 * @return {number}
 */
proto.slither.SC_TeamInvite_Res.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_TeamInvite_Res.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_TeamInvite_Res.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamInvite_Res.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_TeamInvite_NTF = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_TeamInvite_NTF, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_TeamInvite_NTF.displayName = 'proto.slither.SC_TeamInvite_NTF';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_TeamInvite_NTF.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_TeamInvite_NTF.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_TeamInvite_NTF} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamInvite_NTF.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getField(msg, 1),
    userid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_TeamInvite_NTF}
 */
proto.slither.SC_TeamInvite_NTF.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_TeamInvite_NTF;
  return proto.slither.SC_TeamInvite_NTF.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_TeamInvite_NTF} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_TeamInvite_NTF}
 */
proto.slither.SC_TeamInvite_NTF.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_TeamInvite_NTF.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_TeamInvite_NTF.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_TeamInvite_NTF} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamInvite_NTF.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 teamId = 1;
 * @return {number}
 */
proto.slither.SC_TeamInvite_NTF.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_TeamInvite_NTF.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_TeamInvite_NTF.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamInvite_NTF.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 userId = 2;
 * @return {number}
 */
proto.slither.SC_TeamInvite_NTF.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.SC_TeamInvite_NTF.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.SC_TeamInvite_NTF.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamInvite_NTF.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_TeamInvite_Accept_Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.slither.SC_TeamInvite_Accept_Res.repeatedFields_, null);
};
goog.inherits(proto.slither.SC_TeamInvite_Accept_Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_TeamInvite_Accept_Res.displayName = 'proto.slither.SC_TeamInvite_Accept_Res';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.slither.SC_TeamInvite_Accept_Res.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_TeamInvite_Accept_Res.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_TeamInvite_Accept_Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_TeamInvite_Accept_Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamInvite_Accept_Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1),
    hosterid: jspb.Message.getField(msg, 2),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.slither.SC_TeamMemInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_TeamInvite_Accept_Res}
 */
proto.slither.SC_TeamInvite_Accept_Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_TeamInvite_Accept_Res;
  return proto.slither.SC_TeamInvite_Accept_Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_TeamInvite_Accept_Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_TeamInvite_Accept_Res}
 */
proto.slither.SC_TeamInvite_Accept_Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHosterid(value);
      break;
    case 3:
      var value = new proto.slither.SC_TeamMemInfo;
      reader.readMessage(value,proto.slither.SC_TeamMemInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_TeamInvite_Accept_Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_TeamInvite_Accept_Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_TeamInvite_Accept_Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamInvite_Accept_Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.slither.SC_TeamMemInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 rcode = 1;
 * @return {number}
 */
proto.slither.SC_TeamInvite_Accept_Res.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_TeamInvite_Accept_Res.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_TeamInvite_Accept_Res.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamInvite_Accept_Res.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 HosterId = 2;
 * @return {number}
 */
proto.slither.SC_TeamInvite_Accept_Res.prototype.getHosterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.SC_TeamInvite_Accept_Res.prototype.setHosterid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.SC_TeamInvite_Accept_Res.prototype.clearHosterid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamInvite_Accept_Res.prototype.hasHosterid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated SC_TeamMemInfo infos = 3;
 * @return {!Array<!proto.slither.SC_TeamMemInfo>}
 */
proto.slither.SC_TeamInvite_Accept_Res.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.slither.SC_TeamMemInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.slither.SC_TeamMemInfo, 3));
};


/** @param {!Array<!proto.slither.SC_TeamMemInfo>} value */
proto.slither.SC_TeamInvite_Accept_Res.prototype.setInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.slither.SC_TeamMemInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.slither.SC_TeamMemInfo}
 */
proto.slither.SC_TeamInvite_Accept_Res.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.slither.SC_TeamMemInfo, opt_index);
};


proto.slither.SC_TeamInvite_Accept_Res.prototype.clearInfosList = function() {
  this.setInfosList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_TeamInvite_Accept_NTF = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_TeamInvite_Accept_NTF, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_TeamInvite_Accept_NTF.displayName = 'proto.slither.SC_TeamInvite_Accept_NTF';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_TeamInvite_Accept_NTF.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_TeamInvite_Accept_NTF.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_TeamInvite_Accept_NTF} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamInvite_Accept_NTF.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getField(msg, 1),
    info: (f = msg.getInfo()) && proto.slither.SC_TeamMemInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_TeamInvite_Accept_NTF}
 */
proto.slither.SC_TeamInvite_Accept_NTF.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_TeamInvite_Accept_NTF;
  return proto.slither.SC_TeamInvite_Accept_NTF.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_TeamInvite_Accept_NTF} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_TeamInvite_Accept_NTF}
 */
proto.slither.SC_TeamInvite_Accept_NTF.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    case 2:
      var value = new proto.slither.SC_TeamMemInfo;
      reader.readMessage(value,proto.slither.SC_TeamMemInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_TeamInvite_Accept_NTF.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_TeamInvite_Accept_NTF.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_TeamInvite_Accept_NTF} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamInvite_Accept_NTF.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.slither.SC_TeamMemInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 teamId = 1;
 * @return {number}
 */
proto.slither.SC_TeamInvite_Accept_NTF.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_TeamInvite_Accept_NTF.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_TeamInvite_Accept_NTF.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamInvite_Accept_NTF.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required SC_TeamMemInfo info = 2;
 * @return {!proto.slither.SC_TeamMemInfo}
 */
proto.slither.SC_TeamInvite_Accept_NTF.prototype.getInfo = function() {
  return /** @type{!proto.slither.SC_TeamMemInfo} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamMemInfo, 2, 1));
};


/** @param {!proto.slither.SC_TeamMemInfo} value */
proto.slither.SC_TeamInvite_Accept_NTF.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.slither.SC_TeamInvite_Accept_NTF.prototype.clearInfo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamInvite_Accept_NTF.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_TeamInvite_Reject_NTF = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_TeamInvite_Reject_NTF, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_TeamInvite_Reject_NTF.displayName = 'proto.slither.SC_TeamInvite_Reject_NTF';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_TeamInvite_Reject_NTF.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_TeamInvite_Reject_NTF.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_TeamInvite_Reject_NTF} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamInvite_Reject_NTF.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getField(msg, 1),
    userid: jspb.Message.getField(msg, 2),
    selfid: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_TeamInvite_Reject_NTF}
 */
proto.slither.SC_TeamInvite_Reject_NTF.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_TeamInvite_Reject_NTF;
  return proto.slither.SC_TeamInvite_Reject_NTF.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_TeamInvite_Reject_NTF} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_TeamInvite_Reject_NTF}
 */
proto.slither.SC_TeamInvite_Reject_NTF.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSelfid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_TeamInvite_Reject_NTF.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_TeamInvite_Reject_NTF.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_TeamInvite_Reject_NTF} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamInvite_Reject_NTF.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 teamId = 1;
 * @return {number}
 */
proto.slither.SC_TeamInvite_Reject_NTF.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_TeamInvite_Reject_NTF.prototype.setTeamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_TeamInvite_Reject_NTF.prototype.clearTeamid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamInvite_Reject_NTF.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 userId = 2;
 * @return {number}
 */
proto.slither.SC_TeamInvite_Reject_NTF.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.SC_TeamInvite_Reject_NTF.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.SC_TeamInvite_Reject_NTF.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamInvite_Reject_NTF.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 selfId = 3;
 * @return {number}
 */
proto.slither.SC_TeamInvite_Reject_NTF.prototype.getSelfid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.slither.SC_TeamInvite_Reject_NTF.prototype.setSelfid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.slither.SC_TeamInvite_Reject_NTF.prototype.clearSelfid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamInvite_Reject_NTF.prototype.hasSelfid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_TeamQuickEnter_Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_TeamQuickEnter_Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_TeamQuickEnter_Res.displayName = 'proto.slither.SC_TeamQuickEnter_Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_TeamQuickEnter_Res.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_TeamQuickEnter_Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_TeamQuickEnter_Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamQuickEnter_Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcode: jspb.Message.getField(msg, 1),
    hosterid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_TeamQuickEnter_Res}
 */
proto.slither.SC_TeamQuickEnter_Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_TeamQuickEnter_Res;
  return proto.slither.SC_TeamQuickEnter_Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_TeamQuickEnter_Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_TeamQuickEnter_Res}
 */
proto.slither.SC_TeamQuickEnter_Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHosterid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_TeamQuickEnter_Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_TeamQuickEnter_Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_TeamQuickEnter_Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamQuickEnter_Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 rcode = 1;
 * @return {number}
 */
proto.slither.SC_TeamQuickEnter_Res.prototype.getRcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_TeamQuickEnter_Res.prototype.setRcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_TeamQuickEnter_Res.prototype.clearRcode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamQuickEnter_Res.prototype.hasRcode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 HosterId = 2;
 * @return {number}
 */
proto.slither.SC_TeamQuickEnter_Res.prototype.getHosterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.SC_TeamQuickEnter_Res.prototype.setHosterid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.SC_TeamQuickEnter_Res.prototype.clearHosterid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamQuickEnter_Res.prototype.hasHosterid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_TeamKick_NTF = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_TeamKick_NTF, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_TeamKick_NTF.displayName = 'proto.slither.SC_TeamKick_NTF';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_TeamKick_NTF.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_TeamKick_NTF.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_TeamKick_NTF} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamKick_NTF.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_TeamKick_NTF}
 */
proto.slither.SC_TeamKick_NTF.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_TeamKick_NTF;
  return proto.slither.SC_TeamKick_NTF.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_TeamKick_NTF} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_TeamKick_NTF}
 */
proto.slither.SC_TeamKick_NTF.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_TeamKick_NTF.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_TeamKick_NTF.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_TeamKick_NTF} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamKick_NTF.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 userId = 1;
 * @return {number}
 */
proto.slither.SC_TeamKick_NTF.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_TeamKick_NTF.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_TeamKick_NTF.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamKick_NTF.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_TeamExit_NTF = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_TeamExit_NTF, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_TeamExit_NTF.displayName = 'proto.slither.SC_TeamExit_NTF';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_TeamExit_NTF.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_TeamExit_NTF.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_TeamExit_NTF} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamExit_NTF.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_TeamExit_NTF}
 */
proto.slither.SC_TeamExit_NTF.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_TeamExit_NTF;
  return proto.slither.SC_TeamExit_NTF.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_TeamExit_NTF} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_TeamExit_NTF}
 */
proto.slither.SC_TeamExit_NTF.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_TeamExit_NTF.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_TeamExit_NTF.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_TeamExit_NTF} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamExit_NTF.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 userId = 1;
 * @return {number}
 */
proto.slither.SC_TeamExit_NTF.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_TeamExit_NTF.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_TeamExit_NTF.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamExit_NTF.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_TeamMatch_NTF = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_TeamMatch_NTF, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_TeamMatch_NTF.displayName = 'proto.slither.SC_TeamMatch_NTF';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_TeamMatch_NTF.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_TeamMatch_NTF.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_TeamMatch_NTF} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamMatch_NTF.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_TeamMatch_NTF}
 */
proto.slither.SC_TeamMatch_NTF.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_TeamMatch_NTF;
  return proto.slither.SC_TeamMatch_NTF.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_TeamMatch_NTF} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_TeamMatch_NTF}
 */
proto.slither.SC_TeamMatch_NTF.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_TeamMatch_NTF.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_TeamMatch_NTF.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_TeamMatch_NTF} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_TeamMatch_NTF.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 time = 1;
 * @return {number}
 */
proto.slither.SC_TeamMatch_NTF.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_TeamMatch_NTF.prototype.setTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_TeamMatch_NTF.prototype.clearTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_TeamMatch_NTF.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_FrameInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.slither.SC_FrameInfo.repeatedFields_, null);
};
goog.inherits(proto.slither.SC_FrameInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_FrameInfo.displayName = 'proto.slither.SC_FrameInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.slither.SC_FrameInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_FrameInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_FrameInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_FrameInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_FrameInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.getRepeatedField(msg, 1),
    lastangle: +jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_FrameInfo}
 */
proto.slither.SC_FrameInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_FrameInfo;
  return proto.slither.SC_FrameInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_FrameInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_FrameInfo}
 */
proto.slither.SC_FrameInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addInfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLastangle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_FrameInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_FrameInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_FrameInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_FrameInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * repeated int32 info = 1;
 * @return {!Array<number>}
 */
proto.slither.SC_FrameInfo.prototype.getInfoList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.slither.SC_FrameInfo.prototype.setInfoList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.slither.SC_FrameInfo.prototype.addInfo = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.slither.SC_FrameInfo.prototype.clearInfoList = function() {
  this.setInfoList([]);
};


/**
 * required float lastAngle = 2;
 * @return {number}
 */
proto.slither.SC_FrameInfo.prototype.getLastangle = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.slither.SC_FrameInfo.prototype.setLastangle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.SC_FrameInfo.prototype.clearLastangle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_FrameInfo.prototype.hasLastangle = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_DeadInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_DeadInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_DeadInfo.displayName = 'proto.slither.SC_DeadInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_DeadInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_DeadInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_DeadInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_DeadInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    attacker: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_DeadInfo}
 */
proto.slither.SC_DeadInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_DeadInfo;
  return proto.slither.SC_DeadInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_DeadInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_DeadInfo}
 */
proto.slither.SC_DeadInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttacker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_DeadInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_DeadInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_DeadInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_DeadInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 id = 1;
 * @return {number}
 */
proto.slither.SC_DeadInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_DeadInfo.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_DeadInfo.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_DeadInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 attacker = 2;
 * @return {number}
 */
proto.slither.SC_DeadInfo.prototype.getAttacker = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.SC_DeadInfo.prototype.setAttacker = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.SC_DeadInfo.prototype.clearAttacker = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_DeadInfo.prototype.hasAttacker = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_FrameInfos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.slither.SC_FrameInfos.repeatedFields_, null);
};
goog.inherits(proto.slither.SC_FrameInfos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_FrameInfos.displayName = 'proto.slither.SC_FrameInfos';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.slither.SC_FrameInfos.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_FrameInfos.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_FrameInfos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_FrameInfos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_FrameInfos.toObject = function(includeInstance, msg) {
  var f, obj = {
    frameid: jspb.Message.getField(msg, 1),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.slither.SC_FrameInfo.toObject, includeInstance),
    deadinfosList: jspb.Message.toObjectList(msg.getDeadinfosList(),
    proto.slither.SC_DeadInfo.toObject, includeInstance),
    frametime: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_FrameInfos}
 */
proto.slither.SC_FrameInfos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_FrameInfos;
  return proto.slither.SC_FrameInfos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_FrameInfos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_FrameInfos}
 */
proto.slither.SC_FrameInfos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrameid(value);
      break;
    case 2:
      var value = new proto.slither.SC_FrameInfo;
      reader.readMessage(value,proto.slither.SC_FrameInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    case 3:
      var value = new proto.slither.SC_DeadInfo;
      reader.readMessage(value,proto.slither.SC_DeadInfo.deserializeBinaryFromReader);
      msg.addDeadinfos(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setFrametime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_FrameInfos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_FrameInfos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_FrameInfos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_FrameInfos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.slither.SC_FrameInfo.serializeBinaryToWriter
    );
  }
  f = message.getDeadinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.slither.SC_DeadInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFixed64(
      6,
      f
    );
  }
};


/**
 * required int32 frameid = 1;
 * @return {number}
 */
proto.slither.SC_FrameInfos.prototype.getFrameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_FrameInfos.prototype.setFrameid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_FrameInfos.prototype.clearFrameid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_FrameInfos.prototype.hasFrameid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SC_FrameInfo infos = 2;
 * @return {!Array<!proto.slither.SC_FrameInfo>}
 */
proto.slither.SC_FrameInfos.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.slither.SC_FrameInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.slither.SC_FrameInfo, 2));
};


/** @param {!Array<!proto.slither.SC_FrameInfo>} value */
proto.slither.SC_FrameInfos.prototype.setInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.slither.SC_FrameInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.slither.SC_FrameInfo}
 */
proto.slither.SC_FrameInfos.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.slither.SC_FrameInfo, opt_index);
};


proto.slither.SC_FrameInfos.prototype.clearInfosList = function() {
  this.setInfosList([]);
};


/**
 * repeated SC_DeadInfo deadInfos = 3;
 * @return {!Array<!proto.slither.SC_DeadInfo>}
 */
proto.slither.SC_FrameInfos.prototype.getDeadinfosList = function() {
  return /** @type{!Array<!proto.slither.SC_DeadInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.slither.SC_DeadInfo, 3));
};


/** @param {!Array<!proto.slither.SC_DeadInfo>} value */
proto.slither.SC_FrameInfos.prototype.setDeadinfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.slither.SC_DeadInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.slither.SC_DeadInfo}
 */
proto.slither.SC_FrameInfos.prototype.addDeadinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.slither.SC_DeadInfo, opt_index);
};


proto.slither.SC_FrameInfos.prototype.clearDeadinfosList = function() {
  this.setDeadinfosList([]);
};


/**
 * optional fixed64 frameTime = 6;
 * @return {number}
 */
proto.slither.SC_FrameInfos.prototype.getFrametime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.slither.SC_FrameInfos.prototype.setFrametime = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.slither.SC_FrameInfos.prototype.clearFrametime = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_FrameInfos.prototype.hasFrametime = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_FlyGoodsInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_FlyGoodsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_FlyGoodsInfo.displayName = 'proto.slither.SC_FlyGoodsInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_FlyGoodsInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_FlyGoodsInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_FlyGoodsInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_FlyGoodsInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    x: jspb.Message.getField(msg, 3),
    y: jspb.Message.getField(msg, 4),
    angle: +jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_FlyGoodsInfo}
 */
proto.slither.SC_FlyGoodsInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_FlyGoodsInfo;
  return proto.slither.SC_FlyGoodsInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_FlyGoodsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_FlyGoodsInfo}
 */
proto.slither.SC_FlyGoodsInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_FlyGoodsInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_FlyGoodsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_FlyGoodsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_FlyGoodsInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * required int32 id = 1;
 * @return {number}
 */
proto.slither.SC_FlyGoodsInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_FlyGoodsInfo.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_FlyGoodsInfo.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_FlyGoodsInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 type = 2;
 * @return {number}
 */
proto.slither.SC_FlyGoodsInfo.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.SC_FlyGoodsInfo.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.SC_FlyGoodsInfo.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_FlyGoodsInfo.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 x = 3;
 * @return {number}
 */
proto.slither.SC_FlyGoodsInfo.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.slither.SC_FlyGoodsInfo.prototype.setX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.slither.SC_FlyGoodsInfo.prototype.clearX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_FlyGoodsInfo.prototype.hasX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 y = 4;
 * @return {number}
 */
proto.slither.SC_FlyGoodsInfo.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.slither.SC_FlyGoodsInfo.prototype.setY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.slither.SC_FlyGoodsInfo.prototype.clearY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_FlyGoodsInfo.prototype.hasY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required float angle = 5;
 * @return {number}
 */
proto.slither.SC_FlyGoodsInfo.prototype.getAngle = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.slither.SC_FlyGoodsInfo.prototype.setAngle = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.slither.SC_FlyGoodsInfo.prototype.clearAngle = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_FlyGoodsInfo.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_FlyGoodsInfos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.slither.SC_FlyGoodsInfos.repeatedFields_, null);
};
goog.inherits(proto.slither.SC_FlyGoodsInfos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_FlyGoodsInfos.displayName = 'proto.slither.SC_FlyGoodsInfos';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.slither.SC_FlyGoodsInfos.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_FlyGoodsInfos.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_FlyGoodsInfos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_FlyGoodsInfos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_FlyGoodsInfos.toObject = function(includeInstance, msg) {
  var f, obj = {
    frameid: jspb.Message.getField(msg, 1),
    speed: jspb.Message.getField(msg, 2),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.slither.SC_FlyGoodsInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_FlyGoodsInfos}
 */
proto.slither.SC_FlyGoodsInfos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_FlyGoodsInfos;
  return proto.slither.SC_FlyGoodsInfos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_FlyGoodsInfos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_FlyGoodsInfos}
 */
proto.slither.SC_FlyGoodsInfos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrameid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpeed(value);
      break;
    case 3:
      var value = new proto.slither.SC_FlyGoodsInfo;
      reader.readMessage(value,proto.slither.SC_FlyGoodsInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_FlyGoodsInfos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_FlyGoodsInfos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_FlyGoodsInfos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_FlyGoodsInfos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.slither.SC_FlyGoodsInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 frameid = 1;
 * @return {number}
 */
proto.slither.SC_FlyGoodsInfos.prototype.getFrameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_FlyGoodsInfos.prototype.setFrameid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_FlyGoodsInfos.prototype.clearFrameid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_FlyGoodsInfos.prototype.hasFrameid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 speed = 2;
 * @return {number}
 */
proto.slither.SC_FlyGoodsInfos.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.SC_FlyGoodsInfos.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.SC_FlyGoodsInfos.prototype.clearSpeed = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_FlyGoodsInfos.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated SC_FlyGoodsInfo infos = 3;
 * @return {!Array<!proto.slither.SC_FlyGoodsInfo>}
 */
proto.slither.SC_FlyGoodsInfos.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.slither.SC_FlyGoodsInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.slither.SC_FlyGoodsInfo, 3));
};


/** @param {!Array<!proto.slither.SC_FlyGoodsInfo>} value */
proto.slither.SC_FlyGoodsInfos.prototype.setInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.slither.SC_FlyGoodsInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.slither.SC_FlyGoodsInfo}
 */
proto.slither.SC_FlyGoodsInfos.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.slither.SC_FlyGoodsInfo, opt_index);
};


proto.slither.SC_FlyGoodsInfos.prototype.clearInfosList = function() {
  this.setInfosList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_DeadNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_DeadNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_DeadNtf.displayName = 'proto.slither.SC_DeadNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_DeadNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_DeadNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_DeadNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_DeadNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    dead: jspb.Message.getField(msg, 3),
    attacker: jspb.Message.getField(msg, 4),
    score: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_DeadNtf}
 */
proto.slither.SC_DeadNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_DeadNtf;
  return proto.slither.SC_DeadNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_DeadNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_DeadNtf}
 */
proto.slither.SC_DeadNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDead(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttacker(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_DeadNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_DeadNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_DeadNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_DeadNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required int32 id = 1;
 * @return {number}
 */
proto.slither.SC_DeadNtf.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_DeadNtf.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_DeadNtf.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_DeadNtf.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.slither.SC_DeadNtf.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.slither.SC_DeadNtf.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.SC_DeadNtf.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_DeadNtf.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 dead = 3;
 * @return {number}
 */
proto.slither.SC_DeadNtf.prototype.getDead = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.slither.SC_DeadNtf.prototype.setDead = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.slither.SC_DeadNtf.prototype.clearDead = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_DeadNtf.prototype.hasDead = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 attacker = 4;
 * @return {number}
 */
proto.slither.SC_DeadNtf.prototype.getAttacker = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.slither.SC_DeadNtf.prototype.setAttacker = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.slither.SC_DeadNtf.prototype.clearAttacker = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_DeadNtf.prototype.hasAttacker = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 score = 5;
 * @return {number}
 */
proto.slither.SC_DeadNtf.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.slither.SC_DeadNtf.prototype.setScore = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.slither.SC_DeadNtf.prototype.clearScore = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_DeadNtf.prototype.hasScore = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_Eat_Food_Ntf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.slither.SC_Eat_Food_Ntf.repeatedFields_, null);
};
goog.inherits(proto.slither.SC_Eat_Food_Ntf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_Eat_Food_Ntf.displayName = 'proto.slither.SC_Eat_Food_Ntf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.slither.SC_Eat_Food_Ntf.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_Eat_Food_Ntf.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_Eat_Food_Ntf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_Eat_Food_Ntf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_Eat_Food_Ntf.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    foodtypeList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_Eat_Food_Ntf}
 */
proto.slither.SC_Eat_Food_Ntf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_Eat_Food_Ntf;
  return proto.slither.SC_Eat_Food_Ntf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_Eat_Food_Ntf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_Eat_Food_Ntf}
 */
proto.slither.SC_Eat_Food_Ntf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setFoodtypeList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_Eat_Food_Ntf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_Eat_Food_Ntf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_Eat_Food_Ntf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_Eat_Food_Ntf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFoodtypeList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * required int32 id = 1;
 * @return {number}
 */
proto.slither.SC_Eat_Food_Ntf.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_Eat_Food_Ntf.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_Eat_Food_Ntf.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Eat_Food_Ntf.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 foodtype = 2;
 * @return {!Array<number>}
 */
proto.slither.SC_Eat_Food_Ntf.prototype.getFoodtypeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.slither.SC_Eat_Food_Ntf.prototype.setFoodtypeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.slither.SC_Eat_Food_Ntf.prototype.addFoodtype = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.slither.SC_Eat_Food_Ntf.prototype.clearFoodtypeList = function() {
  this.setFoodtypeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_SessionNtf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_SessionNtf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_SessionNtf.displayName = 'proto.slither.SC_SessionNtf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_SessionNtf.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_SessionNtf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_SessionNtf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_SessionNtf.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    roomid: jspb.Message.getField(msg, 2),
    ip: jspb.Message.getField(msg, 3),
    port: jspb.Message.getField(msg, 4),
    time: jspb.Message.getField(msg, 5),
    countdown: jspb.Message.getField(msg, 6),
    speed1: jspb.Message.getOptionalFloatingPointField(msg, 7),
    speed2: jspb.Message.getOptionalFloatingPointField(msg, 8),
    turnspeed1: jspb.Message.getOptionalFloatingPointField(msg, 9),
    turnspeed2: jspb.Message.getOptionalFloatingPointField(msg, 10),
    formula1: jspb.Message.getField(msg, 11),
    formula2: jspb.Message.getField(msg, 12),
    formula3: jspb.Message.getField(msg, 13),
    conv: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_SessionNtf}
 */
proto.slither.SC_SessionNtf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_SessionNtf;
  return proto.slither.SC_SessionNtf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_SessionNtf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_SessionNtf}
 */
proto.slither.SC_SessionNtf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCountdown(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed1(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed2(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTurnspeed1(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTurnspeed2(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormula1(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormula2(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormula3(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_SessionNtf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_SessionNtf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_SessionNtf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_SessionNtf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
};


/**
 * required int32 uid = 1;
 * @return {number}
 */
proto.slither.SC_SessionNtf.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_SessionNtf.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_SessionNtf.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 roomid = 2;
 * @return {number}
 */
proto.slither.SC_SessionNtf.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.slither.SC_SessionNtf.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.slither.SC_SessionNtf.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string ip = 3;
 * @return {string}
 */
proto.slither.SC_SessionNtf.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.slither.SC_SessionNtf.prototype.setIp = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.slither.SC_SessionNtf.prototype.clearIp = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasIp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 port = 4;
 * @return {number}
 */
proto.slither.SC_SessionNtf.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.slither.SC_SessionNtf.prototype.setPort = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.slither.SC_SessionNtf.prototype.clearPort = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasPort = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 time = 5;
 * @return {number}
 */
proto.slither.SC_SessionNtf.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.slither.SC_SessionNtf.prototype.setTime = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.slither.SC_SessionNtf.prototype.clearTime = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 countdown = 6;
 * @return {number}
 */
proto.slither.SC_SessionNtf.prototype.getCountdown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.slither.SC_SessionNtf.prototype.setCountdown = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.slither.SC_SessionNtf.prototype.clearCountdown = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasCountdown = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double speed1 = 7;
 * @return {number}
 */
proto.slither.SC_SessionNtf.prototype.getSpeed1 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.slither.SC_SessionNtf.prototype.setSpeed1 = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.slither.SC_SessionNtf.prototype.clearSpeed1 = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasSpeed1 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double speed2 = 8;
 * @return {number}
 */
proto.slither.SC_SessionNtf.prototype.getSpeed2 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.slither.SC_SessionNtf.prototype.setSpeed2 = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.slither.SC_SessionNtf.prototype.clearSpeed2 = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasSpeed2 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double turnspeed1 = 9;
 * @return {number}
 */
proto.slither.SC_SessionNtf.prototype.getTurnspeed1 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.slither.SC_SessionNtf.prototype.setTurnspeed1 = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.slither.SC_SessionNtf.prototype.clearTurnspeed1 = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasTurnspeed1 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double turnspeed2 = 10;
 * @return {number}
 */
proto.slither.SC_SessionNtf.prototype.getTurnspeed2 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.slither.SC_SessionNtf.prototype.setTurnspeed2 = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.slither.SC_SessionNtf.prototype.clearTurnspeed2 = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasTurnspeed2 = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string formula1 = 11;
 * @return {string}
 */
proto.slither.SC_SessionNtf.prototype.getFormula1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.slither.SC_SessionNtf.prototype.setFormula1 = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.slither.SC_SessionNtf.prototype.clearFormula1 = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasFormula1 = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string formula2 = 12;
 * @return {string}
 */
proto.slither.SC_SessionNtf.prototype.getFormula2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.slither.SC_SessionNtf.prototype.setFormula2 = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.slither.SC_SessionNtf.prototype.clearFormula2 = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasFormula2 = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string formula3 = 13;
 * @return {string}
 */
proto.slither.SC_SessionNtf.prototype.getFormula3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.slither.SC_SessionNtf.prototype.setFormula3 = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.slither.SC_SessionNtf.prototype.clearFormula3 = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasFormula3 = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 conv = 14;
 * @return {number}
 */
proto.slither.SC_SessionNtf.prototype.getConv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.slither.SC_SessionNtf.prototype.setConv = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.slither.SC_SessionNtf.prototype.clearConv = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_SessionNtf.prototype.hasConv = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.CS_Snake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.CS_Snake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.CS_Snake.displayName = 'proto.slither.CS_Snake';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.CS_Snake.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.CS_Snake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.CS_Snake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_Snake.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmdid: jspb.Message.getField(msg, 1),
    teamcreate: (f = msg.getTeamcreate()) && proto.slither.CS_TeamCreate_Req.toObject(includeInstance, f),
    teamdestory: (f = msg.getTeamdestory()) && proto.slither.CS_TeamDestory_Req.toObject(includeInstance, f),
    teaminvite: (f = msg.getTeaminvite()) && proto.slither.CS_TeamInvite_Req.toObject(includeInstance, f),
    teaminviteaccept: (f = msg.getTeaminviteaccept()) && proto.slither.CS_TeamInvite_Accept_Req.toObject(includeInstance, f),
    teaminvitereject: (f = msg.getTeaminvitereject()) && proto.slither.CS_TeamInvite_Reject_Req.toObject(includeInstance, f),
    teamkick: (f = msg.getTeamkick()) && proto.slither.CS_TeamKick_Req.toObject(includeInstance, f),
    teamexit: (f = msg.getTeamexit()) && proto.slither.CS_TeamExit_Req.toObject(includeInstance, f),
    teammatch: (f = msg.getTeammatch()) && proto.slither.CS_TeamMatch_Req.toObject(includeInstance, f),
    teamstart: (f = msg.getTeamstart()) && proto.slither.CS_TeamStart_Req.toObject(includeInstance, f),
    teamquickenterreq: (f = msg.getTeamquickenterreq()) && proto.slither.CS_TeamQuickEnter_Req.toObject(includeInstance, f),
    teammatchcancel: (f = msg.getTeammatchcancel()) && proto.slither.CS_TeamMatchCancel_Req.toObject(includeInstance, f),
    adjusttimereq: (f = msg.getAdjusttimereq()) && proto.slither.CS_AdjustTime_Req.toObject(includeInstance, f),
    adjusttimereqex: (f = msg.getAdjusttimereqex()) && proto.slither.CS_AdjustTime_ReqEX.toObject(includeInstance, f),
    sessionrestart: (f = msg.getSessionrestart()) && proto.slither.CS_SessionRestart.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.CS_Snake}
 */
proto.slither.CS_Snake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.CS_Snake;
  return proto.slither.CS_Snake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.CS_Snake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.CS_Snake}
 */
proto.slither.CS_Snake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCmdid(value);
      break;
    case 2:
      var value = new proto.slither.CS_TeamCreate_Req;
      reader.readMessage(value,proto.slither.CS_TeamCreate_Req.deserializeBinaryFromReader);
      msg.setTeamcreate(value);
      break;
    case 3:
      var value = new proto.slither.CS_TeamDestory_Req;
      reader.readMessage(value,proto.slither.CS_TeamDestory_Req.deserializeBinaryFromReader);
      msg.setTeamdestory(value);
      break;
    case 4:
      var value = new proto.slither.CS_TeamInvite_Req;
      reader.readMessage(value,proto.slither.CS_TeamInvite_Req.deserializeBinaryFromReader);
      msg.setTeaminvite(value);
      break;
    case 5:
      var value = new proto.slither.CS_TeamInvite_Accept_Req;
      reader.readMessage(value,proto.slither.CS_TeamInvite_Accept_Req.deserializeBinaryFromReader);
      msg.setTeaminviteaccept(value);
      break;
    case 6:
      var value = new proto.slither.CS_TeamInvite_Reject_Req;
      reader.readMessage(value,proto.slither.CS_TeamInvite_Reject_Req.deserializeBinaryFromReader);
      msg.setTeaminvitereject(value);
      break;
    case 7:
      var value = new proto.slither.CS_TeamKick_Req;
      reader.readMessage(value,proto.slither.CS_TeamKick_Req.deserializeBinaryFromReader);
      msg.setTeamkick(value);
      break;
    case 8:
      var value = new proto.slither.CS_TeamExit_Req;
      reader.readMessage(value,proto.slither.CS_TeamExit_Req.deserializeBinaryFromReader);
      msg.setTeamexit(value);
      break;
    case 9:
      var value = new proto.slither.CS_TeamMatch_Req;
      reader.readMessage(value,proto.slither.CS_TeamMatch_Req.deserializeBinaryFromReader);
      msg.setTeammatch(value);
      break;
    case 10:
      var value = new proto.slither.CS_TeamStart_Req;
      reader.readMessage(value,proto.slither.CS_TeamStart_Req.deserializeBinaryFromReader);
      msg.setTeamstart(value);
      break;
    case 11:
      var value = new proto.slither.CS_TeamQuickEnter_Req;
      reader.readMessage(value,proto.slither.CS_TeamQuickEnter_Req.deserializeBinaryFromReader);
      msg.setTeamquickenterreq(value);
      break;
    case 12:
      var value = new proto.slither.CS_TeamMatchCancel_Req;
      reader.readMessage(value,proto.slither.CS_TeamMatchCancel_Req.deserializeBinaryFromReader);
      msg.setTeammatchcancel(value);
      break;
    case 31:
      var value = new proto.slither.CS_AdjustTime_Req;
      reader.readMessage(value,proto.slither.CS_AdjustTime_Req.deserializeBinaryFromReader);
      msg.setAdjusttimereq(value);
      break;
    case 32:
      var value = new proto.slither.CS_AdjustTime_ReqEX;
      reader.readMessage(value,proto.slither.CS_AdjustTime_ReqEX.deserializeBinaryFromReader);
      msg.setAdjusttimereqex(value);
      break;
    case 33:
      var value = new proto.slither.CS_SessionRestart;
      reader.readMessage(value,proto.slither.CS_SessionRestart.deserializeBinaryFromReader);
      msg.setSessionrestart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.CS_Snake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.CS_Snake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.CS_Snake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.CS_Snake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTeamcreate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.slither.CS_TeamCreate_Req.serializeBinaryToWriter
    );
  }
  f = message.getTeamdestory();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.slither.CS_TeamDestory_Req.serializeBinaryToWriter
    );
  }
  f = message.getTeaminvite();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.slither.CS_TeamInvite_Req.serializeBinaryToWriter
    );
  }
  f = message.getTeaminviteaccept();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.slither.CS_TeamInvite_Accept_Req.serializeBinaryToWriter
    );
  }
  f = message.getTeaminvitereject();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.slither.CS_TeamInvite_Reject_Req.serializeBinaryToWriter
    );
  }
  f = message.getTeamkick();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.slither.CS_TeamKick_Req.serializeBinaryToWriter
    );
  }
  f = message.getTeamexit();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.slither.CS_TeamExit_Req.serializeBinaryToWriter
    );
  }
  f = message.getTeammatch();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.slither.CS_TeamMatch_Req.serializeBinaryToWriter
    );
  }
  f = message.getTeamstart();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.slither.CS_TeamStart_Req.serializeBinaryToWriter
    );
  }
  f = message.getTeamquickenterreq();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.slither.CS_TeamQuickEnter_Req.serializeBinaryToWriter
    );
  }
  f = message.getTeammatchcancel();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.slither.CS_TeamMatchCancel_Req.serializeBinaryToWriter
    );
  }
  f = message.getAdjusttimereq();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.slither.CS_AdjustTime_Req.serializeBinaryToWriter
    );
  }
  f = message.getAdjusttimereqex();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.slither.CS_AdjustTime_ReqEX.serializeBinaryToWriter
    );
  }
  f = message.getSessionrestart();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.slither.CS_SessionRestart.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 cmdid = 1;
 * @return {number}
 */
proto.slither.CS_Snake.prototype.getCmdid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.CS_Snake.prototype.setCmdid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.CS_Snake.prototype.clearCmdid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasCmdid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CS_TeamCreate_Req teamCreate = 2;
 * @return {?proto.slither.CS_TeamCreate_Req}
 */
proto.slither.CS_Snake.prototype.getTeamcreate = function() {
  return /** @type{?proto.slither.CS_TeamCreate_Req} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_TeamCreate_Req, 2));
};


/** @param {?proto.slither.CS_TeamCreate_Req|undefined} value */
proto.slither.CS_Snake.prototype.setTeamcreate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.slither.CS_Snake.prototype.clearTeamcreate = function() {
  this.setTeamcreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasTeamcreate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CS_TeamDestory_Req teamDestory = 3;
 * @return {?proto.slither.CS_TeamDestory_Req}
 */
proto.slither.CS_Snake.prototype.getTeamdestory = function() {
  return /** @type{?proto.slither.CS_TeamDestory_Req} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_TeamDestory_Req, 3));
};


/** @param {?proto.slither.CS_TeamDestory_Req|undefined} value */
proto.slither.CS_Snake.prototype.setTeamdestory = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.slither.CS_Snake.prototype.clearTeamdestory = function() {
  this.setTeamdestory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasTeamdestory = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CS_TeamInvite_Req teamInvite = 4;
 * @return {?proto.slither.CS_TeamInvite_Req}
 */
proto.slither.CS_Snake.prototype.getTeaminvite = function() {
  return /** @type{?proto.slither.CS_TeamInvite_Req} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_TeamInvite_Req, 4));
};


/** @param {?proto.slither.CS_TeamInvite_Req|undefined} value */
proto.slither.CS_Snake.prototype.setTeaminvite = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.slither.CS_Snake.prototype.clearTeaminvite = function() {
  this.setTeaminvite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasTeaminvite = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CS_TeamInvite_Accept_Req teamInviteAccept = 5;
 * @return {?proto.slither.CS_TeamInvite_Accept_Req}
 */
proto.slither.CS_Snake.prototype.getTeaminviteaccept = function() {
  return /** @type{?proto.slither.CS_TeamInvite_Accept_Req} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_TeamInvite_Accept_Req, 5));
};


/** @param {?proto.slither.CS_TeamInvite_Accept_Req|undefined} value */
proto.slither.CS_Snake.prototype.setTeaminviteaccept = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.slither.CS_Snake.prototype.clearTeaminviteaccept = function() {
  this.setTeaminviteaccept(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasTeaminviteaccept = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CS_TeamInvite_Reject_Req teamInviteReject = 6;
 * @return {?proto.slither.CS_TeamInvite_Reject_Req}
 */
proto.slither.CS_Snake.prototype.getTeaminvitereject = function() {
  return /** @type{?proto.slither.CS_TeamInvite_Reject_Req} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_TeamInvite_Reject_Req, 6));
};


/** @param {?proto.slither.CS_TeamInvite_Reject_Req|undefined} value */
proto.slither.CS_Snake.prototype.setTeaminvitereject = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.slither.CS_Snake.prototype.clearTeaminvitereject = function() {
  this.setTeaminvitereject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasTeaminvitereject = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CS_TeamKick_Req teamKick = 7;
 * @return {?proto.slither.CS_TeamKick_Req}
 */
proto.slither.CS_Snake.prototype.getTeamkick = function() {
  return /** @type{?proto.slither.CS_TeamKick_Req} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_TeamKick_Req, 7));
};


/** @param {?proto.slither.CS_TeamKick_Req|undefined} value */
proto.slither.CS_Snake.prototype.setTeamkick = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.slither.CS_Snake.prototype.clearTeamkick = function() {
  this.setTeamkick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasTeamkick = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CS_TeamExit_Req teamExit = 8;
 * @return {?proto.slither.CS_TeamExit_Req}
 */
proto.slither.CS_Snake.prototype.getTeamexit = function() {
  return /** @type{?proto.slither.CS_TeamExit_Req} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_TeamExit_Req, 8));
};


/** @param {?proto.slither.CS_TeamExit_Req|undefined} value */
proto.slither.CS_Snake.prototype.setTeamexit = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.slither.CS_Snake.prototype.clearTeamexit = function() {
  this.setTeamexit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasTeamexit = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CS_TeamMatch_Req teamMatch = 9;
 * @return {?proto.slither.CS_TeamMatch_Req}
 */
proto.slither.CS_Snake.prototype.getTeammatch = function() {
  return /** @type{?proto.slither.CS_TeamMatch_Req} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_TeamMatch_Req, 9));
};


/** @param {?proto.slither.CS_TeamMatch_Req|undefined} value */
proto.slither.CS_Snake.prototype.setTeammatch = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.slither.CS_Snake.prototype.clearTeammatch = function() {
  this.setTeammatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasTeammatch = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional CS_TeamStart_Req teamStart = 10;
 * @return {?proto.slither.CS_TeamStart_Req}
 */
proto.slither.CS_Snake.prototype.getTeamstart = function() {
  return /** @type{?proto.slither.CS_TeamStart_Req} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_TeamStart_Req, 10));
};


/** @param {?proto.slither.CS_TeamStart_Req|undefined} value */
proto.slither.CS_Snake.prototype.setTeamstart = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.slither.CS_Snake.prototype.clearTeamstart = function() {
  this.setTeamstart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasTeamstart = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional CS_TeamQuickEnter_Req teamQuickEnterReq = 11;
 * @return {?proto.slither.CS_TeamQuickEnter_Req}
 */
proto.slither.CS_Snake.prototype.getTeamquickenterreq = function() {
  return /** @type{?proto.slither.CS_TeamQuickEnter_Req} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_TeamQuickEnter_Req, 11));
};


/** @param {?proto.slither.CS_TeamQuickEnter_Req|undefined} value */
proto.slither.CS_Snake.prototype.setTeamquickenterreq = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.slither.CS_Snake.prototype.clearTeamquickenterreq = function() {
  this.setTeamquickenterreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasTeamquickenterreq = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CS_TeamMatchCancel_Req teamMatchCancel = 12;
 * @return {?proto.slither.CS_TeamMatchCancel_Req}
 */
proto.slither.CS_Snake.prototype.getTeammatchcancel = function() {
  return /** @type{?proto.slither.CS_TeamMatchCancel_Req} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_TeamMatchCancel_Req, 12));
};


/** @param {?proto.slither.CS_TeamMatchCancel_Req|undefined} value */
proto.slither.CS_Snake.prototype.setTeammatchcancel = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.slither.CS_Snake.prototype.clearTeammatchcancel = function() {
  this.setTeammatchcancel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasTeammatchcancel = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional CS_AdjustTime_Req adjustTimeReq = 31;
 * @return {?proto.slither.CS_AdjustTime_Req}
 */
proto.slither.CS_Snake.prototype.getAdjusttimereq = function() {
  return /** @type{?proto.slither.CS_AdjustTime_Req} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_AdjustTime_Req, 31));
};


/** @param {?proto.slither.CS_AdjustTime_Req|undefined} value */
proto.slither.CS_Snake.prototype.setAdjusttimereq = function(value) {
  jspb.Message.setWrapperField(this, 31, value);
};


proto.slither.CS_Snake.prototype.clearAdjusttimereq = function() {
  this.setAdjusttimereq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasAdjusttimereq = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional CS_AdjustTime_ReqEX adjustTimeReqEx = 32;
 * @return {?proto.slither.CS_AdjustTime_ReqEX}
 */
proto.slither.CS_Snake.prototype.getAdjusttimereqex = function() {
  return /** @type{?proto.slither.CS_AdjustTime_ReqEX} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_AdjustTime_ReqEX, 32));
};


/** @param {?proto.slither.CS_AdjustTime_ReqEX|undefined} value */
proto.slither.CS_Snake.prototype.setAdjusttimereqex = function(value) {
  jspb.Message.setWrapperField(this, 32, value);
};


proto.slither.CS_Snake.prototype.clearAdjusttimereqex = function() {
  this.setAdjusttimereqex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasAdjusttimereqex = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional CS_SessionRestart sessionRestart = 33;
 * @return {?proto.slither.CS_SessionRestart}
 */
proto.slither.CS_Snake.prototype.getSessionrestart = function() {
  return /** @type{?proto.slither.CS_SessionRestart} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_SessionRestart, 33));
};


/** @param {?proto.slither.CS_SessionRestart|undefined} value */
proto.slither.CS_Snake.prototype.setSessionrestart = function(value) {
  jspb.Message.setWrapperField(this, 33, value);
};


proto.slither.CS_Snake.prototype.clearSessionrestart = function() {
  this.setSessionrestart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.CS_Snake.prototype.hasSessionrestart = function() {
  return jspb.Message.getField(this, 33) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.slither.SC_Snake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.slither.SC_Snake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.slither.SC_Snake.displayName = 'proto.slither.SC_Snake';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.slither.SC_Snake.prototype.toObject = function(opt_includeInstance) {
  return proto.slither.SC_Snake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.slither.SC_Snake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_Snake.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmdid: jspb.Message.getField(msg, 1),
    frameinfos: (f = msg.getFrameinfos()) && proto.slither.SC_FrameInfos.toObject(includeInstance, f),
    deadntf: (f = msg.getDeadntf()) && proto.slither.SC_DeadNtf.toObject(includeInstance, f),
    eatfoodntf: (f = msg.getEatfoodntf()) && proto.slither.SC_Eat_Food_Ntf.toObject(includeInstance, f),
    sessionntf: (f = msg.getSessionntf()) && proto.slither.SC_SessionNtf.toObject(includeInstance, f),
    flygoodsinfos: (f = msg.getFlygoodsinfos()) && proto.slither.SC_FlyGoodsInfos.toObject(includeInstance, f),
    teamcreateres: (f = msg.getTeamcreateres()) && proto.slither.SC_TeamCreate_Res.toObject(includeInstance, f),
    teamdestoryres: (f = msg.getTeamdestoryres()) && proto.slither.SC_TeamDestory_Res.toObject(includeInstance, f),
    teamdestotyntf: (f = msg.getTeamdestotyntf()) && proto.slither.SC_TeamDestory_NTF.toObject(includeInstance, f),
    teaminviteres: (f = msg.getTeaminviteres()) && proto.slither.SC_TeamInvite_Res.toObject(includeInstance, f),
    teaminvitentf: (f = msg.getTeaminvitentf()) && proto.slither.SC_TeamInvite_NTF.toObject(includeInstance, f),
    teaminviteacceptres: (f = msg.getTeaminviteacceptres()) && proto.slither.SC_TeamInvite_Accept_Res.toObject(includeInstance, f),
    teaminviteacceptntf: (f = msg.getTeaminviteacceptntf()) && proto.slither.SC_TeamInvite_Accept_NTF.toObject(includeInstance, f),
    teamexitntf: (f = msg.getTeamexitntf()) && proto.slither.SC_TeamExit_NTF.toObject(includeInstance, f),
    teamkickntf: (f = msg.getTeamkickntf()) && proto.slither.SC_TeamKick_NTF.toObject(includeInstance, f),
    teamrejectntf: (f = msg.getTeamrejectntf()) && proto.slither.SC_TeamInvite_Reject_NTF.toObject(includeInstance, f),
    teamquickenterres: (f = msg.getTeamquickenterres()) && proto.slither.SC_TeamQuickEnter_Res.toObject(includeInstance, f),
    teammatchntf: (f = msg.getTeammatchntf()) && proto.slither.SC_TeamMatch_NTF.toObject(includeInstance, f),
    adjusttimeres: (f = msg.getAdjusttimeres()) && proto.slither.CS_AdjustTime_Response.toObject(includeInstance, f),
    adjusttimeresex: (f = msg.getAdjusttimeresex()) && proto.slither.CS_AdjustTime_ResponseEX.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.slither.SC_Snake}
 */
proto.slither.SC_Snake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.slither.SC_Snake;
  return proto.slither.SC_Snake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.slither.SC_Snake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.slither.SC_Snake}
 */
proto.slither.SC_Snake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCmdid(value);
      break;
    case 2:
      var value = new proto.slither.SC_FrameInfos;
      reader.readMessage(value,proto.slither.SC_FrameInfos.deserializeBinaryFromReader);
      msg.setFrameinfos(value);
      break;
    case 3:
      var value = new proto.slither.SC_DeadNtf;
      reader.readMessage(value,proto.slither.SC_DeadNtf.deserializeBinaryFromReader);
      msg.setDeadntf(value);
      break;
    case 4:
      var value = new proto.slither.SC_Eat_Food_Ntf;
      reader.readMessage(value,proto.slither.SC_Eat_Food_Ntf.deserializeBinaryFromReader);
      msg.setEatfoodntf(value);
      break;
    case 5:
      var value = new proto.slither.SC_SessionNtf;
      reader.readMessage(value,proto.slither.SC_SessionNtf.deserializeBinaryFromReader);
      msg.setSessionntf(value);
      break;
    case 6:
      var value = new proto.slither.SC_FlyGoodsInfos;
      reader.readMessage(value,proto.slither.SC_FlyGoodsInfos.deserializeBinaryFromReader);
      msg.setFlygoodsinfos(value);
      break;
    case 11:
      var value = new proto.slither.SC_TeamCreate_Res;
      reader.readMessage(value,proto.slither.SC_TeamCreate_Res.deserializeBinaryFromReader);
      msg.setTeamcreateres(value);
      break;
    case 12:
      var value = new proto.slither.SC_TeamDestory_Res;
      reader.readMessage(value,proto.slither.SC_TeamDestory_Res.deserializeBinaryFromReader);
      msg.setTeamdestoryres(value);
      break;
    case 13:
      var value = new proto.slither.SC_TeamDestory_NTF;
      reader.readMessage(value,proto.slither.SC_TeamDestory_NTF.deserializeBinaryFromReader);
      msg.setTeamdestotyntf(value);
      break;
    case 14:
      var value = new proto.slither.SC_TeamInvite_Res;
      reader.readMessage(value,proto.slither.SC_TeamInvite_Res.deserializeBinaryFromReader);
      msg.setTeaminviteres(value);
      break;
    case 15:
      var value = new proto.slither.SC_TeamInvite_NTF;
      reader.readMessage(value,proto.slither.SC_TeamInvite_NTF.deserializeBinaryFromReader);
      msg.setTeaminvitentf(value);
      break;
    case 16:
      var value = new proto.slither.SC_TeamInvite_Accept_Res;
      reader.readMessage(value,proto.slither.SC_TeamInvite_Accept_Res.deserializeBinaryFromReader);
      msg.setTeaminviteacceptres(value);
      break;
    case 17:
      var value = new proto.slither.SC_TeamInvite_Accept_NTF;
      reader.readMessage(value,proto.slither.SC_TeamInvite_Accept_NTF.deserializeBinaryFromReader);
      msg.setTeaminviteacceptntf(value);
      break;
    case 18:
      var value = new proto.slither.SC_TeamExit_NTF;
      reader.readMessage(value,proto.slither.SC_TeamExit_NTF.deserializeBinaryFromReader);
      msg.setTeamexitntf(value);
      break;
    case 19:
      var value = new proto.slither.SC_TeamKick_NTF;
      reader.readMessage(value,proto.slither.SC_TeamKick_NTF.deserializeBinaryFromReader);
      msg.setTeamkickntf(value);
      break;
    case 20:
      var value = new proto.slither.SC_TeamInvite_Reject_NTF;
      reader.readMessage(value,proto.slither.SC_TeamInvite_Reject_NTF.deserializeBinaryFromReader);
      msg.setTeamrejectntf(value);
      break;
    case 21:
      var value = new proto.slither.SC_TeamQuickEnter_Res;
      reader.readMessage(value,proto.slither.SC_TeamQuickEnter_Res.deserializeBinaryFromReader);
      msg.setTeamquickenterres(value);
      break;
    case 22:
      var value = new proto.slither.SC_TeamMatch_NTF;
      reader.readMessage(value,proto.slither.SC_TeamMatch_NTF.deserializeBinaryFromReader);
      msg.setTeammatchntf(value);
      break;
    case 31:
      var value = new proto.slither.CS_AdjustTime_Response;
      reader.readMessage(value,proto.slither.CS_AdjustTime_Response.deserializeBinaryFromReader);
      msg.setAdjusttimeres(value);
      break;
    case 32:
      var value = new proto.slither.CS_AdjustTime_ResponseEX;
      reader.readMessage(value,proto.slither.CS_AdjustTime_ResponseEX.deserializeBinaryFromReader);
      msg.setAdjusttimeresex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.slither.SC_Snake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.slither.SC_Snake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.slither.SC_Snake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.slither.SC_Snake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFrameinfos();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.slither.SC_FrameInfos.serializeBinaryToWriter
    );
  }
  f = message.getDeadntf();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.slither.SC_DeadNtf.serializeBinaryToWriter
    );
  }
  f = message.getEatfoodntf();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.slither.SC_Eat_Food_Ntf.serializeBinaryToWriter
    );
  }
  f = message.getSessionntf();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.slither.SC_SessionNtf.serializeBinaryToWriter
    );
  }
  f = message.getFlygoodsinfos();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.slither.SC_FlyGoodsInfos.serializeBinaryToWriter
    );
  }
  f = message.getTeamcreateres();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.slither.SC_TeamCreate_Res.serializeBinaryToWriter
    );
  }
  f = message.getTeamdestoryres();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.slither.SC_TeamDestory_Res.serializeBinaryToWriter
    );
  }
  f = message.getTeamdestotyntf();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.slither.SC_TeamDestory_NTF.serializeBinaryToWriter
    );
  }
  f = message.getTeaminviteres();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.slither.SC_TeamInvite_Res.serializeBinaryToWriter
    );
  }
  f = message.getTeaminvitentf();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.slither.SC_TeamInvite_NTF.serializeBinaryToWriter
    );
  }
  f = message.getTeaminviteacceptres();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.slither.SC_TeamInvite_Accept_Res.serializeBinaryToWriter
    );
  }
  f = message.getTeaminviteacceptntf();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.slither.SC_TeamInvite_Accept_NTF.serializeBinaryToWriter
    );
  }
  f = message.getTeamexitntf();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.slither.SC_TeamExit_NTF.serializeBinaryToWriter
    );
  }
  f = message.getTeamkickntf();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.slither.SC_TeamKick_NTF.serializeBinaryToWriter
    );
  }
  f = message.getTeamrejectntf();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.slither.SC_TeamInvite_Reject_NTF.serializeBinaryToWriter
    );
  }
  f = message.getTeamquickenterres();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.slither.SC_TeamQuickEnter_Res.serializeBinaryToWriter
    );
  }
  f = message.getTeammatchntf();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.slither.SC_TeamMatch_NTF.serializeBinaryToWriter
    );
  }
  f = message.getAdjusttimeres();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.slither.CS_AdjustTime_Response.serializeBinaryToWriter
    );
  }
  f = message.getAdjusttimeresex();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.slither.CS_AdjustTime_ResponseEX.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 cmdid = 1;
 * @return {number}
 */
proto.slither.SC_Snake.prototype.getCmdid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.slither.SC_Snake.prototype.setCmdid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.slither.SC_Snake.prototype.clearCmdid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasCmdid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SC_FrameInfos frameInfos = 2;
 * @return {?proto.slither.SC_FrameInfos}
 */
proto.slither.SC_Snake.prototype.getFrameinfos = function() {
  return /** @type{?proto.slither.SC_FrameInfos} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_FrameInfos, 2));
};


/** @param {?proto.slither.SC_FrameInfos|undefined} value */
proto.slither.SC_Snake.prototype.setFrameinfos = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.slither.SC_Snake.prototype.clearFrameinfos = function() {
  this.setFrameinfos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasFrameinfos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SC_DeadNtf deadNtf = 3;
 * @return {?proto.slither.SC_DeadNtf}
 */
proto.slither.SC_Snake.prototype.getDeadntf = function() {
  return /** @type{?proto.slither.SC_DeadNtf} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_DeadNtf, 3));
};


/** @param {?proto.slither.SC_DeadNtf|undefined} value */
proto.slither.SC_Snake.prototype.setDeadntf = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.slither.SC_Snake.prototype.clearDeadntf = function() {
  this.setDeadntf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasDeadntf = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SC_Eat_Food_Ntf eatFoodNtf = 4;
 * @return {?proto.slither.SC_Eat_Food_Ntf}
 */
proto.slither.SC_Snake.prototype.getEatfoodntf = function() {
  return /** @type{?proto.slither.SC_Eat_Food_Ntf} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_Eat_Food_Ntf, 4));
};


/** @param {?proto.slither.SC_Eat_Food_Ntf|undefined} value */
proto.slither.SC_Snake.prototype.setEatfoodntf = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.slither.SC_Snake.prototype.clearEatfoodntf = function() {
  this.setEatfoodntf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasEatfoodntf = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SC_SessionNtf sessionNtf = 5;
 * @return {?proto.slither.SC_SessionNtf}
 */
proto.slither.SC_Snake.prototype.getSessionntf = function() {
  return /** @type{?proto.slither.SC_SessionNtf} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_SessionNtf, 5));
};


/** @param {?proto.slither.SC_SessionNtf|undefined} value */
proto.slither.SC_Snake.prototype.setSessionntf = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.slither.SC_Snake.prototype.clearSessionntf = function() {
  this.setSessionntf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasSessionntf = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SC_FlyGoodsInfos flyGoodsInfos = 6;
 * @return {?proto.slither.SC_FlyGoodsInfos}
 */
proto.slither.SC_Snake.prototype.getFlygoodsinfos = function() {
  return /** @type{?proto.slither.SC_FlyGoodsInfos} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_FlyGoodsInfos, 6));
};


/** @param {?proto.slither.SC_FlyGoodsInfos|undefined} value */
proto.slither.SC_Snake.prototype.setFlygoodsinfos = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.slither.SC_Snake.prototype.clearFlygoodsinfos = function() {
  this.setFlygoodsinfos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasFlygoodsinfos = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SC_TeamCreate_Res teamCreateRes = 11;
 * @return {?proto.slither.SC_TeamCreate_Res}
 */
proto.slither.SC_Snake.prototype.getTeamcreateres = function() {
  return /** @type{?proto.slither.SC_TeamCreate_Res} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamCreate_Res, 11));
};


/** @param {?proto.slither.SC_TeamCreate_Res|undefined} value */
proto.slither.SC_Snake.prototype.setTeamcreateres = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.slither.SC_Snake.prototype.clearTeamcreateres = function() {
  this.setTeamcreateres(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasTeamcreateres = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional SC_TeamDestory_Res teamDestoryRes = 12;
 * @return {?proto.slither.SC_TeamDestory_Res}
 */
proto.slither.SC_Snake.prototype.getTeamdestoryres = function() {
  return /** @type{?proto.slither.SC_TeamDestory_Res} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamDestory_Res, 12));
};


/** @param {?proto.slither.SC_TeamDestory_Res|undefined} value */
proto.slither.SC_Snake.prototype.setTeamdestoryres = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.slither.SC_Snake.prototype.clearTeamdestoryres = function() {
  this.setTeamdestoryres(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasTeamdestoryres = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional SC_TeamDestory_NTF teamDestotyNTF = 13;
 * @return {?proto.slither.SC_TeamDestory_NTF}
 */
proto.slither.SC_Snake.prototype.getTeamdestotyntf = function() {
  return /** @type{?proto.slither.SC_TeamDestory_NTF} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamDestory_NTF, 13));
};


/** @param {?proto.slither.SC_TeamDestory_NTF|undefined} value */
proto.slither.SC_Snake.prototype.setTeamdestotyntf = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.slither.SC_Snake.prototype.clearTeamdestotyntf = function() {
  this.setTeamdestotyntf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasTeamdestotyntf = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional SC_TeamInvite_Res teamInviteRes = 14;
 * @return {?proto.slither.SC_TeamInvite_Res}
 */
proto.slither.SC_Snake.prototype.getTeaminviteres = function() {
  return /** @type{?proto.slither.SC_TeamInvite_Res} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamInvite_Res, 14));
};


/** @param {?proto.slither.SC_TeamInvite_Res|undefined} value */
proto.slither.SC_Snake.prototype.setTeaminviteres = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.slither.SC_Snake.prototype.clearTeaminviteres = function() {
  this.setTeaminviteres(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasTeaminviteres = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional SC_TeamInvite_NTF teamInviteNTF = 15;
 * @return {?proto.slither.SC_TeamInvite_NTF}
 */
proto.slither.SC_Snake.prototype.getTeaminvitentf = function() {
  return /** @type{?proto.slither.SC_TeamInvite_NTF} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamInvite_NTF, 15));
};


/** @param {?proto.slither.SC_TeamInvite_NTF|undefined} value */
proto.slither.SC_Snake.prototype.setTeaminvitentf = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.slither.SC_Snake.prototype.clearTeaminvitentf = function() {
  this.setTeaminvitentf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasTeaminvitentf = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional SC_TeamInvite_Accept_Res teamInviteAcceptRes = 16;
 * @return {?proto.slither.SC_TeamInvite_Accept_Res}
 */
proto.slither.SC_Snake.prototype.getTeaminviteacceptres = function() {
  return /** @type{?proto.slither.SC_TeamInvite_Accept_Res} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamInvite_Accept_Res, 16));
};


/** @param {?proto.slither.SC_TeamInvite_Accept_Res|undefined} value */
proto.slither.SC_Snake.prototype.setTeaminviteacceptres = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.slither.SC_Snake.prototype.clearTeaminviteacceptres = function() {
  this.setTeaminviteacceptres(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasTeaminviteacceptres = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional SC_TeamInvite_Accept_NTF teamInviteAcceptNTF = 17;
 * @return {?proto.slither.SC_TeamInvite_Accept_NTF}
 */
proto.slither.SC_Snake.prototype.getTeaminviteacceptntf = function() {
  return /** @type{?proto.slither.SC_TeamInvite_Accept_NTF} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamInvite_Accept_NTF, 17));
};


/** @param {?proto.slither.SC_TeamInvite_Accept_NTF|undefined} value */
proto.slither.SC_Snake.prototype.setTeaminviteacceptntf = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.slither.SC_Snake.prototype.clearTeaminviteacceptntf = function() {
  this.setTeaminviteacceptntf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasTeaminviteacceptntf = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional SC_TeamExit_NTF teamExitNTF = 18;
 * @return {?proto.slither.SC_TeamExit_NTF}
 */
proto.slither.SC_Snake.prototype.getTeamexitntf = function() {
  return /** @type{?proto.slither.SC_TeamExit_NTF} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamExit_NTF, 18));
};


/** @param {?proto.slither.SC_TeamExit_NTF|undefined} value */
proto.slither.SC_Snake.prototype.setTeamexitntf = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.slither.SC_Snake.prototype.clearTeamexitntf = function() {
  this.setTeamexitntf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasTeamexitntf = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional SC_TeamKick_NTF teamKickNTF = 19;
 * @return {?proto.slither.SC_TeamKick_NTF}
 */
proto.slither.SC_Snake.prototype.getTeamkickntf = function() {
  return /** @type{?proto.slither.SC_TeamKick_NTF} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamKick_NTF, 19));
};


/** @param {?proto.slither.SC_TeamKick_NTF|undefined} value */
proto.slither.SC_Snake.prototype.setTeamkickntf = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


proto.slither.SC_Snake.prototype.clearTeamkickntf = function() {
  this.setTeamkickntf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasTeamkickntf = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional SC_TeamInvite_Reject_NTF teamRejectNTF = 20;
 * @return {?proto.slither.SC_TeamInvite_Reject_NTF}
 */
proto.slither.SC_Snake.prototype.getTeamrejectntf = function() {
  return /** @type{?proto.slither.SC_TeamInvite_Reject_NTF} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamInvite_Reject_NTF, 20));
};


/** @param {?proto.slither.SC_TeamInvite_Reject_NTF|undefined} value */
proto.slither.SC_Snake.prototype.setTeamrejectntf = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.slither.SC_Snake.prototype.clearTeamrejectntf = function() {
  this.setTeamrejectntf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasTeamrejectntf = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional SC_TeamQuickEnter_Res teamQuickEnterRes = 21;
 * @return {?proto.slither.SC_TeamQuickEnter_Res}
 */
proto.slither.SC_Snake.prototype.getTeamquickenterres = function() {
  return /** @type{?proto.slither.SC_TeamQuickEnter_Res} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamQuickEnter_Res, 21));
};


/** @param {?proto.slither.SC_TeamQuickEnter_Res|undefined} value */
proto.slither.SC_Snake.prototype.setTeamquickenterres = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.slither.SC_Snake.prototype.clearTeamquickenterres = function() {
  this.setTeamquickenterres(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasTeamquickenterres = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional SC_TeamMatch_NTF teamMatchNtf = 22;
 * @return {?proto.slither.SC_TeamMatch_NTF}
 */
proto.slither.SC_Snake.prototype.getTeammatchntf = function() {
  return /** @type{?proto.slither.SC_TeamMatch_NTF} */ (
    jspb.Message.getWrapperField(this, proto.slither.SC_TeamMatch_NTF, 22));
};


/** @param {?proto.slither.SC_TeamMatch_NTF|undefined} value */
proto.slither.SC_Snake.prototype.setTeammatchntf = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


proto.slither.SC_Snake.prototype.clearTeammatchntf = function() {
  this.setTeammatchntf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasTeammatchntf = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional CS_AdjustTime_Response adjustTimeRes = 31;
 * @return {?proto.slither.CS_AdjustTime_Response}
 */
proto.slither.SC_Snake.prototype.getAdjusttimeres = function() {
  return /** @type{?proto.slither.CS_AdjustTime_Response} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_AdjustTime_Response, 31));
};


/** @param {?proto.slither.CS_AdjustTime_Response|undefined} value */
proto.slither.SC_Snake.prototype.setAdjusttimeres = function(value) {
  jspb.Message.setWrapperField(this, 31, value);
};


proto.slither.SC_Snake.prototype.clearAdjusttimeres = function() {
  this.setAdjusttimeres(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasAdjusttimeres = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional CS_AdjustTime_ResponseEX adjustTimeResEx = 32;
 * @return {?proto.slither.CS_AdjustTime_ResponseEX}
 */
proto.slither.SC_Snake.prototype.getAdjusttimeresex = function() {
  return /** @type{?proto.slither.CS_AdjustTime_ResponseEX} */ (
    jspb.Message.getWrapperField(this, proto.slither.CS_AdjustTime_ResponseEX, 32));
};


/** @param {?proto.slither.CS_AdjustTime_ResponseEX|undefined} value */
proto.slither.SC_Snake.prototype.setAdjusttimeresex = function(value) {
  jspb.Message.setWrapperField(this, 32, value);
};


proto.slither.SC_Snake.prototype.clearAdjusttimeresex = function() {
  this.setAdjusttimeresex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.slither.SC_Snake.prototype.hasAdjusttimeresex = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * @enum {number}
 */
proto.slither.CS_CMD_ID = {
  CS_CMD_FRAMEINFO: 1,
  CS_CMD_SLITHER_DEAD_NTF: 2,
  CS_CMD_EAT_FOOD_NTF: 3,
  CS_CMD_SESSION_NTF: 4,
  SC_CMD_FLYGOODS_NTF: 5,
  CS_CMD_TEAM_CREATE: 2161,
  CS_CMD_TEAM_DESTORY: 2163,
  CS_CMD_TEAM_INVITE: 2166,
  CS_CMD_TEAM_ACCEPT: 2169,
  CS_CMD_TEAM_REJECT: 2172,
  CS_CMD_TEAM_KICK: 2173,
  CS_CMD_TEAM_EXIT: 2175,
  CS_CMD_TEAM_MATCH: 2177,
  CS_CMD_TEAM_MATCH_CANCEL: 2179,
  CS_CMD_TEAM_START: 2184,
  CS_CMD_TEAM_QUICKENTER: 2192,
  SC_CMD_TEAM_CREATE_ACK: 2162,
  SC_CMD_TEAM_DESTORY_ACK: 2164,
  SC_CMD_TEAM_DESTORY_NTF: 2165,
  SC_CMD_TEAM_INVITE_ACK: 2167,
  SC_CMD_TEAM_INVITE_NTF: 2168,
  SC_CMD_TEAM_ACCEPT_ACK: 2170,
  SC_CMD_TEAM_ACCEPT_NTF: 2171,
  SC_CMD_TEAM_KICK_NTF: 2174,
  SC_CMD_TEAM_EXIT_NTF: 2176,
  SC_CMD_TEAM_MATCH_NTF: 2178,
  SC_CMD_TEAM_MATCH_CANCEL_NTF: 2180,
  SC_CMD_TEAM_REJECT_NTF: 2186,
  SC_CMD_TEAM_SESSION_NTF: 2188,
  SC_CMD_TEAM_QUICKENTER_ACK: 2193,
  CS_CMD_TIME_REQ: 2092,
  CS_CMD_TIME_RES: 92,
  CS_CMD_TIME_REQUEST_EX: 2094,
  SC_CMD_TIME_RESPONSE_EX: 2095,
  CS_CMD_SESSION_RESTART: 2086
};

/**
 * @enum {number}
 */
proto.slither.FrameIdx = {
  EFRAMEIDX_ID: 0,
  EFRAMEIDX_SCORE: 1,
  EFRAMEIDX_SPEED: 2,
  EFRAMEIDX_X: 3,
  EFRAMEIDX_Y: 4,
  EFRAMEIDX_SKINTYPE: 5,
  EFRAMEIDX_PROTECT: 6,
  EFRAMEIDX_LENGTH: 7,
  EFRAMEIDX_INVISIBLE: 8
};

goog.object.extend(exports, proto.slither);
